 gitk --max-count={{100}} --all##Show at most 100 changes in all branches
 grex {{space_separated_strings}}##Generate a simple regular expression
 kitex -module {{github.com/xx-org/xx-name}} {{path/to/IDL_file.thrift}}##Generate client codes when a project is not in `$GOPATH`
!-{{n}}##Run the command `n` lines back in the history
!?{{string}}?##Run the most recent command containing `string`
!cat {{path/to/file}}<Enter>##Insert the contents of a file
!{{command}} {{command_arguments}}##Run an external (non-Git) command while in the interactive Git shell
!{{n}}##Run the Nth command of the history
%s/{{regular_expression}}/{{replacement}}/g<Enter>##Perform a regular expression substitution in the whole file
%s{{foo}}<Enter>c{{bar}}<Escape>##Replace all instances of "foo" in the current file with "bar"
'q' then 'y'##Quit w3m
(gdb) load {{firmware.elf}}##Write firmware to device
(gdb) target extended-remote {{localhost}}:{{4500}}##Connect to GDB server
* * 3 Apr * {{command_to_execute}}##Sample job which runs every minute on the 3rd of April
,p##Print the entire document (`,` is a shortcut to the range `1,$` which covers the start to the end of the document)
. {{path/to/file}}##Evaluate contents of a given file (alternatively replacing `source` with `.`)
/*.pdf##Search for PDF files in the current directory
/\d+<Enter>N##Search for numbers and select the first two
/front##Open the front page
/join {{#channelname}}##Join a channel
/quit##Exit the application cleanly and quitting any server(s)
/r/{{subreddit_name}}##Open a subreddit
/win {{window_number}}##Change active window (starts at 1)
/{{regular_expression}}##Search for a pattern in the file (press `n` to go to next match)
/{{search_pattern}}<Enter>##Search for a pattern in the file
/{{search_pattern}}<Enter>##Search for a pattern in the file (press `n`/`N` to go to next/previous match)
/{{search_pattern}}<Enter>##Search for a pattern in the file (press `n`/`N` to go to next/previous match)
/{{something}}##Forward search for a string (press `n`/`N` to go to next/previous match)
/{{something}}##Search for a string (press `n` to go to the next match)
/{{subreddit_name}}##Open a subreddit
0 10 * * * {{command_to_execute}}##Sample job which runs at 1000 every day (* means any value)
12##Open the file or directory whose ELN (entry list number) is 12
1|2|3##Set the detail level for the selected key
2to3 --list-fixes##Display a list of all available language features that can be converted from Python 2 to Python 3
2to3 --output-dir={{path/to/python3_directory}} --write-unchanged-files --nobackups {{path/to/python2_directory}}##Convert all Python 2 files in a directory to Python 3
2to3 --processes={{4}} --output-dir={{path/to/python3_directory}} --write --nobackups --no-diff {{path/to/python2_directory}}##Run 2to3 with multiple threads
2to3 --write {{path/to/file.py}} --fix={{raw_input}} --fix={{print}}##Convert specific Python 2 language features to Python 3
2to3 --write {{path/to/file.py}} --nofix={{has_key}} --nofix={{isinstance}}##Convert all Python 2 language features except the specified ones to Python 3
2to3 --write {{path/to/file.py}}##Convert a Python 2 file to Python 3
2to3 {{path/to/file.py}}##Display the changes that would be performed without performing them (dry-run)
30 2 * * Fri {{/absolute/path/to/script.sh}}##Sample job which runs a certain script at 0230 every Friday
7z a -t{{7z|bzip2|gzip|lzip|tar|zip}} {{path/to/archive.7z}} {{path/to/file_or_directory}}##[a]rchive using a specific archive type
7z a {{path/to/archive.7z}} {{path/to/file_or_directory}}##[a]rchive a file or directory
7z a {{path/to/encrypted.7z}} -p{{password}} -mhe=on {{path/to/archive.7z}}##Encrypt an existing archive (including filenames)
7z i##List available archive types
7z l {{path/to/archive.7z}}##[l]ist the contents of an archive
7z x {{path/to/archive.7z}} -o{{path/to/output}}##E[x]tract an archive to a specific directory
7z x {{path/to/archive.7z}} -so##E[x]tract an archive to stdout
7z x {{path/to/archive.7z}}##E[x]tract an archive preserving the original directory structure
7za a -t{{7z|bzip2|gzip|lzip|tar|zip}} {{path/to/archive.7z}} {{path/to/file_or_directory}}##[a]rchive using a specific archive type
7za a {{path/to/archive.7z}} {{path/to/file_or_directory}}##[a]rchive a file or directory
7za a {{path/to/encrypted.7z}} -p{{password}} -mhe=on {{path/to/archive.7z}}##Encrypt an existing archive (including file names)
7za i##List available archive types
7za l {{path/to/archive.7z}}##[l]ist the contents of an archive
7za x {{path/to/archive.7z}} -o{{path/to/output}}##E[x]tract an archive to a specific directory
7za x {{path/to/archive.7z}} -so##E[x]tract an archive to stdout
7za x {{path/to/archive.7z}}##E[x]tract an archive preserving the original directory structure
7zr a {{path/to/archive.7z}} {{path/to/file_or_directory}}##[a]rchive a file or directory
7zr a {{path/to/encrypted.7z}} -p{{password}} -mhe=on {{path/to/archive.7z}}##Encrypt an existing archive (including file names)
7zr i##List available archive types
7zr l {{path/to/archive.7z}}##[l]ist the contents of an archive
7zr x {{path/to/archive.7z}} -o{{path/to/output}}##E[x]tract an archive to a specific directory
7zr x {{path/to/archive.7z}} -so##E[x]tract an archive to stdout
7zr x {{path/to/archive.7z}}##E[x]tract an archive preserving the original directory structure
:%s/{{regular_expression}}/{{replacement}}/g<Enter>##Perform a regular expression substitution in the whole file
:O n##Move through opened files
:diffupdate##Update all highlights and folds
:format##Format the file
:help<Enter>##View Vim's help manual
:q!<Enter>##Force-quit without saving
:set nu<Enter>##Display the line numbers
:theme {{theme_name}}##Change the Helix theme
:w<Enter>##Save the current file
:wq<Enter>##Save and Quit
:wq<Enter>##Save and Quit
< or >##Enter a string into the current cell
<CTRL-x> o##Split the current window in half
<Esc> :q <Enter>##Exit the tutor
<Esc>/{{search_pattern}}<Enter>##Search for a pattern in the file (press `n`/`N` to go to next/previous match)
<Esc>:%s/{{regular_expression}}/{{replacement}}/g<Enter>##Perform a regular expression substitution in the whole file
<Esc>:q!<Enter>##Quit without saving
<Esc>:wq<Enter>##Save (write) the file, and quit
<Esc>i##Enter text editing mode (insert mode)
<Esc>u##Undo the last operation
<Esc>{{yy|dd}}##Copy ("yank") or cut ("delete") the current line (paste it with `P`)
<Escape>##Escape insert mode, to go back to normal mode
<Escape>##Quit mplayer
<Left> or <Right>##Seek backward or forward 10 seconds
<Space> (down), b (up)##Page down / up
<Space>##Display the next page of the file
<Space>##Go to the next page
<Space>##Pause playback
<Space>##Unselect all secondary selections, and keep only the main one
=##Enter a numeric constant into the current cell
> !{{shell_command}}##Run a shell command from the interactive CLI
> pr > {{path/to/file.bin}}##Dump raw bytes of current block to a file
> {{radare2_command}}?##Show help text for any command in the interactive CLI
?##Display detailed help
?##For more help in interactive mode
?##Open the help screen
?##See interactive commands while running htop
?##See keyboard shortcuts (the most relevant are visible in the status line)
?##Show all shortcuts inside of ORCA
?##Show help in `gpg-tui`
?{{something}}##Backward search for a string (press `n`/`N` to go to next/previous match)
AUTOSSH_DEBUG=1 AUTOSSH_LOGFILE={{path/to/autossh_log_file.log}} autossh -f -M {{monitor_port}} -v -E {{path/to/ssh_log_file.log}} {{ssh_command}}##Run in the background, logging `autossh` debug output and `ssh` verbose output to files
AdGuardHome --config {{path/to/AdGuardHome.yaml}}##Run AdGuard Home with a specific config
AdGuardHome --service reload##Reload the configuration for the AdGuard Home service
AdGuardHome --service start##Start the AdGuard Home service
AdGuardHome --service {{install|uninstall}}##Install or uninstall AdGuard Home as a service
AdGuardHome --service {{stop|restart}}##Stop or restart the AdGuard Home service
AdGuardHome --work-dir {{path/to/directory}}##Set the work directory for data to be stored in
AdGuardHome##Run AdGuard Home
Alt + M##Show the menu
Alt + N##Open a new pane (inside a zellij session)
Ctrl + 1##Open the formula book
Ctrl + A, D##Detach from inside a screen
Ctrl + A, K##Kill the current screen session
Ctrl + C##Quit elinks
Ctrl + C##Quit the game
Ctrl + E replaceall "{{pattern}}" "{{replacement}}" <Enter>##Perform a substitution in the whole file
Ctrl + E {{command}} <Enter>##Execute a command
Ctrl + F "{{pattern}}" <Enter>##Search for a pattern in the file (press `Ctrl + N`/`Ctrl + P` to go to next/previous match)
Ctrl + H##Display your browser history
Ctrl + J, Tab##Switch to the next view
Ctrl + K##Cut the entire line
Ctrl + K##Toggle keypad
Ctrl + K, Shift + Tab##Switch to the previous view
Ctrl + L##Load a speedcrunch session
Ctrl + N##Clear the calculator of recent calculations
Ctrl + N, D##Detach from the current session (inside a zellij session)
Ctrl + P##Wrap highlighted in parentheses (defaults to wrapping all if nothing selected)
Ctrl + Q##Quit
Ctrl + R##Copy the result of the most recent calculation
Ctrl + R##Send an HTTP request
Ctrl + S##Save a file
Ctrl + S##Save a speedcrunch session
Ctrl + T##Go to the menu of the interactive device monitor
Ctrl + X##Save and Quit
Ctrl + X, Ctrl + C##Quit Emacs
Ctrl + X, Ctrl + S##Save a file in Emacs
Ctrl + \##Detach from a session
Ctrl + ]##Emit the default escape character combination for terminating the session
Ctrl + g##Show all ORCA operators inside of ORCA
Ctrl + w {{h|l}}##Move the cursor to the window on the left|right
Ctrl-B c##Create a new window (inside a tmux session)
Ctrl-B d##Detach from the current session (inside a tmux session)
Ctrl-B w##Switch between sessions and windows (inside a tmux session)
DISPLAY=:2 {{command_name}}##Start an X application on the new screen
DOWN <or> UP##Jump backward/forward 1 minute
Down arrow key##Soft drop the piece
E##Edit string in the current cell
EDITOR={{nano}} pueue edit {{task_id}}##Edit a command with the specified editor
Enter##Hard drop the piece
F##Follow the output of the currently opened file
F1##Display help information
F1##Show the main menu inside of ORCA
FTP_PASSWORD={{ftp_login_password}} PASSPHRASE={{encryption_password}} duplicity {{path/to/source/directory}} {{ftps://user@hostname/target/directory/path/}}##Backup a directory via FTPS to a remote machine, encrypting it with a password
FTP_PASSWORD={{webdav_login_password}} duplicity remove-older-than {{1Y}} --force {{webdav[s]://user@hostname[:port]/some_dir}}##Delete versions older than 1 year from a backup stored on a WebDAV share
G (end), g (start)##Go to end / start of file
H##Get a hint
H##Toggle the printing of error explanations. (By default, explanations are not printed and only a `?` appears)
LEFT <or> RIGHT##Jump backward/forward 5 seconds
Left arrow key or u##Go back to the previously displayed page
MAIL={{path/to/mailbox}} from##List mail in the specified mailbox directory
MAX_FILE_SIZE={{size_in_megabytes}} http-server-upload##Start an HTTP server with the specified maximum allowed file size for uploads in MiB (defaults to 200 MiB)
N##Create a new puzzle
NPROC=4 mk {{target}}##Call a specific target, executing 4 jobs at a time in parallel
PASSPHRASE={{gpg_key_password}} duplicity restore --encrypt-key {{gpg_key_id}} --file-to-restore {{relative/path/restoredirectory}} file://{{absolute/path/to/backup/directory}} {{path/to/directory/to/restore/to}}##Restore a subdirectory from a GnuPG-encrypted local backup to a given location
PF_COLOR={{0}} pfetch##Display without colors
PF_INFO="{{ascii palette}}" pfetch##Display only the ASCII art and color palette fields
PF_INFO="{{ascii title os host kernel uptime pkgs memory shell editor wm de palette}}" pfetch##Display all possible fields
PORT={{port}} http-server-upload##Start an HTTP server on a specific port to upload files to the current directory
PS > Invoke-Binary {{binary.exe}}##Invoke a binary on the host from the `--executables` directory
PS > menu##Get a list of loaded PowerShell functions
PS > upload {{path/to/local/file}} {{path/to/remote/file}}##Upload a file to the host
PS > {{script.ps1}}##Load a PowerShell script from the `--scripts` directory
Q##Exit
Q##Quit the game
R --vanilla##Start R in vanilla mode (i.e. a blank session that doesn't save the workspace at the end)
R --version##Check R version
R -d {{debugger}}##Run R with a debugger
R -e {{expr}}##Execute an R expression and then exit
R -f {{path/to/file.R}}##Execute a file
R CMD check {{path/to/package_source}}##Check R packages from package sources
R##Start a REPL (interactive shell)
Rscript --vanilla {{path/to/file.R}}##Run a script in vanilla mode (i.e. a blank session that doesn't save the workspace at the end)
Rscript --version##Display R version
Rscript -e {{expression1}} -e {{expression2}}##Execute one or more R expressions
Rscript {{path/to/file.R}}##Run a script
S##See the complete solution
Shift + T##Open a new browser tab
Spacebar##Hard drop the current piece
TOKEN={{secret}} http-server-upload##Start an HTTP server accepting uploads with a specific token field in the HTTP post
UPLOAD_DIR={{path/to/directory}} http-server-upload##Start an HTTP server, storing the uploaded files in a specific directory
UPLOAD_TMP_DIR={{path/to/directory}} http-server-upload##Start an HTTP server using a specific directory to temporarily store files during the upload process
USER="{{user}}" HOSTNAME="{{hostname}}" pfetch##Display a different username and hostname
Up arrow key, Down arrow key##Navigate forwards and backwards through the links on a page
VBoxManage controlvm {{name|uuid}} poweroff##Shutdown down the virtual machine without saving its state
VBoxManage controlvm {{name|uuid}} savestate##Shutdown the virtual machine and save its current state
VBoxManage extpack install --replace {{VboxExtensionPackFileName}}##Update VBox extension packs
VBoxManage list vms##List all VirtualBox virtual machines
VBoxManage showvminfo {{name|uuid}}##Show information about a particular virtual machine
VBoxManage startvm {{name|uuid}} -type headless##Start a virtual machine in headless mode
VBoxManage startvm {{name|uuid}}##Start a virtual machine
Xephyr -br -ac -noreset -screen {{800x600}} {{:2}}##Create a black window with display ID "2"
[ "${{variable}}" -{{eq|ne|gt|lt|ge|le}} {{integer}} ]##Test if a given variable is [eq]ual/[n]ot [e]qual/[g]reater [t]han/[l]ess [t]han/[g]reater than or [e]qual/[l]ess than or [e]qual to the specified number
[ "${{variable}}" {{==|!=}} "{{string}}" ]##Test if a given variable is equal/not equal to the specified string
[ -d {{path/to/directory}} ]##Test if the specified [d]irectory exists
[ -e {{path/to/file_or_directory}} ]##Test if the specified file or directory [e]xists
[ -f {{path/to/file}} ]##Test if the specified [f]ile exists
[ -n "${{variable}}" ]##Test if the specified variable has a [n]on-empty value
[ -z "${{variable}}" ]##Test if the specified variable has an empty value
[ <or> ]##Decrease or increase playback speed by 10%
[[ ${{variable}} -{{eq|ne|gt|lt|ge|le}} {{integer}} ]]##Test if a given variable is [eq]ual/[n]ot [e]qual/[g]reater [t]han/[l]ess [t]han/[g]reater than or [e]qual/[l]ess than or [e]qual to the specified number
[[ ${{variable}} {{==|!=}} "{{string}}" ]]##Test if a given variable is equal/not equal to the specified string
[[ ${{variable}} {{==|=~}} {{pattern}} ]]##Test if a given string conforms the specified glob/regex
[[ -d {{path/to/directory}} ]]##Test if the specified [d]irectory exists
[[ -e {{path/to/file_or_directory}} ]]##Test if the specified file or directory [e]xists
[[ -f {{path/to/file}} ]]##Test if the specified [f]ile exists
[[ -n ${{variable}} ]]##Test if the specified variable has a [n]on-empty value
[[ -z ${{variable}} ]]##Test if the specified variable has an empty value
[c##Jump to the next difference
[space]##Expand/collapse comments
]c##Jump to the previous difference
^{{string1}}^{{string2}}^##Run the previous command, replacing `string1` with `string2`
a<Enter>{{text_to_insert}}<Enter>.##Add text to the current document. Mark completion by entering a period by itself in a new line
aapt dump badging {{path/to/app.apk}}##Display an app's metadata (version, permissions, etc.)
aapt list {{path/to/app.apk}}##List files contained in an APK archive
aapt package -F {{path/to/app.apk}} {{path/to/directory}}##Create a new APK archive with files from the specified directory
ab -k {{url}}##Use HTTP [K]eep Alive, i.e. perform multiple requests within one HTTP session
ab -n {{100}} -T {{application/json}} -p {{path/to/file.json}} {{url}}##Execute 100 HTTP POST requests to a URL, using a JSON payload from a file
ab -n {{100}} -c {{10}} {{url}}##Execute 100 HTTP GET requests, in concurrent batches of 10, to a URL
ab -n {{100}} {{url}}##Execute 100 HTTP GET requests to a given URL
ab -t {{60}} {{url}}##Set the maximum number of seconds to spend for benchmarking
abduco -A {{name}} {{bash}}##Attach to a session, creating it if it doesn't exist
abduco -A {{name}}##Attach to a session with `dvtm`, creating it if it doesn't exist
abduco -Ar {{name}}##Attach to a session in read-only mode
abduco##List sessions
ack "{{search_pattern}}"##Search for files containing a string or regular expression in the current directory recursively
ack --count --files-with-matches "{{search_pattern}}"##Print the file names and the number of matches for each file only
ack --count --no-filename "{{search_pattern}}"##Count the total number of matches found
ack --help-types##List all the values that can be used with `--type`
ack --ignore-case "{{search_pattern}}"##Search for a case-insensitive pattern
ack --type=no{{ruby}} "{{search_pattern}}"##Do not search in files of a specific type
ack --type={{ruby}} "{{search_pattern}}"##Limit search to files of a specific type
ack -o "{{search_pattern}}"##Search for lines matching a pattern, printing [o]nly the matched text and not the rest of the line
acme.sh --install-cert -d {{example.com}} --key-file {{/path/to/example.com.key}} --fullchain-file {{/path/to/example.com.cer}} --reloadcmd {{"systemctl force-reload nginx"}}##Install certificate files into the specified locations (useful for automatic certificate renewal)
acme.sh --issue --alpn --domain {{example.com}}##Issue a certificate using standalone TLS mode using port 443
acme.sh --issue --apache --domain {{example.com}}##Issue a certificate using a working Apache configuration
acme.sh --issue --dns --domain {{example.com}} --yes-I-know-dns-manual-mode-enough-go-ahead-please##Issue a certificate using a manual DNS mode
acme.sh --issue --dns {{dns_cf}} --domain {{*.example.com}}##Issue a wildcard (\*) certificate using an automatic DNS API mode
acme.sh --issue --dns {{dns_cf}} --domain {{example.com}} --challenge-alias {{alias-for-example-validation.com}}##Issue a certificate using a DNS alias mode
acme.sh --issue --dns {{dns_namecheap}} --domain {{example.com}} --dnssleep {{300}}##Issue a certificate while disabling automatic Cloudflare / Google DNS polling after the DNS record is added by specifying a custom wait time in seconds
acme.sh --issue --dns {{dns_namesilo}} --domain {{example.com}} --domain {{*.example.com}}##Issue a wildcard certificate (denoted by an asterisk) using an automatic DNS API mode
acme.sh --issue --dns {{gnd_gd}} --domain {{example.com}}##Issue a certificate using an automatic DNS API mode
acme.sh --issue --domain {{example.com}} --webroot {{/path/to/webroot}}##Issue a certificate using webroot mode
acme.sh --issue --nginx --domain {{example.com}}##Issue a certificate using a working Nginx configuration
acme.sh --issue --standalone --domain {{example.com}} --domain {{www.example.com}}##Issue a certificate for multiple domains using standalone mode using port 80
act -a {{action_id}}##Run a specific action
act -l##List the available actions
act -n##Do not actually run the actions (i.e. a dry run)
act -v##Show verbose logs
act {{event_type}}##Run a specific event
act##Run the default event
acyclic -?##Display help for `acyclic`
acyclic -v -n {{path/to/input.gv}}##Print if a graph is acyclic, has a cycle, or is undirected, producing no output graph
acyclic {{path/to/input.gv}} > {{path/to/output.gv}}##Make a directed graph acyclic by reversing some edges
adb devices##Get a list of connected devices
adb install --fastdeploy {{path/to/file.apk}}##Quickly update an installed package by only updating the parts of the APK that changed
adb install -g {{path/to/file.apk}}##Grant all permissions listed in the app manifest
adb install -r {{path/to/file.apk}}##Push an Android application to an emulator/device
adb install -r {{path/to/file.apk}}##Reinstall an existing app, keeping its data
adb install {{path/to/file.apk}}##Push an Android application to an emulator/device
adb kill-server##Terminate the adb server process
adb pull {{path/to/device_file_or_directory}} {{path/to/local_destination_directory}}##Copy a file/directory from the target device
adb push {{path/to/local_file_or_directory}} {{path/to/device_destination_directory}}##Copy a file/directory to the target device
adb reverse --list##List all reverse socket connections from emulators and devices
adb reverse --remove tcp:{{remote_port}}##Remove a reverse socket connections from an emulator or device
adb reverse --remove-all##Remove all reverse socket connections from all emulators and devices
adb reverse tcp:{{remote_port}} tcp:{{local_port}}##Reverse a TCP port from an emulator or device to localhost
adb shell am start -W -c android.intent.category.HOME -a android.intent.action.MAIN##Start the home activity on an emulator or device
adb shell am start -n {{package}}/{{activity}}##Start an activity on emulator/device
adb shell getprop##Get all the properties from emulator or device
adb shell input keyevent {{keycode}}##Trigger a key event
adb shell pm clear {{package}}##Clear the data of an application on an emulator or device
adb shell pm reset-permissions##Revert all runtime permissions to their default
adb shell pm revoke {{package}} {{permission}}##Revoke a dangerous permission for an application
adb shell##Start a remote interactive shell on the emulator/device
adb shell##Start a remote shell in the target emulator/device instance
adb start-server##Check whether the adb server process is running and start it
add archive {{archive.tar.gz}} as {{alias}};##Add archive resource
add file {{filename}} as {{alias}};##Add file resource
add jar {{package.jar}};##Add .jar resource
add py {{script.py}};##Add .py resource
add user {{username}};##Add a user to the current project
add {{url|magnet|path/to/file}}##Add a torrent to the daemon
adscript --executable --output {{path/to/file}} {{path/to/input_file.adscript}}##Compile and link a file to a standalone executable
adscript --llvm-ir --output {{path/to/file.ll}} {{path/to/input_file.adscript}}##Compile a file to LLVM IR instead of native machine code
adscript --output {{path/to/file.o}} {{path/to/input_file.adscript}}##Compile a file to an object file
adscript --target-triple {{i386-linux-elf}} --output {{path/to/file.o}} {{path/to/input_file.adscript}}##Cross-compile a file to an object file for a foreign CPU architecture or operating system
ag '{{^ba(r|z)$}}'##Find files whose contents match a regular expression
ag -g {{foo}}##Find files with a name matching "foo"
ag -i -o {{FOO}}##Find files containing "FOO" case-insensitively, and print only the match, rather than the whole line
ag -l {{foo}}##Find files containing "foo", but only list the filenames
ag {{foo}} -G {{bar}}##Find "foo" in files with a name matching "bar"
ag {{foo}} {{path/to/directory}}##Find files containing "foo" in a specific directory
ag {{foo}}##Find files containing "foo", and print the line matches in context
agate --content {{path/to/content/}} --addr {{[::]:1965}} --addr {{0.0.0.0:1965}} --hostname {{example.com}} --lang {{en-US}}##Run and generate a private key and certificate
agate -h##Display help
agate {{path/to/file}}##Run server
age --decrypt --identity {{path/to/private_key_file}} --output {{path/to/decrypted_file}} {{path/to/encrypted_file}}##Decrypt a file with a private key file
age --decrypt --output {{path/to/decrypted_file}} {{path/to/encrypted_file}}##Decrypt a file with a passphrase
age --passphrase --output {{path/to/encrypted_file}} {{path/to/unencrypted_file}}##Generate an encrypted file that can be decrypted with a passphrase
age --recipient {{public_key_1}} --recipient {{public_key_2}} {{path/to/unencrypted_file}} --output {{path/to/encrypted_file}}##Encrypt a file with one or more public keys that are entered as literals
age --recipients-file {{path/to/recipients_file}} {{path/to/unencrypted_file}} --output {{path/to/encrypted_file}}##Encrypt a file with one or more public keys that are specified in a recipients file
age-keygen --output {{path/to/file}}##Generate a key pair, saving the private key to an unencrypted file and printing the public key to stdout
airpaste < {{path/to/file}}##Send a file
airpaste > {{path/to/file}}##Receive a file
airpaste {{channel_name}}##Create or join a channel
airpaste##Wait for a message and display it when received
ajson '{{$..json[?(@.path)]}}' {{path/to/file.json}}##Read JSON from a file and execute a specified JSONPath expression
ajson '{{avg($..price)}}' '{{https://example.com/api/}}'##Read JSON from a URL and evaluate a specified JSONPath expression
alacritty --config-file {{path/to/config.yml}}##Specify alternative configuration file (defaults to `$XDG_CONFIG_HOME/alacritty/alacritty.yml`)
alacritty --live-config-reload --config-file {{path/to/config.yml}}##Run with live config reload enabled (can also be enabled by default in `alacritty.yml`)
alacritty --working-directory {{path/to/directory}}##Run in a specific directory
alacritty -e {{command}}##Run a command in a new Alacritty window
alacritty##Open a new Alacritty window
alex *.md !{{example.md}}##Analyze all Markdown files except `example.md`
alex {{textfile.md}}##Analyze a specific file
alex##Analyze all files in the current directory
alias {{la}}="{{ls --all}}"##Create `la` as a shortcut for `ls --all`
alias {{rm}}="{{rm --interactive}}"##Turn `rm` into an interactive command
alias {{word}}##View the command associated to a given alias
alias {{word}}="{{command}}"##Create a generic alias
alias##List all aliases
alter table {{table_name}} add partition ({{partition_spec}});##Add partition to a table
alter table {{table_name}} drop partition ({{partition_spec}});##Delete partition from a table
amass -help {{subcommand}}##Show help on an Amass subcommand (like `intel`, `enum`, etc.)
amass -help##Show general help
amass -version##Check the Amass version
amass db -dir {{path/to/database_directory}} -d {{domain_name}} -enum {{index_from_list}} -names##List all found subdomains of a domain within an enumeration
amass db -dir {{path/to/database_directory}} -d {{domain_name}} -enum {{index_from_list}} -show##Show results for a specified enumeration index and domain name
amass db -dir {{path/to/database_directory}} -d {{domain_name}} -enum {{index_from_list}} -summary##Show a summary of the found subdomains within an enumeration
amass db -dir {{path/to/database_directory}} -list##List all performed enumerations in the database
amass enum -active -d {{domain_name}} -p {{80,443,8080}}##Find subdomains of a domain and actively verify them attempting to resolve the found subdomains
amass enum -brute -d {{domain_name}}##Do a brute force search for subdomains
amass enum -o {{output_file}} -d {{domain_name}}##Save the results to a text file
amass enum -o {{output_file}} -dir {{path/to/database_directory}}##Save the results to a database
amass enum -passive -d {{domain_name}}##Passively find subdomains of a domain
amass intel -active -addr {{192.168.0.1-254}}##Use active recon methods
amass intel -addr {{192.168.0.1-254}}##Find root domains in an IP address range
amass intel -asn {{asn}}##Find root domains belonging to a given Autonomous System Number
amass intel -o {{output_file}} -whois -d {{domain_name}}##Save results to a text file
amass intel -org {{organisation_name}}##Find ASNs belonging to an organisation
amass intel -whois -d {{domain_name}}##Find root domains related to a domain
amass track -dir {{path/to/database_directory}} -d {{domain_name}} -last 2##Show the difference between the last two enumerations of the specified domain
amass track -dir {{path/to/database_directory}} -d {{domain_name}} -since {{01/02 15:04:05 2006 MST}}##Show the difference between a certain point in time and the last enumeration
amass viz -d3 -dir {{path/to/database_directory}}##Generate a D3.js visualization based on database data
amass viz -dot -dir {{path/to/database_directory}}##Generate a DOT file based on database data
amass viz -gexf -dir {{path/to/database_directory}}##Generate a Gephi Graph Exchange XML Format (GEXF) file based on database data
amass viz -graphistry -dir {{path/to/database_directory}}##Generate a Graphistry JSON file based on database data
amass viz -maltego -dir {{path/to/database_directory}}##Generate a Maltego CSV file based on database data
amass {{subcommand}}##Execute an Amass subcommand
androguard apkid {{path/to/app.apk}}##Display app metadata (version and app ID)
androguard axml {{path/to/app.apk}}##Display Android app manifest
androguard decompile {{path/to/app.apk}} --output {{path/to/directory}}##Decompile Java code from an app
ansbile-inventory --list --inventory {{path/to/file_or_script_or_directory}}##Display a custom inventory
ansible localhost -m debug -a '{{var=groups.keys()}}'##List the groups in an inventory
ansible {{group}} --become --ask-become-pass -m command -a '{{my_command}}'##Execute a command with administrative privileges
ansible {{group}} --list-hosts##List hosts belonging to a group
ansible {{group}} -i {{inventory_file}} -m command -a '{{my_command}}'##Execute a command using a custom inventory file
ansible {{group}} -m command -a '{{my_command}}'##Execute a command on a group of hosts by invoking command module with arguments
ansible {{group}} -m ping##Ping a group of hosts by invoking the ping module
ansible {{group}} -m setup##Display facts about a group of hosts by invoking the setup module
ansible-doc --json {{plugin_name}}##Show information about an action plugin (module) as JSON
ansible-doc --list##List available action plugins (modules)
ansible-doc --snippet {{plugin_name}}##Show the playbook snippet for action plugin (modules)
ansible-doc --type {{plugin_type}} --list##List available plugins of a specific type
ansible-doc --type {{plugin_type}} {{plugin_name}}##Show information about a plugin with a specific type
ansible-doc {{plugin_name}}##Show information about a specific action plugin (module)
ansible-galaxy collection info {{username}}.{{collection_name}}##Get information about a collection
ansible-galaxy init {{role_name}}##Create a new role
ansible-galaxy install {{username}}.{{role_name}}##Install a role
ansible-galaxy list##List installed roles
ansible-galaxy remove {{username}}.{{role_name}}##Remove a role
ansible-galaxy role info {{username}}.{{role_name}}##Get information about a user role
ansible-galaxy search {{role_name}}##Search for a given role
ansible-inventory --list --output {{path/to/file}}##Dump the default inventory to a file
ansible-inventory --list --yaml##Display the default inventory in YAML
ansible-inventory --list##Display the default inventory
ansible-playbook {{playbook}} --start-at {{task_name}}##Run tasks in a playbook starting at a specific task
ansible-playbook {{playbook}} --tags {{tag1,tag2}}##Run tasks in playbook for the given tags
ansible-playbook {{playbook}} -e "@{{variables.json}}"##Run tasks in playbook with extra variables defined in a JSON file
ansible-playbook {{playbook}} -e "{{variable1}}={{value1}} {{variable2}}={{value2}}"##Run tasks in playbook with extra variables defined via the command-line
ansible-playbook {{playbook}} -i {{inventory_file}}##Run tasks in playbook with custom host inventory
ansible-playbook {{playbook}}##Run tasks in playbook
ansible-pull -U {{repository_url}} -C {{branch}} {{playbook}}##Pull a playbook from a VCS at a specific branch and execute a specific playbook
ansible-pull -U {{repository_url}} -i {{hosts_file}} {{playbook}}##Pull a playbook from a VCS, specify hosts file and execute a specific playbook
ansible-pull -U {{repository_url}} {{playbook}}##Pull a playbook from a VCS and execute a specific playbook
ansible-pull -U {{repository_url}}##Pull a playbook from a VCS and execute a default local.yml playbook
ansible-vault create --vault-password-file={{password_file}} {{vault_file}}##Create a new encrypted vault file using a vault key file to encrypt it
ansible-vault create {{vault_file}}##Create a new encrypted vault file with a prompt for a password
ansible-vault encrypt --vault-password-file={{password_file}} {{vault_file}}##Encrypt an existing file using an optional password file
ansible-vault encrypt_string##Encrypt a string using Ansible's encrypted string format, displaying interactive prompts
ansible-vault rekey --vault-password-file={{old_password_file}} --new-vault-password-file={{new_password_file}} {{vault_file}}##Re-key already encrypted vault file with a new password file
ansible-vault view --vault-password-file={{password_file}} {{vault_file}}##View an encrypted file, using a password file to decrypt
ansiweather -s {{true}} -d {{true}}##Display a forecast showing symbols and daylight data for your current location
ansiweather -u {{metric}} -f {{5}} -l {{Rzeszow,PL}}##Display a forecast using metric units for the next five days for Rzeszow, Poland
ansiweather -w {{true}} -h {{true}}##Display a forecast showing wind and humidity data for your current location
ant -d##Print debugging information
ant -f {{buildfile.xml}}##Build a project using build file other than `build.xml`
ant -k##Execute all targets that do not depend on fail target(s)
ant -p##Print information on possible targets for this project
ant##Build a project with default build file `build.xml`
antibody bundle < {{~/.zsh_plugins.txt}} > {{~/.zsh_plugins.sh}}##Bundle all plugins for static loading
antibody list##List all installed plugins
antibody update##Update all bundles
apg -M SNCL##Create a password with at least 1 symbol (S), 1 number (N), 1 uppercase (C), 1 lowercase (L)
apg -m {{16}}##Create a password with 16 characters
apg -r {{dictionary_file}}##Create a password that doesn't appear in a dictionary (the dictionary file has to be provided)
apg -x {{16}}##Create a password with maximum length of 16
apg##Create random passwords (default password length is 8)
apktool b {{path/to/directory}}##Build an APK file from a directory
apktool d {{file.apk}}##Decode an APK file
apktool if {{framework.apk}}##Install and store frameworks
apm install {{package_name}}##Install packages from http//atom.io/packages and themes from http//atom.io/themes
apm remove {{package_name}}##Remove packages/themes
apm upgrade {{package_name}}##Upgrade packages/themes
apropos -l {{regular_expression}}##Search without restricting the output to the terminal width
apropos {{regular_expression_1}} -a {{regular_expression_2}} -a {{regular_expression_3}}##Search for pages that contain all the expressions given
apropos {{regular_expression}}##Search for a keyword using a regular expression
ar -r {{path/to/file.a}} {{path/to/file1.o}} {{path/to/file2.o}}##Replace or add files to an archive
ar -rs {{path/to/file.a}} {{path/to/file1.o}} {{path/to/file2.o}}##Create an archive with files and an accompanying object file index
ar -s {{path/to/file.a}}##Insert an object file index (equivalent to using `ranlib`)
ar -t {{path/to/file.a}}##List the members of an archive
ar -x {{path/to/file.a}}##Extract all members from an archive
arc amend##Update Git commit messages after review
arc diff##Send the changes to Differential for review
arc land##Push Git changes
arc list##Show pending revision information
arch##Display the system's architecture
arduino --board {{arduino:avr:nano:cpu=atmega328p}} --port {{/dev/ttyACM0}} --upload {{path/to/file.ino}}##Build and upload a sketch to an Arduino Nano with an Atmega328p CPU, connected on port `/dev/ttyACM0`
arduino --pref build.path={{path/to/build_directory}} --verify {{path/to/file.ino}}##Build a sketch, put the build results in the build directory, and reuse any previous build results in that directory
arduino --pref {{name}}={{value}}##Set the preference `name` to a given `value`
arduino --save-prefs##Save any (changed) preferences to `preferences.txt`
arduino --upload {{path/to/file.ino}}##Build and upload a sketch
arduino --verify {{path/to/file.ino}}##Build a sketch
arduino-builder -build-options-file {{path/to/build.options.json}}##Use a build option file, instead of specifying `--hardware`, `--tools`, etc. manually every time
arduino-builder -build-path {{path/to/build_directory}}##Specify a custom build directory
arduino-builder -compile {{path/to/sketch.ino}}##Compile a sketch
arduino-builder -debug-level {{level}}##Specify the debug level (1 to 10, defaults to 5)
arduino-builder -verbose {{true}}##Enable verbose mode
aria2c --force-sequential {{url_1}} {{url_2}}##Download multiple files in parallel
aria2c --ftp-user={{username}} --ftp-passwd={{password}} {{url}}##FTP download with username and password
aria2c --input-file={{filename}} --max-concurrent-downloads={{number_of_downloads}}##Download the URIs listed in a file with limited parallel downloads
aria2c --max-download-limit={{speed}} {{url}}##Limit download speed in bytes/s
aria2c --out={{filename}} {{url}}##Download the file pointed to by the specified URI with the specified output name
aria2c --split={{number_of_connections}} {{url}}##Download with multiple connections
aria2c {{url_1}} {{url_2}}##Download from multiple sources with each URI pointing to the same file
aria2c {{url}}##Download a URI to a file
arp -a##Show the current ARP table
arp -d {{address}}##Delete a specific entry
arp -s {{address}} {{mac_address}}##Create an entry in the ARP table
arp-scan --localnet##Scan the current local network
arp-scan {{10.0.0.0}}:{{255.255.255.0}}##Scan an IP network with a custom net mask
arp-scan {{127.0.0.0}}-{{127.0.0.31}}##Scan an IP network within a custom range
arp-scan {{192.168.1.1}}/{{24}}##Scan an IP network with a custom bitmask
arping -D -w {{3}} {{ip_to_check}}##Detect duplicated IP addresses in the network by sending ARP requests with a 3 second timeout
arping -I {{interface}} {{host_ip}}##Ping a host on a specific interface
arping -U {{ip_to_broadcast}}##Broadcast ARP request packets to update neighbours' ARP caches
arping -c {{count}} {{host_ip}}##Ping a host a specific number of times
arping -f {{host_ip}}##Ping a host and stop at the first reply
arping {{host_ip}}##Ping a host by ARP request packets
asar extract {{archived.asar}}##Extract an archive
asar extract-file {{archived.asar}} {{file}}##Extract a specific file from an archive
asar list {{archived.asar}}##List the contents of an archive file
asar pack {{path/to/file_or_directory}} {{archived.asar}}##Archive a file or directory
asciidoctor --backend={{pdf}} --require={{asciidoctor-pdf}} {{path/to/file.adoc}}##Convert a specific `.adoc` file to a PDF using the `asciidoctor-pdf` library
asciidoctor --embedded {{path/to/file.adoc}}##Convert a specific `.adoc` file to embeddable HTML, removing everything except the body
asciidoctor -a stylesheet={{path/to/stylesheet.css}} {{path/to/file.adoc}}##Convert a specific `.adoc` file to HTML and link a CSS stylesheet
asciidoctor {{path/to/file.adoc}}##Convert a specific `.adoc` file to HTML (the default output format)
asciinema auth##Associate the local install of `asciinema` with an asciinema.org account
asciinema cat {{path/to/file}}.cast##Print the full output of a locally saved recording
asciinema play https://asciinema.org/a/{{cast_id}}##Replay a terminal recording hosted on asciinema.org
asciinema play {{path/to/file}}.cast##Replay a terminal recording from a local file
asciinema rec -i {{2.5}}##Make a new recording, limiting any idle time to at most 2.5 seconds
asciinema rec {{path/to/file}}.cast##Make a new recording and save it to a local file
asciinema rec##Make a new recording (once finished, user will be prompted to upload it or save it locally)
asciinema upload {{path/to/file}}.cast##Upload a locally saved terminal session to asciinema.org
asdf global {{name}} {{version}}##Set global version for a package
asdf install {{name}} {{version}}##Install a specific version of a package
asdf list-all {{name}}##List all available versions for a package
asdf local {{name}} {{version}}##Set local version for a package
asdf plugin-add {{name}}##Install a plugin
asdf plugin-list-all##List all available plugins
assimp export {{input_file.stl}} {{output_file.obj}} {{parameters}}##Convert a file using custom parameters (the dox_cmd.h file in assimp's source code lists available parameters)
assimp export {{input_file.stl}} {{output_file.obj}}##Convert a file to one of the supported output formats, using the default parameters
assimp help##List all supported subcommands ("verbs")
assimp info {{path/to/file}}##Display a summary of a 3D file's contents
assimp listexport##List all supported export formats
assimp listext##List all supported import formats
assimp {{subcommand}} --help##Get help on a specific subcommand (e.g. the parameters specific to it)
astronomer {{tldr-pages/tldr-node-client}} --stars {{50}}##Scan the maximum amount of stars in the repository
astronomer {{tldr-pages/tldr-node-client}} --verbose##Scan a repository including comparative reports
astronomer {{tldr-pages/tldr-node-client}}##Scan a repository
astyle --indent=spaces={{number_of_spaces}} {{path/to/file}}##Apply a custom indent using spaces. Choose between 2 and 20 spaces
astyle --indent=tab={{number_of_tabs}} {{path/to/file}}##Apply a custom indent using tabs. Choose between 2 and 20 tabs
astyle --style=allman {{path/to/file}}##Apply the allman style with broken braces
astyle --style=java {{path/to/file}}##Apply the Java style with attached braces
astyle {{source_file}}##Apply the default style of 4 spaces per indent and no formatting changes
at -f {{path/to/file}} 9:30 PM Tue##Execute commands from a given file next Tuesday
at now + 5 minutes##Execute commands from standard input in 5 minutes (press `Ctrl + D` when done)
atom --add {{path/to/file_or_directory}}##Open a file or directory in an existing window
atom --foreground##Prevent Atom from forking into the background, keeping Atom attached to the terminal
atom --safe##Open Atom in safe mode (does not load any additional packages)
atom --wait##Wait for Atom window to close before returning (useful for Git commit editor)
atom -n {{path/to/file_or_directory}}##Open a file or directory in a new window
atom {{path/to/file_or_directory}}##Open a file or directory
atoum --bootstrap-file {{path/to/file}}##Load a custom bootstrap file before running tests
atoum --init##Initialise a configuration file
atoum -c {{path/to/file}}##Run tests using the specified configuration file
atoum -d {{path/to/directory}}##Run a specific directory of tests
atoum -f {{path/to/file}}##Run a specific test file
atoum -ns {{namespace}}##Run all tests under a specific namespace
atoum -t {{tag}}##Run all tests with a specific tag
atoum##Run all tests
atq -q {{a}}##Show jobs from queue named 'a' (queues have single-character names)
atq##Show the current user's scheduled jobs
atrm {{10}}##Remove job number 10
atrm {{15}} {{17}} {{22}}##Remove many jobs, separated by spaces
auditd -d##Start the daemon in debug mode
auditd -l##Start the daemon on-demand from launchd
auditd##Start the daemon
autoflake --remove-all-unused-imports {{file1.py}} {{file2.py}} {{file3.py}}##Remove unused imports from multiple files and display the diffs
autoflake --remove-unused-variables --in-place --recursive {{path/to/directory}}##Remove unused variables recursively from all files in a directory, overwriting each file
autoflake --remove-unused-variables --in-place {{file.py}}##Remove unused variables from a file, overwriting the file
autoflake --remove-unused-variables {{file.py}}##Remove unused variables from a single file and display the diff
autopep8 --diff {{path/to/file}}##Format a file, displaying a diff of the changes
autopep8 --in-place --recursive {{path/to/directory}}##Recursively format all files in a directory in-place and save changes
autopep8 --in-place {{path/to/file.py}}##Format a file in-place and save the changes
autopep8 {{path/to/file.py}} --max-line-length {{length}}##Format a file to stdout, with a custom maximum line length
autossh -M {{monitor_port}} "{{ssh_command}}"##Start an SSH session, restarting when a monitoring port fails to return data
autossh -M {{monitor_port}} -L {{local_port}}:localhost:{{remote_port}} {{user}}@{{host}}##Forward a local port to a remote one, restarting when necessary
autossh -f -M 0 -N -o "ServerAliveInterval 10" -o "ServerAliveCountMax 3" "{{ssh_command}}"##Run in the background, with no monitoring port, and instead send SSH keep-alive packets every 10 seconds to detect failure
autossh -f -M 0 -N -o "ServerAliveInterval 10" -o "ServerAliveCountMax 3" -o ExitOnForwardFailure=yes -L {{local_port}}:localhost:{{remote_port}} {{user}}@{{host}}##Run in the background, with no monitoring port and no remote shell, exiting if the port forward fails
autossh -f -M {{monitor_port}} -N "{{ssh_command}}"##Fork `autossh` into the background before executing `ssh` and don't open a remote shell
avo checkout {{branch_name}}##Switch to an existing Avo branch
avo conflict##Resolve Git conflicts in Avo files
avo edit##Open the current Avo workspace in the default web browser
avo init##Initialize a workspace in the current directory
avo login##Log into the Avo platform
avo pull##Pull analytics wrappers for the current path
avo status##Display the status of the Avo implementation
avo {{subcommand}} --help##Display help for a subcommand
avrdude -c \?##List available AVR programmers
avrdude -p \?##List available AVR devices
avrdude -p {{AVR_device}} -c {{programmer}} -U flash:r:{{file.hex}}:i##Read AVR microcontroller
avrdude -p {{AVR_device}} -c {{programmer}} -U flash:w:{{file.hex}}##Write AVR microcontroller
awk '($10 == value)'##Print all lines where the 10th column value equals the specified value
awk '($10 >= min_value && $10 <= max_value)'##Print all the lines which the 10th column value is between a min and a max
awk '/{{foo}}/ {print $2}' {{filename}}##Print the second column of the lines containing "foo" in a space-separated file
awk 'NR%3==1' {{filename}}##Print every third line starting from the first line
awk '{if ($1 == "foo") print "Exact match foo"; else if ($1 ~ "bar") print "Partial match bar"; else print "Baz"}' {{filename}}##Print different values based on conditions
awk '{print $5}' {{filename}}##Print the fifth column (a.k.a. field) in a space-separated file
awk '{s+=$1} END {print s}' {{filename}}##Sum the values in the first column of a file and print the total
awk -F ',' '{print $NF}' {{filename}}##Print the last column of each line in a file, using a comma (instead of space) as a field separator
aws configure sso##Configure the AWS Command-line using SSO
aws configure wizard##Configure the AWS Command-line
aws cur --region {{aws_region}} delete-report-definition --report-name {{report}}##Delete a usage report definition
aws cur describe-report-definitions##List usage report definitions defined for the logged in account
aws cur put-report-definition --report-definition file://{{path/to/report_definition.json}}##Create an AWS cost and usage report definition from a JSON file
aws dynamodb list-tables --region {{us-east-1}} --output yaml##List AWS resources in a region and output in YAML
aws dynamodb update-table --generate-cli-skeleton##Generate a JSON CLI Skeleton (useful for infrastructure as code)
aws dynamodb wizard {{new_table}}##Get an interactive wizard for an AWS resource
aws ec2 create-snapshot --volume-id {{volume_id}}##Create a snapshot from an EC2 volume
aws ec2 delete-volume --volume-id {{volume_id}}##Delete an EC2 volume
aws ec2 describe-images##List available AMIs (Amazon Machine Images)
aws ec2 describe-instances --instance-ids {{instance_id}}##Display information about a specific instance
aws ec2 describe-instances##Display information about all instances
aws ec2 describe-volumes##Display information about all EC2 volumes
aws ec2 help##Show list of all available EC2 commands
aws ec2 {{subcommand}} help##Show help for specific EC2 subcommand
aws ecr batch-delete-image  --repository-name {{repository}} --image-ids imageTag={{latest}}##Delete an image from a repository
aws ecr create-repository --repository-name {{repository}} --image-scanning-configuration scanOnPush={{true|false}} --region {{region}}##Create a repository
aws ecr delete-repository --repository-name {{repository}} --force##Delete a repository
aws ecr get-login-password --region {{region}} | {{docker login}} --username AWS --password-stdin {{aws_account_id}}.dkr.ecr.{{region}}.amazonaws.com##Authenticate Docker with the default registry (username is AWS)
aws ecr list-images --repository-name {{repository}}##List images within a repository
aws glue create-dev-endpoint --endpoint-name {{name}} --role-arn {{role_arn_used_by_endpoint}}##Create a dev endpoint
aws glue list-jobs##List jobs
aws glue list-triggers##List triggers
aws glue start-job-run --job-name {{job_name}}##Start a job
aws glue start-trigger --name {{trigger_name}}##Start a trigger
aws glue start-workflow-run --name {{workflow_name}}##Start running a workflow
aws help topics##List all available topics
aws help {{topic_name}}##Display help about a specific topic
aws help##Display help
aws iam create-user --cli-auto-prompt##Use auto prompt to help with a command
aws iam get-group --group-name {{group_name}}##Get users in a group
aws iam get-policy --policy-arn arn:aws:iam::aws:policy/{{policy_name}}##Describe an IAM policy
aws iam help##Show `aws iam` help page (including all available iam commands)
aws iam list-access-keys --user-name {{user_name}}##List access keys for a specific user
aws iam list-access-keys##List access keys
aws iam list-groups##List groups
aws iam list-policies##List policies
aws iam list-users##List users
aws kinesis get-records --shard-iterator {{iterator}}##Read records from a shard, using a shard iterator
aws kinesis get-shard-iterator --shard-iterator-type TRIM_HORIZON --stream-name {{name}} --shard-id {{id}}##Get a shard iterator for reading from the oldest message in a stream's shard
aws kinesis list-shards --stream-name {{name}}##List the shards available on a stream
aws kinesis list-streams##Show all streams in the account
aws kinesis put-record --stream-name {{name}} --partition-key {{key}} --data "$( echo "{{my raw message}}" | base64 )"##Write a record to a Kinesis stream with inline base64 encoding
aws kinesis put-record --stream-name {{name}} --partition-key {{key}} --data {{base64_encoded_message}}##Write one record to a Kinesis stream
aws lambda get-function-concurrency --function-name {{name}}##Display the reserved concurrency configuration for a function
aws lambda get-function-configuration --function-name {{name}}##Display the configuration of a function
aws lambda get-policy --function-name {{name}}##List which AWS services can invoke the function
aws lambda invoke --function-name {{name}} --payload {{json}} {{path/to/response}}.json##Run a function with an input payload in JSON format
aws lambda invoke --function-name {{name}} {{path/to/response}}.json##Run a function
aws lambda list-aliases --function-name {{name}}##List function aliases
aws lambda list-functions##List functions
aws quicksight describe-data-set --aws-account-id {{aws_account_id}} --data-set-id {{data_set_id}}##Display detailed information about a dataset
aws quicksight describe-data-set-permissions --aws-account-id {{aws_account_id}} --data-set-id {{data_set_id}}##Display who has access to the dataset and what kind of actions they can perform on the dataset
aws quicksight list-dashboards --aws-account-id {{aws_account_id}}##List dashboards
aws quicksight list-data-sets --aws-account-id {{aws_account_id}}##List datasets
aws quicksight list-groups --aws-account-id {{aws_account_id}} --namespace default##List groups
aws quicksight list-users --aws-account-id {{aws_account_id}} --namespace default##List users
aws rds apply-pending-maintenance-action --resource-identifier {{database_arn}} --apply-action {{system-update}} --opt-in-type {{immediate}}##Apply updates to an RDS instance
aws rds delete-db-instance --db-instance-identifier {{instance_identifier}} --final-db-snapshot-identifier {{snapshot_identifier}} --delete-automated-backups##Delete an instance
aws rds modify-db-instance --db-instance-identifier {{instance_identifier}} {{parameters}} --apply-immediately##Modify an RDS instance
aws rds modify-db-instance --db-instance-identifier {{old_instance_identifier}} --new-db-instance-identifier {{new_instance_identifier}}##Change an instance identifier
aws rds reboot-db-instance --db-instance-identifier {{instance_identifier}}##Reboot an instance
aws rds start-db-instance --db-instance-identifier {{instance_identifier}}##Start instance
aws rds stop-db-instance --db-instance-identifier {{instance_identifier}}##Stop instance
aws rds {{subcommand}} help##Show help for specific RDS subcommand
aws s3 ls {{bucket_name}}##Show files in a bucket
aws s3 rm s3://{{bucket}}/{{path/to/file}}##Remove file from bucket
aws s3 sync s3://{{bucket_name}} {{path/to/target}}##Sync files and directories from bucket to local
aws s3 sync {{path/to/files}} s3://{{bucket_name}} --exclude {{path/to/file}} --exclude {{path/to/directory}}/*##Sync files and directories with exclusions
aws s3 sync {{path/to/files}} s3://{{bucket_name}}##Sync files and directories from local to bucket
aws s3 {{any_command}} --dryrun##Preview changes only
aws s3api create-bucket --bucket {{bucket_name}}##Create a bucket
aws s3api delete-bucket --bucket {{bucket_name}}##Delete a bucket
aws s3api get-bucket-policy --bucket {{bucket_name}} --query Policy --output {{json|table|text|yaml|yaml-stream}} > {{path/to/bucket_policy}}##Download the Amazon S3 bucket policy from a specified bucket
aws s3api get-object --bucket {{bucket_name}} --key {{object_key}} {{path/to/output_file}}##Download object from a bucket (The output file is always the last argument)
aws s3api list-buckets##List buckets
aws s3api list-objects --bucket {{bucket_name}} --query '{{Contents[].{Key: Key, Size: Size}}}'##List the objects inside of a bucket and only show each object's key and size
aws s3api put-bucket-policy --bucket {{bucket_name}} --policy file://{{path/to/bucket_policy.json}}##Apply an Amazon S3 bucket policy to a specified bucket
aws s3api put-object --bucket {{bucket_name}} --key {{object_key}} --body {{path/to/file}}##Add an object to a bucket
aws secretsmanager create-secret --name {{name}} --description "{{secret_description}}" --secret-string {{secret}}##Create a secret
aws secretsmanager delete-secret --secret-id {{name_or_arn}}##Delete a secret
aws secretsmanager describe-secret --secret-id {{name_or_arn}}##View details of a secret except for secret text
aws secretsmanager get-secret-value --secret-id {{name_or_arn}} --version-stage {{version_of_secret}}##Retrieve the value of a secret (to get the latest version of the secret omit `--version-stage`)
aws secretsmanager list-secrets##Show secrets stored by the secrets manager in the current account
aws secretsmanager rotate-secret --secret-id {{name_or_arn}} --rotation-lambda-arn {{arn_of_lambda_function}} --rotation-rules AutomaticallyAfterDays={{30}}##Rotate the secret automatically every 30 days using a Lambda function
aws secretsmanager rotate-secret --secret-id {{name_or_arn}} --rotation-lambda-arn {{arn_of_lambda_function}}##Rotate the secret immediately using a Lambda function
aws ses create-receipt-rule-set --rule-set-name {{rule_set_name}} --generate-cli-skeleton##Create a new receipt rule set
aws ses delete-receipt-rule --rule-set-name {{rule_set_name}} --rule-name {{rule_name}} --generate-cli-skeleton##Delete a specific receipt rule
aws ses delete-receipt-rule-set --rule-set-name {{rule_set_name}} --generate-cli-skeleton##Delete a specific receipt rule set (the currently active rule set cannot be deleted)
aws ses describe-active-receipt-rule-set --generate-cli-skeletion##Describe the active receipt rule set
aws ses describe-receipt-rule --rule-set-name {{rule_set_name}} --rule-name {{rule_name}} --generate-cli-skeleton##Describe a specific receipt rule
aws ses list-receipt-rule-sets --starting-token {{token_string}} --max-items {{integer}} --generate-cli-skeleton##List all receipt rule sets
aws ses send-email --from {{from_address}} --destination "ToAddresses={{addresses}}" --message "Subject={Data={{subject_text}},Charset=utf8},Body={Text={Data={{body_text}},Charset=utf8},Html={Data={{message_body_containing_html}},Charset=utf8}}"##Send an email
aws ses {{subcommand}} help##Show help for a specific SES subcommand
aws sts get-caller-identity##Get the caller identity (used to troubleshoot permissions)
aws {{command}} help##See help text for the AWS command
aws-google-auth -h##Show help information
aws-google-auth -u {{example@example.com}} -I {{$GOOGLE_IDP_ID}} -S {{$GOOGLE_SP_ID}} -d {{3600}} -a --resolve-aliases##Resolve aliases for AWS accounts
aws-google-auth -u {{example@example.com}} -I {{$GOOGLE_IDP_ID}} -S {{$GOOGLE_SP_ID}} -d {{3600}} -a##Log in [a]sking which role to use (in case of several available SAML roles)
aws-google-auth -u {{example@example.com}} -I {{$GOOGLE_IDP_ID}} -S {{$GOOGLE_SP_ID}} -d {{3600}}##Log in with Google SSO using the IDP and SP identifiers and set the credentials duration to one hour
aws-vault add {{profile}}##Add credentials to the secure keystore
aws-vault exec {{profile}} -- {{aws s3 ls}}##Execute a command with AWS credentials in the environment
aws-vault list##List profiles, along with their credentials and sessions
aws-vault login {{profile}}##Open a browser window and login to the AWS Console
aws-vault remove {{profile}}##Remove credentials from the secure keystore
aws-vault rotate {{profile}}##Rotate AWS credentials
awslogs get {{/aws/lambda/my_lambda_group}} --filter-pattern='{{ERROR}}'##Get logs that match a specific CloudWatch Logs Filter pattern
awslogs get {{/var/log/syslog}} --start='{{2h ago}}' --end='{{1h ago}}'##Get logs for any streams in the specified group between 1 and 2 hours ago
awslogs get {{/var/log/syslog}} ALL --watch##Watch logs for any streams in the specified group
awslogs groups##List log groups
awslogs streams {{/var/log/syslog}}##List existing streams for the specified group
axel -S {{mirrors_num}} {{url}}##Search for mirrors
axel -n {{connections_num}} {{url}}##Download with multiple connections
axel -s {{speed}} {{url}}##Limit download speed (bytes per second)
axel {{url}} -o {{filename}}##Download and specify filename
axel {{url}}##Download a URL to a file
az account get-access-token --resource-type {{ms-graph}}##Print an access token to be used with `MS Graph API`
az account list##Print a list of subscriptions for the logged in account
az account list-locations##List supported regions for the currently active subscription
az account set --subscription {{subscription_id}}##Set a `subscription` to be the currently active subscription
az account show --output {{json|tsv|table|yaml}}##Print details of the currently active subscription in a specific format
az account##Manage azure subscription information
az aks##Manage Azure Kubernetes Services
az appconfig create --name {{name}} --resource-group {{group_name}} --location {{location}}##Create an App Configuration
az appconfig delete --resource-group {{rg_name}} --name {{appconfig_name}}##Delete a specific App Configuration
az appconfig list --resource-group {{rg_name}}##List all App Configurations under a specific resource group
az appconfig list##List all App Configurations under the current subscription
az appconfig show --name {{appconfig_name}}##Show properties of an App Configuration
az appconfig update --resource-group {{rg_name}} --name {{appconfig_name}}##Update a specific App Configuration
az bicep build --file {{path/to/file.bicep}}##Build a Bicep file
az bicep decompile --file {{path/to/template_file.json}}##Attempt to decompile an ARM template file to a Bicep file
az bicep install##Install Bicep CLI
az bicep list-versions##List all available versions of Bicep CLI
az bicep uninstall##Uninstall Bicep CLI
az bicep upgrade##Upgrade Bicep CLI to the latest version
az bicep version##Display the installed version of Bicep CLI
az config get {{section_name}}##Print configurations for a specific section
az config get##Print all configurations
az config set {{configuration_name}}={{value}}##Set a configuration
az config unset {{configuration_name}}##Unset a configuration
az disk list##List all Azure Managed Disks
az feedback##Send feedback to the Azure CLI Team
az lock create --name {{lock_name}} --lock-type ReadOnly##Create a read-only subscription level lock
az lock create --name {{lock_name}} --resource-group {{group_name}} --lock-type ReadOnly##Create a read-only resource group level lock
az lock delete --name {{lock_name}} --resource-group {{group_name}}##Delete a resource group level lock
az lock delete --name {{lock_name}}##Delete a subscription level lock
az lock list##List out all locks on the subscription level
az lock show -n {{lock_name}}##Show a subscription level lock
az login --identity --username /subscriptions/{{subscription_id}}/resourcegroups/{{my_rg}}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{{my_id}}##Log in using a VM's user assigned identity
az login --identity##Log in using a VM's system assigned identity
az login --service-principal --username {{http://azure-cli-service-principal}} --passsword {{secret}} --tenant {{someone.onmicrosoft.com}}##Log in with a service principal using a client secret
az login --service-principal --username {{http://azure-cli-service-principal}} --password {{path/to/cert.pem}} --tenant {{someone.onmicrosoft.com}}##Log in with a service principal using a client certificate
az login##Log in interactively
az login##Log in to Azure
az logout --username {{alias@somedomain.com}}##Log out a specific username
az logout##Log out from the active account
az network list-usages##List network resources in a region that are used against a subscription quota
az network nic update --accelerated-networking true --name {{nic}} --resource-group {{resource_group}}##Enable accelerated networking for a network interface card
az network vnet create --address-prefixes {{10.0.0.0/16}} --name {{vnet}} --resource_group {{group_name}} --submet-name {{subnet}} --subnet-prefixes {{10.0.0.0/24}}##Create a virtual network
az network vnet list##List all virtual networks in a subscription
az network##Manage Azure Network resources
az pipelines agent list --org {{organization_url}} --pool-id {{agent_pool}}##Get a list of agents in a pool
az pipelines create --org {{organization_url}} --project {{project_name}} --name {{pipeline_name}} --description {{description}} --repository {{repository_name}} --branch {{branch_name}}##Create a new Azure Pipeline (YAML based)
az pipelines delete --org {{organization_url}} --project {{project_name}} --id {{pipeline_id}}##Delete a specific pipeline
az pipelines list --org {{organization_url}} --project {{project_name}}##List pipelines
az pipelines run --org {{organization_url}} --project {{project_name}} --name {{pipeline_name}}##Enqueue a specific pipeline to run
az pipelines show --org {{organization_url}} --project {{project_name}} --name {{pipeline_name}}##Get the details of a specific pipeline
az pipelines update --org {{organization_url}} --project {{project_name}} --name {{pipeline_name}} --new-name {{pipeline_new_name}} --new-folder-path {{user1/production_pipelines}}##Update a specific pipeline
az storage account create -g {{group_name}} -n {{account_name}} -l {{location}} --sku {{account_sku}}##Create a storage account
az storage account delete -g {{group_name}} -n {{account_name}}##Delete a storage account
az storage account keys list -g {{group_name}} -n {{account_name}}##List the access keys for a storage account
az storage account list -g {{group_name}}##List all storage accounts in a resource group
az storage account update --min-tls-version TLS1_2 -g {{group_name}} -n {{account_name}}##Update the minimum tls version setting for a storage account
az storage blob delete --account-name {{storage_account_name}} --account-key {{storage_account_key}} -c {{container_name}} -n {{path/to/blob}}##Delete a blob object
az storage blob download --account-name {{storage_account_name}} --account-key {{storage_account_key}} -c {{container_name}} -n {{path/to/blob}} -f {{path/to/local_file}}##Download a blob to a file path
az storage blob download-batch --account-name {{storage_account_name}} --account-key {{storage_account_key}} -s {{container_name}} -d {{path/to/remote}} --pattern {{filename_regex}} --destination {{path/to/destination}}##Download blobs from a blob container recursively
az storage blob generate-sas --account-name {{storage_account_name}} --account-key {{storage_account_key}} -c {{container_name}} -n {{path/to/blob}} --permissions {{permission_set}} --expiry {{Y-m-d'T'H:M'Z'}} --https-only##Generate a shared access signature for a blob
az storage blob upload --account-name {{storage_account_name}} --account-key {{storage_account_key}} -c {{container_name}} -n {{path/to/blob}} -f {{path/to/local_file}}##Upload a local file to blob storage
az storage entity delete --partition-key {{partition_key}} --row-key {{row_key}} --table-name {{table_name}} --account-name {{storage_account_name}} --account-key {{storage_account_key}}##Delete an existing entity from a table
az storage entity insert --entity {{space_separated_key_value_pairs}} --table-name {{table_name}} --account-name {{storage_account_name}} --account-key {{storage_account_key}}##Insert an entity into a table
az storage entity merge --entity {{space_separated_key_value_pairs}} --table-name {{table_name}} --account-name {{storage_account_name}} --account-key {{storage_account_key}}##Update an existing entity by merging its properties
az storage entity query --filter {{query_filter}} --table-name {{table_name}} --account-name {{storage_account_name}} --account-key {{storage_account_key}}##List entities which satisfy a query
az storage entity show --partition-key {{partition_key}} --row-key {{row_key}} --table-name {{table_name}} --account-name {{storage_account_name}} --account-key {{storage_account_key}}##Get an entity from the specified table
az tag add-value --name {{tag_name}} --value {{tag_value}}##Create a tag value
az tag create --name {{tag_name}}##Create a tag in the subscription
az tag delete --name {{tag_name}}##Delete a tag from the subscription
az tag list --resource-id /subscriptions/{{subscription_id}}##List all tags on a subscription
az tag remove-value --name {{tag_name}} --value {{tag_value}}##Delete a tag value for a specific tag name
az term accept --product "{{product_identifier}}" --plan "{{plan_identifier}}" --publisher "{{publisher_identifier}}"##Accept marketplace terms
az term show --product "{{product_identifier}}" --plan "{{plan_identifier}}" --publisher "{{publisher_identifier}}"##Print marketplace terms
az vm create --resource-group {{rg}} --name {{vm_name}} --image {{Canonical:UbuntuServer:18.04-LTS:latest}} --admin-user {{azureuser}} --generate-ssh-keys##Create an `UbuntuServer 18.04 LTS` Virtual Machine and generate ssh keys
az vm deallocate --resource-group {{rg}} --name {{vm_name}}##Deallocate a Virtual Machine
az vm image list##List VM images available in the Azure Marketplace
az vm list##List all Azure virtual machines
az vm list##List details of available Virtual Machines
az vm restart --resource-group {{rg}} --name {{vm_name}}##Restart a Virtual Machine
az vm start --resource-group {{rg}} --name {{vm_name}}##Start a Virtual Machine
az vm stop --resource-group {{rg}} --name {{vm_name}}##Stop a Virtual Machine
b2sum --check --quiet {{path/to/file.b2}}##Only show a message for missing files or when verification fails
b2sum --check {{path/to/file.b2}}##Read a file of BLAKE2 sums and filenames and verify all files have matching checksums
b2sum --ignore-missing --check --quiet {{path/to/file.b2}}##Only show a message for files for which verification fails, ignoring missing files
b2sum {{path/to/file1}} {{path/to/file2}}##Calculate BLAKE2 checksums for multiple files
b2sum {{path/to/file}}##Calculate the BLAKE2 checksum for a file
babel --help##Output all available options
babel {{path/to/file}}##Transpile a specified input file and output to stdout
babel {{path/to/input_directory}} --ignore {{ignored_files}}##Ignore specified comma-separated files in a directory
babel {{path/to/input_directory}}##Transpile a whole directory of files
babel {{path/to/input_file}} --minified##Transpile and output as minified JavaScript
babel {{path/to/input_file}} --out-file {{path/to/output_file}}##Transpile a specified input file and output to a specific file
babel {{path/to/input_file}} --presets {{presets}}##Choose a set of presets for output formatting
babel {{path/to/input_file}} --watch##Transpile the input file every time it is changed
balena app create {{app_name}}##Create a balenaCloud or openBalena application
balena apps##List all balenaCloud or openBalena applications within the account
balena devices##List all devices associated with the balenaCloud or openBalena account
balena local flash {{path/to/balenaos.img}} --drive {{drive_location}}##Flash a balenaOS image to a local drive
balena login##Log in to the balenaCloud account
bandwhich --addresses##Show the remote addresses table only
bandwhich --interface {{eth0}}##Show the network utilization for a specific network interface
bandwhich --show-dns --dns-server {{dns_server_ip}}##Show DNS queries with a given DNS server
bandwhich --show-dns##Show DNS queries
bandwhich --total-utilization##Show total (cumulative) usage
banner "{{Hello World}}"##Print the text message as a large banner (quotes are optional)
banner -w {{50}} "{{Hello World}}"##Print the text message as a banner with a width of 50 characters
banner##Read text from stdin
base32 --decode {{filename}}##Decode a file
base32 {{filename}}##Encode a file
base64 --decode {{filename}}##Decode the base64 contents of a file and write the result to stdout
base64 {{filename}}##Encode the contents of a file as base64 and write the result to stdout
basename {{path/to/directory/}}##Show only the rightmost directory name from a path
basename {{path/to/file}} {{suffix}}##Show only the file name from a path, with a suffix removed
basename {{path/to/file}}##Show only the file name from a path
bash --version##Print the Bash version (`$BASH_VERSION` contains the version without license information)
bash -c "{{command}}"##Execute a command and then exit
bash -e {{path/to/script.sh}}##Execute commands from a script, stopping at the first error
bash -s##Read and execute commands from stdin
bash -x {{path/to/script.sh}}##Execute a script, printing each command before executing it
bash {{path/to/script.sh}}##Execute a script
bash##Start an interactive shell session
bastet##Start a Tetris game
bat --language json {{file.json}}##Syntax highlight a JSON file
bat --list-languages##Display all supported languages
bat -n {{file}}##Number all output lines
bat {{file1}} {{file2}} > {{target_file}}##Concatenate several files into the target file
bat {{file1}} {{file2}} >> {{target_file}}##Append several files into the target file
bat {{file}}##Print the contents of a file to the standard output
batch -f {{path/to/file}}##Execute commands from a given file
batch##Execute commands from standard input (press `Ctrl + D` when done)
bc --mathlib##Start an interactive session with the standard math library enabled
bc {{path/to/script.bc}}##Execute a script
bc##Start an interactive session
bcomps -?##Display help for `bcomps`
bcomps -v -s {{path/to/input1.gv}} {{path/to/input2.gv ...}}##Print the number of blocks and cutvertices in one or more graphs
bcomps -x -o {{path/to/output.gv}} {{path/to/input1.gv}} {{path/to/input2.gv ...}}##Write each block and block-cutvertex tree to multiple numbered filenames based on `output.gv`
bcomps {{path/to/input1.gv}} {{path/to/input2.gv ...}} > {{path/to/output.gv}}##Decompose one or more graphs into their biconnected components
beanstalkd -b {{path/to/persistence_directory}} -f {{500}}##Sync to the persistence directory every 500 milliseconds
beanstalkd -b {{path/to/persistence_directory}}##Persist work queues by saving them to disk
beanstalkd -l {{ip_address}} -p {{port_number}}##Start beanstalkd listening on a custom port and address
beanstalkd##Start beanstalkd, listening on port 11300
bedtools bamtobed -i {{path/to/file}}.bam > {{path/to/file}}.bed##Convert bam-formatted file to a bed-formatted one
bedtools closest -a {{path/to/file_1}}.bed -b {{path/to/file_2}}.bed -d##Find for all features in {{file_1}}.bed the closest one in {{file_2}}.bed and write their distance in an extra column (input files must be sorted)
bedtools groupby -i {{path/to/file}} -c 1-3,5 -g 6 -o sum##Group file {{`path/to/file`}} based on the first three and the fifth column and summarize the sixth column by summing it up
bedtools intersect -a {{path/to/file_1}} -b {{path/to/file_2}} -lof > {{path/to/output_file}}##Intersect two files with a left outer join, i.e. report each feature from {{file_1}} and NULL if no overlap with {{file_2}}
bedtools intersect -a {{path/to/file_1}} -b {{path/to/file_2}} -s > {{path/to/output_file}}##Intersect two files regarding the sequences' strand and save the result to the specified file
bedtools intersect -a {{path/to/file_1}} -b {{path/to/file_2}} -sorted > {{path/to/output_file}}##Using more efficient algorithm to intersect two pre-sorted files
behat --definitions##Display a list of definitions in your test suites
behat --format {{pretty|progress}}##Run tests with a specific output formatter
behat --init##Initialise a new Behat project
behat --out {{path/to/file}}##Run tests and output results to a file
behat --suite={{suite_name}}##Run all tests from the specified suite
behat##Run all tests
berks contingent {{cookbook}}##View the dependencies of a cookbook
berks install##Install cookbook dependencies into a local repo
berks update {{cookbook}}##Update a specific cookbook and its dependencies
berks upload {{cookbook}}##Upload a cookbook to the Chef server
betty download {{https://example.com/file.png}} to {{file.png}}##Download a file
betty go crazy##Drive Betty to madness
betty play {{Spotify}}##Play Spotify
betty unarchive {{archive.tar.gz}} to {{directory}}##Extract an archive into a directory
betty version##Ask Betty version
betty {{unzip}} {{archive.tar.gz}}##Extract an archive into the current directory
betty {{what time is it}}##Ask Betty something
betty {{zip}} {{path/to/file_or_directory}}##Compress a file or directory to one of the support archive formats
bfg --delete-files {{file_with_sensitive_data}}##Remove a file with sensitive data but leave the latest commit untouched
bfg --replace-text {{path/to/file.txt}}##Remove all text mentioned in the specified file wherever it can be found in the repository's history
bg %{{job_id}}##Resume a specific job (use `jobs -l` to get its ID) and run it in the background
bg##Resume the most recently suspended job and run it in the background
binary##Switch to binary transfer mode (graphics, compressed files, etc)
bison --debug {{path/to/file.y}}##Compile in debug mode, which causes the resulting parser to write additional information to the standard output
bison --output {{path/to/output.c}} {{path/to/file.y}}##Specify the output filename
bison --verbose##Be verbose when compiling
bison {{path/to/file.y}}##Compile a bison definition file
bitcoin-cli dumpwallet "{{path/to/file}}"##Export the wallet information to a text file
bitcoin-cli generate {{num_blocks}}##Generate one or more blocks
bitcoin-cli getwalletinfo##Print high-level information about the wallet
bitcoin-cli listunspent##List all outputs from previous transactions available to fund outgoing transactions
bitcoin-cli sendtoaddress "{{address}}" {{amount}}##Send a transaction to a given address
black --check {{path/to/file_or_directory}}##Perform a dry run (print what would be done without actually doing it)
black --diff {{path/to/file_or_directory}}##Output the changes that would be applied for each file
black --quiet {{path/to/file_or_directory}}##Auto-format a file or directory emitting exclusively error messages to stderr
black --skip-string-normalization {{path/to/file_or_directory}}##Auto-format a file or directory without replacing single quotes with double quotes (adoption helper, avoid using this for new projects)
black -c "{{code}}"##Format the code passed in as a string
black {{path/to/file_or_directory}}##Auto-format a file or entire directory
blackfire --json run {{php path/to/file.php}}##Run the profiler and output results as JSON
blackfire --samples={{10}} run {{php path/to/file.php}}##Run the profiler and collect 10 samples
blackfire agent --socket="{{tcp://127.0.0.1:8307}}"##Launch the Blackfire agent on a specific socket
blackfire agent##Launch the Blackfire agent
blackfire config##Initialise and configure the Blackfire client
blackfire run {{php path/to/file.php}}##Run the profiler on a specific program
blackfire status##View the status of profiles on the Blackfire web service
blackfire upload {{path/to/file}}##Upload a profiler file to the Blackfire web service
blender --background --python-console##Start an interactive Blender session in the terminal with a python console (do `import bpy` after starting)
blender --background {{filename}}.blend --python-expr '{{import bpy; bpy.data.scenes[0].render.resolution_percentage = 25}}' --render-anim##Render an animation at a specific resolution, by passing a Python expression
blender --background {{filename}}.blend --render-anim##Render all frames of an animation in the background, without loading the UI (output is saved to `/tmp`)
blender --background {{filename}}.blend --render-output //{{output_directory}} --render-frame {{JPEG}} --render-frame {{-2}}##Render the second last frame in an animation as a JPEG image, saved to an existing directory (relative path)
blender --background {{filename}}.blend --render-output //{{render/frame_###.png}} --render-anim##Render an animation using a specific image naming pattern, in a path relative (`//`) to the .blend file
blender --background {{filename}}.blend --render-output {{/path/to/output_directory}} --render-frame {{10}}##Render the 10th frame of an animation as a single image, saved to an existing directory (absolute path)
blender --background {{filename}}.blend --scene {{scene_name}} --frame-start {{10}} -e {{500}} --render-anim##Render the animation of a specific scene, starting at frame 10 and ending at frame 500
blockout2##Start a new game
bmaptool copy --bmap {{blockmap.bmap}} {{source.img.gz}} {{/dev/sdb}}##Copy a compressed image file into sdb
bmaptool copy --bmap {{blockmap.bmap}} {{source.img}} {{/dev/sdb}}##Copy an image file into sdb
bmaptool copy --nobmap {{source.img}} {{/dev/sdb}}##Copy an image file into sdb without using a blockmap
bmaptool create -o {{blockmap.bmap}} {{source.img}}##Create a blockmap from image file
boot --dependencies boot/new new --template {{template_name}} --name {{project_name}}##Generate scaffolding for a new project based on a template
boot cljs --help##Learn about a command
boot dev##Build for development (if using the boot/new template)
boot jar##Build a single `uberjar`
boot prod##Build for production (if using the boot/new template)
boot repl##Start a REPL session either with the project or standalone
borg create --help##Display help on creating archives
borg create --progress {{path/to/repo_directory}}::{{Monday}} {{path/to/source_directory}}##Backup a directory into the repository, creating an archive called "Monday"
borg extract {{user}}@{{host}}:{{path/to/repo_directory}}::{{Monday}} {{path/to/target_directory}} --exclude '{{*.ext}}'##Extract a specific directory from the "Monday" archive in a remote repository, excluding all `*.ext` files
borg init {{path/to/repo_directory}}##Initialise a (local) repository
borg list {{path/to/repo_directory}}##List all archives in a repository
borg mount {{path/to/repo_directory}}::{{Monday}} {{path/to/mountpoint}}##Mount a repository as a FUSE filesystem
borg prune --keep-within {{7d}} --list {{path/to/repo_directory}}##Prune a repository by deleting all archives older than 7 days, listing changes
bosh -e {{environment}} cloud-config##Show current cloud config
bosh -e {{environment}} deployments##List deployments
bosh -e {{environment}} ssh {{virtual_machine}} -d {{deployment}}##Ssh into virtual machine
bosh -e {{environment}} upload-stemcell {{stemcell_file|url}}##Upload stemcell
bosh -e {{environment}} vms -d {{deployment}}##List environment virtual machines
bosh alias-env {{environment_name}} -e {{ip_address|url}} --ca-cert {{ca_certificate}}##Create local alias for director
bosh environments##List environments
bosh login -e {{environment}} ##Log in to the director
bower help {{command}}##Display help information about a bower command
bower init##Create a `bower.json` file for your package
bower install {{local_name}}={{package}}#{{version}} --save##Install a specific dependency version, and add it to `bower.json`
bower install {{package}} {{package}}##Install one or more packages to the bower_components directory
bower install##Install a project's dependencies, listed in its bower.json
bower list##List local packages and possible updates
bower uninstall {{package}} {{package}}##Uninstall packages locally from the bower_components directory
box compile -c {{path/to/config}}##Compile a new Phar file using a specific config file
box compile##Compile a new Phar file
box help##Display all available commands and options
box info {{path/to/phar_file}}##Display information about a specific Phar file
box info##Display information about the PHAR PHP extension
box validate##Validate the first found config file in the working directory
box verify {{path/to/phar_file}}##Verify the signature of a specific Phar file
bq cp {{dataset}}.{{OLD_TABLE}} {{dataset}}.{{new_table}}##Copy one table to another
bq help##Print help
bq load --location={{location}} --source_format={{CSV|JSON|PARQUET|AVRO}} {{dataset}}.{{table}} {{path_to_source}}##Batch load data from a specific file in formats such as CSV, JSON, Parquet, and Avro to a table
bq ls --filter labels.{{key}}:{{value}} --max_results {{integer}} --format=prettyjson --project_id {{project_id}}##List all datasets in a project
bq mk --location=US {{dataset_name}}.{{table_name}}##Create a new dataset or table in the US location
bq query --nouse_legacy_sql 'SELECT COUNT(*) FROM {{DATASET_NAME}}.{{TABLE_NAME}}'##Run query against a BigQuery table using standard SQL, add `--dry_run` flag to estimate the number of bytes read by the query
bq query --use_legacy_sql=false --parameter='ts_value:TIMESTAMP:2016-12-07 08:00:00' 'SELECT TIMESTAMP_ADD(@ts_value, INTERVAL 1 HOUR)'##Run a parameterized query
brew bundle --file={{path/to/file}}##Install packages from a specific Brewfile at a specific path
brew bundle check##Check if there is anything to install or upgrade in the Brewfile
brew bundle cleanup --force##Uninstall all formulae not listed in the Brewfile
brew bundle dump##Create a Brewfile from all installed packages
brew bundle list --all##Output a list of all entries in the Brewfile
brew bundle##Install packages from a Brewfile at the current path
brew cask info {{cask_name}}##Display information about a given cask
brew cask install {{cask_name}}##Install a cask
brew cask uninstall {{cask_name}}##Uninstall a cask
brew cask zap {{cask_name}}##Uninstall a cask and remove related settings and files
brew doctor##Check the local Homebrew installation for potential problems
brew info {{formula}}##Display information about a formula or a cask (version, installation path, dependencies, etc.)
brew install {{formula}}##Install the latest stable version of a formula or cask (use `--devel` for development versions)
brew list --cask##List all installed casks
brew list##List all installed formulae and casks
brew outdated --cask##List installed casks that have newer versions available
brew outdated##Show formulae and casks that have a more recent version available
brew search {{text}}##Search for available formulae (i.e. packages) and casks (i.e. native packages)
brew search {{text}}##Search for formulas and casks
brew update##Fetch the newest version of Homebrew and of all formulae and casks from the Homebrew source repository
brew upgrade --cask {{cask_name}}##Upgrade an installed cask (if no cask name is given, all installed casks are upgraded)
brew upgrade {{formula}}##Upgrade an installed formula or cask (if none is given, all installed formulae/casks are upgraded)
brotli -d {{compressed_file.ext.br}} -o {{file.ext}}##Decompress a Brotli file specifying the output filename
brotli -d {{file.ext}}.br##Decompress a file, creating an uncompressed version next to the file
brotli -q {{11}} {{file.ext}} -o {{compressed_file.ext.br}}##Specify the compression level. 1=Fastest (Worst), 11=Slowest (Best)
brotli {{file.ext}} -o {{compressed_file.ext.br}}##Compress a file specifying the output filename
brotli {{file.ext}}##Compress a file, creating a compressed version next to the file
browser-sync init##Create configuration file
browser-sync start --config {{config_file}}##Start browser-sync from config file
browser-sync start --server --files '{{path/to/directory/*.css}}'##Start a server from local directory, watching all CSS files in a directory
browser-sync start --server {{path/to/directory}} --files {{path/to/directory}}##Start a server from a specific directory
bshell --domain={{domain}}##Browse for both SSH and VNC servers in a specified domain
bshell --ssh##Browse for SSH servers only
bshell --vnc##Browse for VNC servers only
bshell##Browse for both SSH and VNC servers
bssh --domain={{domain}}##Browse for SSH servers in a specified domain
bssh --shell##Browse for both SSH and VNC servers
bssh --vnc##Browse for VNC servers
bssh##Browse for SSH servers
btm --basic##Enable basic mode, removing charts and condensing data (similar to `top`)
btm --battery##Show also battery charge and health status
btm --dot_marker##Use big dots instead of small ones in charts
btm --rate 250 --default_time_value 30000##Refresh every 250 milliseconds and show the last 30 seconds in the charts
btm##Show the default layout (CPU, memory, temperatures, disk, network, and processes)
buku --add {{https://example.com}} {{search engine}}, {{privacy}}##Add bookmark with tags "search engine" and "privacy"
buku --delete {{bookmark_id}}##Delete a bookmark
buku --update {{bookmark_id}} --tag {{-}} {{search engine}}##Remove "search engine" tag from a bookmark
buku --write {{bookmark_id}}##Open editor to edit a bookmark
buku {{keyword}} --stag {{privacy}}##Display all bookmarks matching "keyword" and with "privacy" tag
bundle exec middleman build##Build the project in the current directory to prepare for deployment
bundle exec {{command}} {{arguments}}##Execute a command in the context of the current bundle
bundle gem {{gem_name}}##Create a new gem skeleton
bundle install##Install all gems defined in the `Gemfile` expected in the working directory
bundle outdated##List installed gems in the `Gemfile` with newer versions available
bundle update --group {{development}}##Update all gems within the given group in the `Gemfile`
bundle update --patch {{gem_name}} {{gem_name}}##Update one or more specific gems(s) defined in the `Gemfile` but only to the next patch version
bundle update {{gem_name}} {{gem_name}}##Update one or more specific gem(s) defined in the `Gemfile`
bundle update##Update all gems by the rules defined in the `Gemfile` and regenerate `Gemfile.lock`
bundletool build-apks --bundle={{path/to/bundle.aab}} --ks={{path/to/key.keystore}} --ks-key-alias={{key_alias}} --output={{path/to/file.apks}}##Generate APKs from an application bundle (prompts for keystore password)
bundletool build-apks --bundle={{path/to/bundle.aab}} --ks={{path/to/key.keystore}} --ks-key-alias={{key_alias}} –ks-pass={{pass:the_password}} --output={{path/to/file.apks}}##Generate APKs from an application bundle giving the keystore password
bundletool build-apks --bundle={{path/to/bundle.aab}} --mode={{universal}} --ks={{path/to/key.keystore}} --ks-key-alias={{key_alias}} --output={{path/to/file.apks}}##Generate APKs including only one single APK for universal usage
bundletool dump config --bundle={{path/to/bundle.aab}}##Display the contents of the bundle configuration file
bundletool dump manifest --bundle={{path/to/bundle.aab}} --module={{name}}##Display the `AndroidManifest.xml` of a specific module
bundletool dump manifest --bundle={{path/to/bundle.aab}} --xpath={{/manifest/@android:versionCode}}##Display a specific value from the `AndroidManifest.xml` using XPath
bundletool dump manifest --bundle={{path/to/bundle.aab}}##Display the `AndroidManifest.xml` of the base module
bundletool dump resources --bundle={{path/to/bundle.aab}} --resource={{0x7f0e013a}} --values##Display the configuration and values for a specific resource using the ID
bundletool dump resources --bundle={{path/to/bundle.aab}} --resource={{type/name}}##Display the configuration for a specific resource
bundletool dump resources --bundle={{path/to/bundle.aab}}##Display all the resources in the application bundle
bundletool get-device-spec --output={{path/to/file.json}}##Generate a device specification JSON file for an emulator or device
bundletool get-size total --apks={{path/to/file.apks}}##Estimate the download size of an application
bundletool help {{subcommand}}##Display help for a subcommand
bundletool install-apks --apks={{path/to/file.apks}}##Install the right combination of APKs to an emulator or device
bundletool validate --bundle={{path/to/bundle.aab}}##Verify a bundle and display detailed information about it
bundletool validate --bundle={{path/to/bundle.aab}}##Verify a bundle and display detailed information about it
bup -d {{path/to/repository}} index {{path/to/directory}}##Prepare a given directory before taking a backup
bup -d {{path/to/repository}} init##Initialize a backup repository in the specified local directory
bup -d {{path/to/repository}} ls##Show the backup snapshots currently stored in the repository
bup -d {{path/to/repository}} restore -C {{path/to/target_directory}} {{backup_name}}##Restore a specific backup snapshot to a target directory
bup -d {{path/to/repository}} save -n {{backup_name}} {{path/to/directory}}##Backup a directory to the repository
buzzphrase {{'{i} {v} {a} {N}'}}##Output a phrase formatted as [i]mperative verb + past tense [v]erb + [a]djective + plural [N]oun
buzzphrase {{4 '{V} {a} {n} {f}'}}##Output 4 phrases formatted as present participle [V]erb + [a]djective + singular [n]oun + [f]inal
buzzphrase##Generate a string of three random phrases containing an adjective, a past tense verb and a plural noun
bvnc --domain={{domain}}##Browse for VNC servers in a specified domain
bvnc --shell##Browse for both VNC and SSH servers
bvnc --ssh##Browse for SSH servers
bvnc##Browse for VNC servers
bw get item {{github}}##Display a particular item from Bitwarden vault
bw list items --search {{github}}##Search and display items from Bitwarden vault
bw login##Log in to a Bitwarden user account
bw logout##Log out of a Bitwarden user account
bzgrep "{{search_pattern}}" {{path/to/file}}##Search for a pattern within a compressed file
bzgrep --extended-regexp --ignore-case "{{search_pattern}}" {{path/to/file}}##Use extended regular expressions (supports `?`, `+`, `{}`, `()` and `|`), in case-insensitive mode
bzgrep --only-matching "{{search_pattern}}" {{path/to/file}}##Search for lines matching a pattern, printing only the matched text
bzgrep --recursive "{{search_pattern}}" {{path/to/tar/file}}##Recursively search files in a bzip2 compressed tar archive for a pattern
bzgrep --with-filename --line-number "{{search_pattern}}" {{path/to/file}}##Print file name and line number for each match
bzgrep --{{context|before-context|after-context}}={{3}} "{{search_pattern}}" {{path/to/file}}##Print 3 lines of context around, before, or after each match
bzip2 -d {{path/to/compressed_file.bz2}}##Decompress a file
bzip2 -dc {{path/to/compressed_file.bz2}}##Decompress a file to standard output
bzip2 {{path/to/file_to_compress}}##Compress a file
c##Sort by CPU usage
c99 -c {{file.c}}##Compile source file(s) and create object file(s)
c99 -o {{executable_name}} {{file.c}}##Compile source file(s) and create an executable with a custom name
c99 {{file.c}} {{file.o}}##Compile source file(s), link with object file(s), and create an executable
c99 {{file.c}}##Compile source file(s) and create an executable
cabal build##Build the project in the current directory
cabal info {{package_name}}##Show information about a package
cabal init##Create a new Haskell project in the current directory
cabal install {{package_name}}##Download and install a package
cabal list {{search_string}}##Search and list packages from Hackage
cabal test##Run tests of the project in the current directory
caddy file-server --listen :{{8000}} --browse##Run a simple file server on the specified port with a browsable interface
caddy reverse-proxy --from :{{80}} --to localhost:{{8000}}##Run a reverse proxy server
caddy run --config {{path/to/Caddyfile}}##Start Caddy with the specified Caddyfile
caddy run##Start Caddy in the foreground
caddy start##Start Caddy in the background
caddy stop##Stop a background Caddy process
cake cache clear_all##Clear configuration caches
cake console##Start a REPL (interactive shell)
cake routes##Display a list of available routes
cake schema_cache build --connection {{connection}}##Build the metadata cache
cake schema_cache clear {{table_name}}##Clear a single cache table
cake schema_cache clear##Clear the metadata cache
cake server##Start a development web server (defaults to port 8765)
cake##Display basic information about the current app and available commands
calendar -A {{30}}##Look [A]head, showing events for the next 30 days
calendar -B {{7}}##Look [B]ack, showing events for the previous 7 days
calendar -f {{path/to/file}}##Show events from a custom calendar [f]ile
calendar##Show events for today and tomorrow (or the weekend on Friday) from the default calendar
calibre-server --port {{port}}##Start server on different port. Access at http//localhostport
calibre-server --username {{username}} --password {{password}}##Password protect the server
calibre-server##Start a server to distribute e-books. Access at http//localhost8080
calibredb add -r {{path/to/directory}}##Recursively add all e-books under a directory to the library
calibredb add {{file1 file2 …}}##Add one or more e-books to the library
calibredb list --search {{search_term}}##Search for e-books displaying additional information
calibredb list##List e-books in the library with additional information
calibredb remove {{id1 id2 …}}##Remove one or more e-books from the library. You need the e-book IDs (see above)
calibredb search {{search_term}}##Search for just ids of e-books
carbon-now --from-clipboard##Create an image from a text in clipboard using default settings
carbon-now --open {{file}}##Open image in a browser instead of saving
carbon-now -e {{line}} {{file}}##End at a specific line of text
carbon-now -i {{file}}##Create images interactively for custom settings and optionally save a preset
carbon-now -p {{preset}} {{file}}##Create images from previously saved preset
carbon-now -s {{line}} {{file}}##Start at a specified line of text
carbon-now {{file}}##Create an image from a file using default settings
cargo --bin {{name}}##Build only the specified binary
cargo build --bin {{name}}##Build only the specified binary
cargo build --jobs {{number_of_threads}}##Build using a specific number of threads (default is the number of CPU cores)
cargo build --locked##Require that `Cargo.lock` is up to date
cargo build --package {{package}}##Build a specific package
cargo build --release##Build artifacts in release mode, with optimizations
cargo build --test {{testname}}##Build only the specified test target
cargo build --workspace##Build all packages in the workspace
cargo build##Build the Rust project in the current directory
cargo build##Build the package or packages defined by the `Cargo.toml` manifest file in the local path
cargo clippy -- --allow warnings##Run checks and ignore warnings
cargo clippy -- --deny warnings##Treat warnings as errors
cargo clippy --fix##Apply Clippy suggestions automatically
cargo clippy --locked##Require that `Cargo.lock` is up to date
cargo clippy --package {{package}}##Run checks for a package
cargo clippy --workspace##Run checks on all packages in the workspace
cargo clippy##Run checks over the code in the current directory
cargo doc --offline##Build documentation without accessing the network
cargo doc --open --offline --package {{package}}##View a particular package's documentation offline
cargo doc --open --package {{package}}##View a particular package's documentation
cargo doc --open##Build and view the default package documentation in the browser
cargo init --{{bin|lib}}##Create a new binary or library Rust project in the current directory
cargo install --list##List installed crates
cargo install {{crate_name}}##Install a crate
cargo new {{path/to/directory}} --{{bin|lib}}##Create a new binary or library Rust project in the specified directory
cargo rustc -- -C opt-level {{1|2|3}}##Compile with speed optimization
cargo rustc -- -C opt-level {{s|z}}##Compile with [s]ize optimization (`z` also turns off loop vectorization)
cargo rustc --lib -- -D unsafe-code##Check if your package uses unsafe code
cargo rustc --package {{package}}##Build a specific package
cargo rustc --release -- -C target-cpu=native##Compile with architecture-specific optimizations for the current CPU
cargo rustc --release##Build artifacts in release mode, with optimizations
cargo rustc##Build the package or packages defined by the `Cargo.toml` manifest file in the current working directory
cargo search {{search_string}}##Search for crates
cargo test -- --nocapture##Run tests without hiding output from test executions
cargo test -- --test-threads={{count}}##Set the number of simultaneous running test cases
cargo test --locked##Require that `Cargo.lock` is up to date
cargo test --package {{package}}##Run tests for a package
cargo test --release##Test artifacts in release mode, with optimizations
cargo test --workspace##Test all packages in the workspace
cargo test {{testname}}##Only run tests containing a specific string in their names
carp --generate-only {{path/to/file.carp}}##Transpile a file to C code
carp --prompt "{{> }}"##Start a REPL with a custom prompt
carp -b --optimize {{path/to/file.carp}}##Build a file with optimizations enabled
carp -b {{path/to/file.carp}}##Build a `carp` file
carp -x {{path/to/file.carp}}##Build and run a file
carp##Start a REPL (interactive shell)
case {{$tocount}} in {{[wW]|words}}) {{wc -w README}}; ;; {{[lL]|lines}}) {{wc -l README}}; ;; *) {{echo "what?"}}; ;; esac##Combine patterns with |, use * as a fallback pattern
case {{$tocount}} in {{words}}) {{wc -w README}}; ;; {{lines}}) {{wc -l README}}; ;; esac##Match a variable against string literals to decide which command to run
cat -n {{file}}##Number all output lines
cat -v -t -e {{file}}##Display non-printable and whitespace characters (with `M-` prefix if non-ASCII)
cat {{/path/to/bz/compressed/file}} | bzgrep --invert-match "{{search_pattern}}"##Search stdin for lines that do not match a pattern
cat {{big_file.txt}} | parallel --pipe --block 1M {{command}}##Break stdin into ~1M blocks, feed each block to stdin of new command
cat {{data.json}} | in2csv -f json > {{data.csv}}##Pipe a JSON file to in2csv
cat {{data.txt}} | http PUT {{example.org}}##Specify raw request body via stdin
cat {{file.json}} | jello '[i.{{key_name}} for i in _]'##Output the value of a given key of each element in JSON or JSON-Lines data from stdin to stdout
cat {{file.json}} | jello '{"{{my_new_key}}": _.{{key_name}}, "{{my_other_key}}": _.{{other_key_name}}}'##Output the value of multiple keys as a new JSON object (assuming the input JSON has the keys `key_name` and `other_key_name`)
cat {{file.json}} | jello -l##Output all elements from arrays (or all the values from objects) in JSON or JSON-Lines data from stdin to stdout
cat {{file.json}} | jello -r '"{{some text}}: " + _.{{key_name}}'##Output the value of a given key to a string (and disable JSON output)
cat {{file.json}} | jello -s##Output a schema of JSON or JSON Lines data from stdin to stdout (useful for grep)
cat {{file.json}} | jello _[0]##Output the first element in JSON or JSON-Lines data from stdin to stdout
cat {{file.json}} | jello##Pretty-print JSON or JSON-Lines data from stdin to stdout
cat {{file.json}} | jtbl --cols={{width}}##Print a table and specify the column width for wrapping
cat {{file.json}} | jtbl -n##Print a table and don't wrap or truncate rows
cat {{file.json}} | jtbl -t##Print a table and truncate rows instead of wrapping
cat {{file.json}} | jtbl##Print a table from JSON or JSON Lines input
cat {{file1}} {{file2}} > {{target_file}}##Concatenate several files into the target file
cat {{file1}} {{file2}} >> {{target_file}}##Append several files into the target file
cat {{file1}} | comm -12 - {{file2}}##Print only lines common to both files, reading one file from stdin
cat {{file}} | nl {{options}} -##Read from standard output
cat {{file}}##Print the contents of a file to the standard output
cat {{index.html}} | pup '{{div#id}}'##Filter HTML by id
cat {{index.html}} | pup '{{div}} json{}'##Print HTML as JSON
cat {{index.html}} | pup '{{div}} text{}'##Print all text from the filtered HTML elements and their children
cat {{index.html}} | pup '{{input[type="text"]}}'##Filter HTML by attribute value
cat {{index.html}} | pup '{{tag}}'##Filter HTML by element tag name
cat {{index.html}} | pup --color##Transform a raw HTML file into a cleaned, indented, and colored format
cat {{input.gml}} | gml2gv > {{output.gv}}##Convert a graph using stdin and stdout
cat {{input.gml}} | graphml2gv > {{output.gv}}##Convert a graph using stdin and stdout
cat {{input.gv}} | gv2gml > {{output.gml}}##Convert a graph using stdin and stdout
cat {{input.gv}} | gv2gxl > {{output.gxl}}##Convert a graph using stdin and stdout
cat {{input.gxl}} | gxl2gv > {{output.gv}}##Convert a graph using stdin and stdout
cat {{input.mm}} | mm2gv > {{output.gv}}##Convert a graph using stdin and stdout
cat {{input_file}} | httprobe --prefer-https##Only check for HTTP if HTTPS is not working
cat {{input_file}} | httprobe -p {{https:2222}}##Probe additional ports with a given protocol
cat {{input_file}} | httprobe##Probe a list of domains from a text file
cat {{path/to/file.bc}} | llvm-bcanalyzer##Read a Bitcode file from `stdin` and analyze it
cat {{path/to/file.json}} | ajson '{{$..json[?(@.path)]}}'##Read JSON from stdin and execute a specified JSONPath expression
cat {{path/to/file}} | egrep {{search_pattern}}##Search stdin for a pattern
cat {{path/to/file}} | git stripspace --strip-comments##Trim whitespace and Git comments from a file
cat {{path/to/file}} | git stripspace##Trim whitespace from a file
cat {{path/to/file}} | grep --invert-match "{{search_pattern}}"##Search stdin for lines that do not match a pattern
cat {{path/to/file}} | kate --stdin##Launch Kate, creating a new temporary file with contents read from stdin
cat {{path/to/file}} | nms -a -f {{blue|white|yellow|black|magenta|green|red}}##Decrypt the content of a file, with a custom output color
cat {{path/to/file}} | perl -n -l -e 'print $1 if /{{before}}({{regular_expression}}){{after}}/'##Run a regular [e]xpression on stdin, printing only the first capture group for each matching [l]ine
cat {{path/to/file}} | perl -n -l -e 'print if /{{regular_expression}}/'##Run a regular [e]xpression on stdin, printing matching [l]ines
cat {{path/to/file}} | sponge -a {{path/to/file}}##Append file content to the source file
cat {{path/to/file}} | textql -sql "{{SELECT * FROM stdin}}"##Read data from stdin
cat {{path/to/file}} | ts -r##Convert existing timestamps in a text file (eg. a log file) into [r]elative format
cat {{path/to/image.png}} | pngcheck -cvt##Receive an image from stdin and display detailed information
cat {{path/to/input.pyx}} | xml depyx > {{path/to/output.xml}}##Convert a PYX document from stdin to XML format
cat {{path/to/input.xml}} | xml pyx > {{path/to/output.pyx}}##Convert an XML document from stdin to PYX format
cat {{path/to/input.xml}} | zek -p -o {{path/to/output.go}}##Generate an example Go program from a given XML from stdin and send output to a file
cat {{path/to/input.xml}} | zek##Generate a Go struct from a given XML from stdin and display output on stdout
cat {{path/to/input_file}} | perl -nle 'if (/.*({{foo}}).*/) {print "$1"; last;}'##Run a regular expression on stdin, printing out the first capture group for each line
cat {{path/to/source.ll}} | llvm-as -o {{path/to/out.bc}}##Read an IR file from `stdin` and assemble it
cat {{path\to\input.xml}} | xml format --dropdtd > {{path/to/output.xml}}##Format an XML document from stdin, removing the `DOCTYPE` declaration
cbonsai -h##Display cbonsai help
cbonsai -i##Generate a bonsai in infinite mode
cbonsai -l##Generate a bonsai in live mode
cbonsai -m "{{message}}"##Append a message to the bonsai
cbonsai -v##Display extra information about the bonsai
cc {{path/to/lex.yy.c}} --output {{executable}}##Compile a C file generated by Lex
cc {{path/to/lex.yy.c}} --output {{executable}}##Compile a C file generated by flex
ccomps -?##Display help for `ccomps`
ccomps -v -s {{path/to/input1.gv}} {{path/to/input2.gv ...}}##Print the number of nodes, edges, and connected components in one or more graphs
ccomps -x -o {{path/to/output.gv}} {{path/to/input1.gv}} {{path/to/input2.gv ...}}##Write each connected component to numbered filenames based on `output.gv`
ccomps {{path/to/input1.gv}} {{path/to/input2.gv ...}} > {{path/to/output.gv}}##Decompose one or more graphs into their connected components
cd -##Go to the previously chosen directory
cd ..##Go up to the parent of the current directory
cd {{path/to/directory}}##Go to the specified directory
cd {{path/to/subdir}} && dvc init --sudir##Initialize DVC in a subdirectory
cd ~{{username}}##Go to the home directory of the specified user
cd##Go to the home directory of the current user
cdk deploy {{stack_name}}##Deploy a space-separated list of stacks
cdk destroy {{stack_name}}##Destroy a space-separated list of stacks
cdk diff {{stack_name}}##Compare the specified stack with the deployed stack or a local CloudFormation template
cdk doc##Open the CDK API reference in your browser
cdk init -l {{language_name}}##Create a new CDK project in the current directory for a specified language
cdk ls##List the stacks in the app
cdk synth {{stack_name}}##Synthesize and print the CloudFormation template for the specified stack(s)
cf bind-service {{app_name}} {{service_name}}##Connect an application to a service
cf create-service {{service}} {{plan}} {{service_name}}##Create a service instance
cf logs {{app_name}} --recent##View a dump of recent app logs
cf marketplace##View the services available from your organization
cf push {{app_name}}##Push an app using the default settings
cf run-task {{app_name}} "{{script_command}}" --name {{task_name}}##Run a script whose code is included in the app, but runs independently
cf ssh {{app_name}}##Start an interactive SSH session with a VM hosting an app
chars "{{^C}}"##Look up a control character
chars '{{ß}}'##Look up a character by its value
chars {{10}}##Look up possible characters given an ambiguous code point
chars {{U+1F63C}}##Look up a character by its Unicode code point
cheat -e {{command}}##Edit the cheat sheet for a command
cheat -l##List the available cheat sheets
cheat -s {{command}}##Search available the cheat sheets for a specified command name
cheat -v##Get the current cheat version
cheat {{command}}##Show example usage of a command
chezmoi -v apply##Apply the changes
chezmoi add {{path/to/file}}##Tell chezmoi to manage a dotfile
chezmoi diff##See changes chezmoi would make
chezmoi edit {{path/to/file}}##Edit the source state of a tracked dotfile
chezmoi init {{https://example.com/path/to/repository.git}}##Set chezmoi up on another machine by downloading existing dotfiles from a Git repository
chezmoi init##Initialize chezmoi on your machine
chezmoi update##Fetch the latest changes from a remote repository
chgrp --reference={{path/to/reference_file}} {{path/to/file_or_directory}}##Change the owner group of a file/directory to match a reference file
chgrp -R {{group}} {{path/to/directory}}##Recursively change the owner group of a directory and its contents
chgrp -h {{group}} {{path/to/symlink}}##Change the owner group of a symbolic link
chgrp {{group}} {{path/to/file_or_directory}}##Change the owner group of a file/directory
chisel client --auth {{username}}:{{password}} {{server_ip}}:{{server_port}} {{local_port}}:{{remote_server}}:{{remote_port}}##Connect to a Chisel server using username and password authentication
chisel client {{server_ip}}:{{server_port}} {{local_host}}:{{local_port}}:{{remote_server}}:{{remote_port}}##Connect to a Chisel server and tunnel a specific host and port to a remote server and port
chisel client {{server_ip}}:{{server_port}} {{local_port}}:{{remote_server}}:{{remote_port}}##Connect to a Chisel server and tunnel a specific port to a remote server and port
chisel server --auth {{username}}:{{password}}##Run a chisel server that accepts authenticated connections using username and password
chisel server -p {{server_port}}##Run a Chisel server listening to a specific port
chisel server##Run a Chisel server
chmod -R a+rX {{directory}}##Recursively give [a]ll users [r]ead permissions to files and e[X]ecute permissions to sub-directories within a directory
chmod -R g+w,o+w {{directory}}##Change permissions recursively giving [g]roup and [o]thers the ability to [w]rite
chmod a+rx {{file}}##Give [a]ll users rights to [r]ead and e[x]ecute
chmod g-x {{file}}##Remove e[x]ecutable rights from the [g]roup
chmod o= {{file}}##Remove all rights from [o]thers
chmod o=g {{file}}##Give [o]thers (not in the file owner's group) the same rights as the [g]roup
chmod u+rw {{file_or_directory}}##Give the [u]ser rights to [r]ead and [w]rite to a file/directory
chmod u+x {{file}}##Give the [u]ser who owns a file the right to e[x]ecute it
choose --exclusive :{{2}}##Print all items from the beginning of the line until the 3rd item (exclusive)
choose --exclusive {{1}}:{{4}}##Print everything from the 2nd to 5th item on the line, excluding the 5th
choose --field-separator '{{:}}' {{0}} {{2}} {{4}}##Print the first, 3rd, and 5th item from a line, where items are separated by '' instead of whitespace
choose :{{2}}##Print the beginning of the line to the 3rd item
choose {{-1}}##Print the last item from a line
choose {{1}}:{{4}}##Print everything from the 2nd to 5th item on the line, including the 5th
choose {{2}}:##Print all items from the 3rd to the end of the line
choose {{4}}##Print the 5th item from a line (starting from 0)
chown --reference={{path/to/reference_file}} {{path/to/file_or_directory}}##Change the owner of a file/directory to match a reference file
chown -R {{user}} {{path/to/directory}}##Recursively change the owner of a directory and its contents
chown -h {{user}} {{path/to/symlink}}##Change the owner of a symbolic link
chown {{user}} {{path/to/file_or_directory}}##Change the owner user of a file/directory
chown {{user}}:{{group}} {{path/to/file_or_directory}}##Change the owner user and group of a file/directory
chroma --lexer="{{c++}}" --formatter="{{svg}}" --syle="{{monokai}}" {{source_file}} > {{svg_file}}##Highlight a source file with the C++ lexer and output to an SVG, using the Monokai style
chroma --lexer="{{go}}" --formatter="{{html}}" {{source_file}} > {{html_file}}##Highlight a source file with the Go lexer and output to an HTML file
chroma --lexer="{{python}}" {{source_file}}##Highlight a source file with python lexer and output to terminal
chromium --app={{https://example.com}}##Open in application mode (without toolbars, URL bar, buttons, etc.)
chromium --auto-open-devtools-for-tabs##Open with a DevTools window for each tab opened
chromium --incognito {{example.com}}##Open in incognito mode
chromium --new-window {{example.com}}##Open in a new window
chromium --proxy-server="{{socks5://hostname:66}}" {{example.com}}##Use a proxy server
chromium --user-data-dir={{path/to/directory}} --disable-web-security##Open without CORS validation (useful to test an API)
chromium --user-data-dir={{path/to/directory}}##Open with a custom profile directory
chromium {{https://example.com|path/to/file.html}}##Open a specific URL or file
chroot --userspec={{user:group}}##Specify user and group (ID or name) to use
chroot {{path/to/new/root}} {{command}}##Run command as new root directory
chsh --list-shells##List available shells
chsh -s {{path/to/shell}} {{username}}##Change the login shell for a given user
chsh -s {{path/to/shell}}##Change the login shell of the current user
chsh##Change the current user's login shell interactively
circo -?##Display help
circo -T {{format}} -O {{path/to/input.gv}}##Render the output in `ps`, `pdf`, `svg`, `fig`, `png`, `gif`, `jpg`, `json`, or `dot` format
circo -T {{png}} -O {{path/to/input.gv}}##Render a `png` image with a filename based on the input filename and output format (uppercase -O)
circo -T {{svg}} -o {{path/to/image.svg}} {{path/to/input.gv}}##Render a `svg` image with the specified output filename (lowercase -o)
circup freeze -r##Save all libraries on a connected device in the current directory
circup freeze##List all libraries on a connected device in `requirements.txt` format
circup install {{library_name}}##Install a new library
circup show {{partial_name}}##Search for a library
circup update##Interactively update modules on a device
cksum {{path/to/file}}##Display a 32-bit checksum, size in bytes and filename
clamdscan --fdpass##Pass the file descriptor instead of streaming the file to the daemon
clamdscan --infected##Scan the current directory and output only infected files
clamdscan --log {{path/to/log_file}}##Output the scan report to a log file
clamdscan --move {{path/to/quarantine_directory}}##Move infected files to a specific directory
clamdscan --multiscan##Use multiple threads to scan a directory
clamdscan --remove##Remove infected files
clamdscan {{path/to/file_or_directory}}##Scan a file or directory for vulnerabilities
clamscan --database {{path/to/database_file_or_directory}}##Specify a virus database file or directory of files
clamscan --infected##Scan the current directory and output only infected files
clamscan --log {{path/to/log_file}}##Output the scan report to a log file
clamscan --move {{path/to/quarantine_directory}}##Move infected files to a specific directory
clamscan --remove yes##Remove infected files
clamscan -r {{path/to/directory}}##Scan all files recursively in a specific directory
clamscan {{path/to/file}}##Scan a file for vulnerabilities
clang -S -emit-llvm {{file.c}} -o {{file.ll}}##Compile source code into LLVM Intermediate Representation (IR)
clang -c {{input_source.c}}##Compile source code without linking
clang {{input_source.c}} -Wall -o {{output_executable}}##Activate output of all errors and warnings
clang {{input_source.c}} -o {{output_executable}} -I{{header_path}} -L{{library_path}} -l{{library_name}}##Include libraries located at a different path than the source file
clang {{input_source.c}} -o {{output_executable}}##Compile a source code file into an executable binary
clang++ $(llvm-config --cxxflags --ldflags --libs) --output {{path/to/output_executable}} {{path/to/source.cc}}##Compile and link an LLVM based program
clang++ -S -emit-llvm {{path/to/source.cpp}} -o {{path/to/output.ll}}##Compile source code into LLVM Intermediate Representation (IR)
clang++ {{path/to/source.cpp}} -Wall -o {{path/to/output_executable}}##Display (almost) all errors and warnings
clang++ {{path/to/source.cpp}} -o {{path/to/output_executable}} -I{{path/to/header_path}} -L{{path/to/library_path}} -l{{path/to/library_name}}##Include libraries located at a different path than the source file
clang++ {{path/to/source.cpp}} -o {{path/to/output_executable}}##Compile a source code file into an executable binary
clang++ {{path/to/source.cpp}} -std={{c++20}} -o {{path/to/output_executable}}##Choose a language standard to compile with
clang-format --style=file {{path/to/file}}##Format a file using the `.clang-format` file in one of the parent directories of the source file
clang-format --style={{LLVM|Google|Chromium|Mozilla|WebKit}} --dump-config > {{.clang-format}}##Generate a custom `.clang-format` file
clang-format --style={{LLVM|Google|Chromium|Mozilla|WebKit}} {{path/to/file}}##Format a file using a predefined coding style
clang-format -i {{path/to/file}}##Format a file in-place
clang-format {{path/to/file}}##Format a file and print the result to stdout
clang-tidy -checks={{*}} -list-checks##List all available checks
clang-tidy {{path/to/file.cpp}} -- -I{{my_project/include}} -D{{definitions}}##Specify defines and includes as compilation options (after `--`)
clang-tidy {{path/to/file.cpp}} -checks={{-*,cppcoreguidelines-*}}##Don't run any checks other than the `cppcoreguidelines` checks on a file
clang-tidy {{path/to/file.cpp}}##Run default checks on a source file
clear -T {{type_of_terminal}}##Indicate the type of terminal to clean (defaults to the value of the environment variable `TERM`)
clear -V##Show the version of `ncurses` used by `clear`
clear -x##Clear the screen but keep the terminal's scrollback buffer
clear##Clear the screen (equivalent to pressing Control-L in Bash shell)
clementine --load {{path/to/playlist.ext}}##Load a playlist file
clementine --next##Skip to the next track
clementine --play-pause##Toggle between pausing and playing
clementine --play-track {{5}}##Play the 5th track in the currently loaded playlist
clementine --previous##Skip to the previous track
clementine --stop##Stop playback
clementine {{url/or/path/to/file.ext}}##Start playing a music file
clementine##Open Clementine
clifm##Start CliFM
clj -M -m {{namespace}} {{args}}##Run the main function of a specified namespace
clj -P##Prepare a project by resolving dependencies, downloading libraries, and making / caching classpaths
clj -Sdeps '{:deps {nrepl {:mvn/version "0.7.0"} cider/cider-nrepl {:mvn/version "0.25.2"}}}' -m nrepl.cmdline --middleware '["cider.nrepl/cider-middleware"]' --interactive##Start an nREPL server with the CIDER middleware
clj -Sdeps '{:deps {org.clojure/clojurescript {:mvn/version "1.10.758"}}}' --main cljs.main --repl##Start a REPL for ClojureScript and open a web browser
clj -X {{namespace/function_name}}##Execute a function
clj##Start a REPL (interactive shell)
cloc --by-file {{path/to/directory}}##Count all the lines of code in a directory, displaying the results for each file instead of each language
cloc --diff {{path/to/directory/one}} {{path/to/directory/two}}##Compare 2 directory structures and count the differences between them
cloc --progress=1 {{path/to/directory}}##Count all the lines of code in a directory, displaying a progress bar during the counting process
cloc --vcs git {{path/to/directory}}##Ignore files that are ignored by VCS, such as files specified in `.gitignore`
cloc {{path/to/directory}}##Count all the lines of code in a directory
clockwork-cli {{path/to/directory1 path/to/directory2 …}}##Monitor Clockwork logs for multiple projects
clockwork-cli {{path/to/directory}}##Monitor Clockwork logs for a specific project
clockwork-cli##Monitor Clockwork logs for the current project
cloudflared service install##Install cloudflared as a system service
cloudflared tunnel --hostname {{hostname}} http://localhost:{{port_number}} --loglevel {{panic|fatal|error|warn|info|debug}} --logfile {{path/to/file}}##Save logs to a file
cloudflared tunnel --hostname {{hostname}} localhost:{{port_number}} --no-tls-verify##Establish a tunnel to a host in Cloudflare from the local server, without verifying the local server's certificate
cloudflared tunnel --hostname {{hostname}} localhost:{{port_number}}##Establish a tunnel to a host in Cloudflare from the local server
cloudflared tunnel login##Authenticate and associate the connection to a domain in the Cloudflare account
cmake --build {{path/to/build_directory}} --target {{target_name}}##Run a custom build target
cmake --build {{path/to/build_directory}}##Use a generated recipe in a given directory to build artifacts
cmake --install {{path/to/build_directory}} --strip --prefix {{path/to/directory}}##Install the build artifacts using the custom prefix for paths
cmake --install {{path/to/build_directory}} --strip##Install the build artifacts into `/usr/local/` and strip debugging symbols
cmake {{path/to/project_directory}} -D {{CMAKE_BUILD_TYPE=Release}}##Generate a build recipe, with build type set to `Release` with CMake variable
cmake {{path/to/project_directory}}##Generate a build recipe in the current directory with `CMakeLists.txt` from a project directory
cmark --smart --to html {{filename.md}}##Convert straight quotes to smart quotes
cmark --to html {{filename.md}}##Render a CommonMark Markdown file to HTML
cmark --to latex##Convert data from standard input to LaTeX
cmark --validate-utf8 {{filename.md}}##Validate UTF-8 characters
cmatrix -C {{red}}##Display red text
cmatrix -a##Enable asynchronous scrolling
cmatrix -r##Enable rainbow mode
cmatrix -u {{2}}##Set screen update delay to 2 centiseconds (20 milliseconds)
cmp -l {{path/to/file1}} {{path/to/file2}}##Find the byte number and differing bytes of every difference
cmp {{path/to/file1}} {{path/to/file2}}##Find the byte and line number of the first difference between two files
code --diff {{path/to/file1}} {{path/to/file2}}##Compare two specific files
code --list-extensions --show-versions##Print installed extensions with their versions
code --list-extensions##Print installed extensions
code --new-window {{path/to/file_or_directory1 path/to/file_or_directory2 ...}}##Open specific files/directories in a new window
code --{{install|uninstall}}-extension {{publisher.extension}}##Install/uninstall a specific extension
code {{path/to/file_or_directory1 path/to/file_or_directory2 ...}}##Open specific files/directories
code##Start Visual Studio Code
codespell --check-filenames##Check file names for typos, in addition to file contents
codespell --dictionary {{path/to/file.txt}}##Use a custom dictionary file when checking (`--dictionary` can be used multiple times)
codespell --ignore-words {{path/to/file.txt}}##Do not check words that are listed in the specified file
codespell --ignore-words-list {{words,to,ignore}}##Do not check the specified words
codespell --skip "{{pattern}}"##Skip files with names that match the specified pattern (accepts a comma-separated list of patterns using wildcards)
codespell --write-changes##Correct all typos found in-place
codespell --{{context|before-context|after-context}} {{3}}##Print 3 lines of context around, before or after each match
codespell##Check for typos in all text files in the current directory, recursively
coffee --compile {{path/to/file.coffee}} --output {{path/to/file.js}}##Compile to JavaScript and save to a given output file
coffee --compile {{path/to/file.coffee}}##Compile to JavaScript and save to a file with the same name
coffee --interactive##Start a REPL (interactive shell)
coffee --watch {{path/to/file.coffee}}##Watch script for changes and re-run script
coffee {{path/to/file.coffee}}##Run a script
colordiff -i {{file1}} {{file2}}##Ignore case differences in file contents
colordiff -s {{file1}} {{file2}}##Report when two files are the same
colordiff -w {{file1}} {{file2}}##Ignore white spaces
colordiff -y {{file1}} {{file2}}##Output in two columns
colordiff {{file1}} {{file2}}##Compare files
colorls --all##List all files, including hidden files
colorls --dirs##Only list directories
colorls --long --all##Long format list (permissions, ownership, size, and modification date) of all files
colorls -1##List files one per line
colorpicker --hex##Only print the hexadecimal value
colorpicker --one-shot##Only print the color of one clicked pixel and then exit
colorpicker --quit-on-keypress##Print the color of each clicked pixel and quit when a key is pressed
colorpicker --rgb##Only print the RGB value
colorpicker##Launch colorpicker and print the hexadecimal and RGB value of each clicked pixel to stdout
comby '{{assert_eq!(:[a], :[b])}}' '{{assert_eq!(:[b], :[a])}}' {{.rs}}##Match and rewrite templates, and print changes
comby '{{assert_eq!(:[a], :[b])}}' '{{assert_eq!(:[b].Capitalize, :[a])}}' {{.rs}}##Match and rewrite with rewrite properties
comby -in-place '{{match_pattern}}' '{{rewrite_pattern}}'##Match and rewrite in-place
comby -match-only '{{match_pattern}}' ""##Only perform matching and print matches
comm -12 {{file1}} {{file2}}##Print only lines common to both files
comm -13 <(sort {{file1}}) <(sort {{file2}})##Print lines only found in second file, when the files aren't sorted
comm -23 {{file1}} {{file2}} > {{file1_only}}##Get lines only found in first file, saving the result to a third file
comm {{file1}} {{file2}}##Produce three tab-separated columns lines only in first file, lines only in second file and common lines
command -v {{command_name}}##Display the path to the executable or the alias definition of a specific command
command {{ls}}##Execute the `ls` program literally, even if an `ls` alias exists
command1 | pv -s {{expected_amount_of_data_for_eta}} | command2##Measure the speed and amount of data flow between pipes (`-s` is optional)
compare -verbose -metric {{PSNR}} {{image1.png}} {{image2.png}} {{diff.png}}##Compare 2 images using a custom metric
compare {{image1.png}} {{image2.png}} {{diff.png}}##Compare 2 images
compgen -A function##List all functions that you could run
compgen -a##List all aliases
compgen -ac {{ls}}##See all available commands/aliases starting with 'ls'
compgen -c##List all commands that you could run
compgen -k##Show shell reserved keywords
complete -C {{autocomplete_command}} {{command}}##Apply a command that performs autocompletion to another command
complete -F {{function}} {{command}}##Apply a function that performs autocompletion to a command
complete -o nospace -F {{function}} {{command}}##Apply autocompletion without appending a space to the completed word
composer init##Interactively create a `composer.json` file
composer install##Install all the dependencies in this project's `composer.json` and create `composer.lock`
composer remove {{user/package_name}}##Uninstall a package from this project, removing it as a dependency from `composer.json`
composer require {{user/package_name}}##Add a package as a dependency for this project, adding it to `composer.json`
composer self-update##Update composer to its latest version
composer update --lock##Update composer lock only after updating `composer.json` manually
composer update##Update all the dependencies in this project's `composer.json` and note versions in `composer.lock` file
composer why-not {{user/package_name}}##Learn more about why a dependency can't be installed
composer-require-checker check --config-file {{path/to/config.json}} {{path/to/composer.json}}##Analyse a Composer JSON file with a specific configuration
composer-require-checker check {{path/to/composer.json}}##Analyse a Composer JSON file
conan frogarian##Display the conan frogarian
conan install -g {{generator}}##Install packages and create configuration files for a specific generator
conan install {{.}} --build##Install packages, building from source
conan install {{.}}##Install packages based on `conanfile.txt`
conan remote list##List remotes
conan search {{package}} -r {{remote}}##Search for remote packages
conan search {{package}}##Search for locally installed packages
conda clean --all##Delete unused packages and caches
conda create --clone {{py39}} --name {{py39-copy}}##Make exact copy of an environment
conda create --name {{env_name}} {{package_name}}##Create a new environment with a specified name and install a given package
conda create --name {{environment_name}} {{python=3.9 matplotlib}}##Create a new environment, installing named packages into it
conda create --yes --name {{py39}} python={{3.9}} "{{numpy>=1.11}}"##Create a new environment named `py39`, and install Python 3.9 and NumPy v1.11 or above in it
conda info --envs##List all environments
conda install {{python=3.4 numpy}}##Install packages into the current environment
conda list##List currently installed packages in current environment
conda remove --name {{environment_name}} --all##Delete an environment (remove all packages)
conda {{activate environment_name}}##Load an environment
conda {{deactivate}}##Unload an environment
connect {{hostname}}:{{port}}##Connect to a Deluge daemon instance
consul --help##Show general help
consul --version##Check the Consul version
consul kv delete {{key}}##Delete a key-value pair
consul kv get {{key}}##Read a value from the key-value store
consul kv put {{key}} {{value}}##Store a new key-value pair
consul {{sub-command}} --help##Show help for a sub-command
convert -size {{800x600}} "xc:{{#ff0000}}" {{image.png}}##Create an image with nothing but a solid background
convert {{image.jpg}} {{image.png}}##Convert an image from JPG to PNG
convert {{image.png}} -resize 50% {{image2.png}}##Scale an image 50% its original size
convert {{image.png}} -resize 640x480 {{image2.png}}##Scale an image keeping the original aspect ratio to a maximum dimension of 640x480
convert {{image1.png}} {{image2.png}} {{image3.png}} +append {{image123.png}}##Horizontally append images
convert {{image1.png}} {{image2.png}} {{image3.png}} -append {{image123.png}}##Vertically append images
convert {{image1.png}} {{image2.png}} {{image3.png}} -delay {{10}} {{animation.gif}}##Create a GIF from a series of images with 100ms delay between them
convert {{image1.png}} {{image2.png}} {{image3.png}} {{image.ico}}##Create a favicon from several images of different sizes
convmv -f {{from_encoding}} -t {{to_encoding}} --notest {{input_file}}##Convert filename encoding and rename the file to the new encoding
convmv -f {{from_encoding}} -t {{to_encoding}} {{input_file}}##Test filename encoding conversion (don't actually change the filename)
copyq add -- {{text1}} {{text2}} {{text3}}##Insert raw text into the clipboard history
copyq add {{firstline\nsecondline}}##Insert text containing escape sequences ('\n', '\t') into the clipboard history
copyq clipboard##Show current clipboard content
copyq copy < {{file.txt}}##Copy a file's contents into the clipboard
copyq copy image/jpeg < {{image.jpg}}##Copy a JPEG image into the clipboard
copyq read 0 1 2##Print the content of the first 3 items in the clipboard history
copyq##Launch CopyQ to store clipboard history
cordova create {{path}} {{package_name}} {{project_name}}##Create a Cordova project
cordova info##Display the current workspace status
cordova platform add {{platform}}##Add a Cordova platform
cordova platform remove {{platform}}##Remove a Cordova platform
cordova plugin add {{pluginid}}##Add a Cordova plugin
cordova plugin remove {{pluginid}}##Remove a Cordova plugin
core-validate-commit --help##Display help
core-validate-commit --list##List all validation rules
core-validate-commit --list-subsystem##List all valid Node.js subsystems
core-validate-commit --tap##Validate the current commit formatting the output in tap format
core-validate-commit {{commit_hash}}##Validate a specific commit
core-validate-commit##Validate the current commit
corepack disable##Remove the Corepack shims from the Node.js installation directory
corepack enable --install-directory {{path/to/directory}}##Add the Corepack shims to a specific directory
corepack enable##Add the Corepack shims to the Node.js installation directory to make them available as global commands
corepack hydrate {{path/to/corepack.tgz}}##Install a package manager from the specified archive
corepack prepare {{package_manager}}@{{version}} --activate##Prepare a specific package manager
corepack prepare##Prepare the package manager configured for the project in the current path
corepack {{npm|pnpm|yarn}} {{package_manager_arguments}}##Use a package manager without installing it as a global command
corepack {{subcommand}} --help##Display help for a subcommand
cosign copy {{example.com/src:latest}} {{example.com/dest:latest}}##Copy a container image and its signatures
cosign dockerfile verify -key {{cosign.pub}} {{path/to/Dockerfile}}##Verify images with a public key in a Dockerfile
cosign generate-key-pair##Generate a key-pair
cosign sign -key k8s://{{namespace}}/{{key}} {{image}}##Sign a container image with a key pair stored in a Kubernetes secret
cosign sign -key {{cosign.key}} {{image}}##Sign a container and store the signature in the registry
cosign sign-blob --key {{cosign.key}} {{file}}##Sign a blob with a local key pair file
cosign verify -key k8s://{{namespace}}/{{key}} {{image}}##Verify an image with a public key stored in a Kubernetes secret
cosign verify -key {{cosign.pub}} {{image}}##Verify a container against a public key
cotton -u {{base_url}} -i {{file}}.md##Disable certificate verification (insecure mode)
cotton -u {{base_url}} -s {{file}}.md##Stop running when a test fails
cotton -u {{base_url}} {{file}}.md##Use a specific base URL
couchdb -b##Start CouchDB as a background process
couchdb -d##Shutdown the background process
couchdb -i##Start CouchDB interactive shell
couchdb -k##Kill the background process (Note It will respawn if needed)
couchdb##Start CouchDB
cowsay "{{hello, world}}"##Print an ASCII cow saying "hello, world"
cowsay -e {{characters}} "{{hello, world}}"##Print an ASCII cow with custom eyes saying "hello, world"
cowsay -f {{art}} "{{hello, world}}"##Print the specified ASCII art saying "hello, world"
cowsay -l##List all available art types
cowthink -d "{{I'm just a cow, not a great thinker...}}"##Print a dead thinking ASCII cow
cp -L {{link}} {{path/to/target_directory}}##Follow symbolic links before copying
cp -R {{path/to/source_directory}} {{path/to/target_directory}}##Recursively copy a directory's contents to another location (if the destination exists, the directory is copied inside it)
cp -i {{*.txt}} {{path/to/target_directory}}##Copy text files to another location, in interactive mode (prompts user before overwriting)
cp -vR {{path/to/source_directory}} {{path/to/target_directory}}##Copy a directory recursively, in verbose mode (shows files as they are copied)
cp {{path/to/source_file.ext}} {{path/to/target_file.ext}}##Copy a file to another location
cp {{path/to/source_file.ext}} {{path/to/target_parent_directory}}##Copy a file into another directory, keeping the filename
cpdf -decrypt {{path/to/encrypted_document.pdf}} owner={{fred}} -o {{path/to/decrypted_document.pdf}}##Decrypt a document using the owner password `fred`
cpdf -encrypt {{128bit}} {{fred}} {{joe}} {{path/to/source_document.pdf}} -o {{path/to/encrypted_document.pdf}}##Encrypt a document using 128bit encryption, providing `fred` as owner password and `joe` as user password
cpdf -list-annotations {{path/to/document.pdf}}##Show the annotations of a document
cpdf -list-bookmarks {{path/to/document.pdf}}##Show the bookmarks of a document
cpdf -merge {{path/to/source_document_one.pdf}} {{path/to/source_document_two.pdf}} -o {{path/to/destination_document.pdf}}##Merge two documents into a new one
cpdf -set-metadata {{path/to/metadata.xml}} {{path/to/source_document.pdf}} -o {{path/to/destination_document.pdf}}##Create a new document from an existing one with additional metadata
cpdf -split {{path/to/document.pdf}} -o {{path/to/chunk%%%.pdf}} -chunk {{10}}##Split a document into ten-page chunks, writing them to `chunk001.pdf`, `chunk002.pdf`, etc
cpdf {{path/to/source_document.pdf}} {{1-3,6}} -o {{path/to/destination_document.pdf}}##Select pages 1, 2, 3 and 6 from a source document and write those to a destination document
cpio -idv < {{archive.cpio}}##P[i]ck all files from an archive, generating [d]irectories where needed, in [v]erbose mode
cppcheck --enable={{error|warning|style|performance|portability|information|all}} {{path/to/file.cpp}}##Check a given file, specifying which tests to perform (by default only errors are shown)
cppcheck --errorlist##List available tests
cppcheck --project={{path/to/project.sln}}##Check a Microsoft Visual Studio project (`*.vcxproj`) or solution (`*.sln`)
cppcheck --quiet {{path/to/directory}}##Recursively check a given directory, and don't print progress messages
cppcheck --suppress={{test_id1}} --suppress={{test_id2}} {{path/to/file.cpp}}##Check a given file, ignoring specific tests
cppcheck -I {{include/directory_1}} -I {{include/directory_2}} .##Check the current directory, providing paths for include files located outside it (e.g. external libraries)
cppcheck . 2> cppcheck.log##Recursively check the current directory, showing progress on the screen and logging error messages to a file
cppclean {{.}} --exclude={{build}}##Run on the current directory, excluding the "build" directory
cppclean {{main.cpp}}##Run on a specific file `main.cpp`
cppclean {{path/to/project}} --include-path={{inc1}} --include-path={{inc2}}##Run on a project where the headers are in the `inc1/` and `inc2/` directories
cppclean {{path/to/project}}##Run in a project's directory
cradle connect {{server_name}}##Connect to a server
cradle deploy production##Deploy Cradle to a server
cradle deploy s3 --include-upload##Deploy static assets including the "upload" directory
cradle deploy s3 --include-yarn##Deploy static assets including the Yarn "components" directory
cradle deploy s3##Deploy static assets to Amazon S3
cradle elastic flush {{package_name}}##Truncate the Elasticsearch index for a specific package
cradle elastic flush##Truncate the Elasticsearch index
cradle elastic map {{package_name}}##Submit the Elasticsearch schema for a specific package
cradle elastic map##Submit the Elasticsearch schema
cradle elastic populate {{package_name}}##Populate the Elasticsearch indices for a specific package
cradle elastic populate##Populate the Elasticsearch indices for all packages
cradle help##Display general help
cradle install --force##Forcefully overwrite files
cradle install --skip-sql##Skip running SQL migrations
cradle install --skip-versioning##Skip running package updates
cradle install -h {{hostname}} -u {{username}} -p {{password}}##Use specific database details
cradle install##Install Cradle's components (User will be prompted for further details)
cradle package install {{package}} {{version}}##Install a specific version of a package
cradle package install {{package}}##Install a package from Packagist
cradle package list##Display a list of available packages
cradle package remove {{package}}##Remove a specific package
cradle package search {{package}}##Search for a package
cradle package update {{package}} {{version}}##Update a package to a specific version
cradle package update {{package}}##Update a package
cradle sql build {{package_name}}##Rebuild the database schema for a specific package
cradle sql build##Rebuild the database schema
cradle sql flush {{package_name}}##Empty the database tables for a specific package
cradle sql flush##Empty the entire database
cradle sql populate {{package_name}}##Populate the tables for a specific package
cradle sql populate##Populate the tables for all packages
cradle {{command}} help##Display help for a specific command
cradle {{command}}##Execute a Cradle command
create function {{func_name}} as {{path.to.package.Func}} using '{{package.jar}}';##Create a Java function using a `.jar` resource
create function {{func_name}} as {{script.Func}} using '{{script.py}}';##Create a Python function using a `.py` resource
create role {{role_name}};##Create a user role
create table {{table_name}} ({{col}} {{type}}) partitioned by ({{col}} {{type}}) lifecycle {{days}};##Create a table with partition and lifecycle
create table {{table_name}} like {{another_table}};##Create a table based on the definition of another table
createdb --owner={{username}} {{database_name}} '{{description}}'##Create a database owned by a specific user with a description
createdb --template={{template_name}} {{database_name}}##Create a database from a template
createdb {{database_name}}##Create a database owned by the current user
croc --relay {{ip_to_relay}} send {{path/to/file_or_directory}}##Send and connect over a custom relay
croc --relay {{ip_to_relay}} {{passphrase}}##Receive and connect over a custom relay
croc relay##Host a croc relay on the default ports
croc send --code {{passphrase}} {{path/to/file_or_directory}}##Send a file or directory with a specific passphrase
croc send {{path/to/file_or_directory}}##Send a file or directory
croc {{passphrase}}##Receive a file or directory on receiving machine
croc {{send|relay}} --help##Display parameters and options for a croc command
cronic {{command}}##Call a command and display its output if it returns a non-zero exit code
crontab -e##Edit the crontab file for the current user
crontab -l##View a list of existing cron jobs for current user
crontab -r##Remove all cron jobs for the current user
crontab {{path/to/file}}##Replace the current crontab with the contents of the given file
crunch {{1}} {{1}} -p {{abc}} {{def}} {{ghi}}##Output a list of all permutations of the given strings (lengths are not processed)
crunch {{1}} {{1}} -p {{abc}}##Output a list of all permutations of abc (lengths are not processed)
crunch {{1}} {{3}}##Output a list of words of length 1 to 3 with only lowercase characters
crunch {{1}} {{5}} -o {{START}} -c {{1000}} -z {{gzip|bzip2|lzma|7z}}##Write a list of words in compressed chunk files with a specified number of words
crunch {{1}} {{5}} -o {{START}} -e {{abcde}} -i##Write a list of words stopping with the given string and inverting the wordlist
crunch {{3}} {{5}} -o {{START}} -b {{10kb}} -s {{abc}}##Write a list of words in chunk files of a given size, starting with the given string
crunch {{5}} {{5}} {{abcde123}} -t {{@@@12}} -d 2@##Output a list of words generated according to the given pattern and a maximum number of duplicate letters
crunch {{8}} {{8}} {{0123456789abcdef}}##Output a list of hexadecimal words of length 8
cryfs --show-ciphers##Show a list of supported ciphers
cryfs --unmount-idle {{10}} {{path/to/cipher_dir}} {{path/to/mount_point}}##Automatically unmount after ten minutes of inactivity
cryfs {{path/to/cipher_dir}} {{path/to/mount_point}}##Mount an encrypted filesystem. The initialization wizard will be started on the first execution
cryfs-unmount {{path/to/mount_point}}##Unmount an encrypted filesystem
crystal build {{path/to/file.cr}}##Compile a file and all dependencies to a single executable
crystal help##Display all help options
crystal init app {{application_name}}##Create a project directory for a Crystal application
crystal play##Start a local interactive server for testing the language
crystal {{path/to/file.cr}}##Run a Crystal file
csc /doc:{{path/to/output.xml}} {{path/to/input_file.cs}}##Automatically generate XML documentation
csc /keyfile:{{path/to/keyfile}} {{path/to/input_file.cs}}##Strongly-name the resulting assembly with a keyfile
csc /out:{{path/to/filename}} {{path/to/input_file.cs}}##Specify the output filename
csc /reference:{{path/to/library.dll}} {{path/to/input_file.cs}}##Reference another assembly
csc /resource:{{path/to/resource_file}} {{path/to/input_file.cs}}##Embed a resource
csc /target:library {{path/to/input_file.cs}}##Compile into a `.dll` library instead of an executable
csc /win32icon:{{path/to/icon.ico}} {{path/to/input_file.cs}}##Specify an icon
csc {{path/to/input_file_a.cs}} {{path/to/input_file_b.cs}}##Compile one or more C# files to a CIL executable
csh -c "{{command}}"##Execute a [c]ommand
csh -f##Start an interactive shell session without loading startup configs
csh {{path/to/script.csh}}##Execute a script
csh##Start an interactive shell session
csslint --errors={{errors,universal-selector,imports}} {{file.css}}##Specify certain rules as errors (which result in a non-zero exit code)
csslint --ignore={{ids,rules-count,shorthand}} {{file.css}}##Specify certain rules to ignore
csslint --list-rules##List all possible style rules
csslint --warnings={{box-sizing,selector-max,floats}} {{file.css}}##Specify certain rules as warnings
csslint {{file.css}}##Lint a single CSS file
csslint {{file1.css}} {{file2.css}} {{file3.css}}##Lint multiple CSS files
csvclean -n {{bad.csv}}##List locations of syntax errors in a CSV file
csvclean {{bad.csv}}##Clean a CSV file
csvcut -C {{4}} {{data.csv}}##Extract all columns **except** the fourth one
csvcut -c {{1,3}} {{data.csv}}##Extract the first and third columns
csvcut -c {{id,"first name"}} {{data.csv}}##Extract the columns named "id" and "first name" (in that order)
csvcut -n {{data.csv}}##Print indices and names of all columns
csvformat -D "{{custom_character}}" {{data.csv}}##Convert delimiters to a custom character
csvformat -M "{{\r\n}}" {{data.csv}}##Convert line endings to carriage return (^M) + line feed
csvformat -T {{data.csv}}##Convert to a tab-delimited file (TSV)
csvformat -U 0 {{data.csv}}##Minimize use of quote characters
csvformat -U 1 {{data.csv}}##Maximize use of quote characters
csvgrep -c {{1}} -m {{string_to_match}} {{data.csv}}##Find rows that have a certain string in column 1
csvgrep -c {{3,4}} -r {{regular_expression}} {{data.csv}}##Find rows in which columns 3 or 4 match a certain regular expression
csvgrep -i -c {{name}} -m "{{John Doe}}" {{data.csv}}##Find rows in which the "name" column does NOT include the string "John Doe"
csvlook {{data.csv}}##View a CSV file
csvpy --dict {{data.csv}}##Load a CSV file into a `CSVKitDictReader` object
csvpy {{data.csv}}##Load a CSV file into a `CSVKitReader` object
csvsort --no-inference -c {{columns}} {{data.csv}}##Sort a CSV file without inferring data types
csvsort -c {{2,4}} {{data.csv}}##Sort a CSV file by column 2, then by column 4
csvsort -c {{9}} {{data.csv}}##Sort a CSV file by column 9
csvsort -r -c {{name}} {{data.csv}}##Sort a CSV file by the "name" column in descending order
csvsql --insert --db "{{mysql://user:password@host/database}}" {{data.csv}}##Import a CSV file into an SQL database
csvsql --query "{{select * from 'data'}}" {{data.csv}}##Run an SQL query on a CSV file
csvsql {{path/to/data.csv}}##Generate a `CREATE TABLE` SQL statement for a CSV file
csvstat --sum {{data.csv}}##Show sums for all columns
csvstat -c {{2,4}} {{data.csv}}##Show all stats for columns 2 and 4
csvstat -c {{3}} --len {{data.csv}}##Show the max value length for column 3
csvstat -c {{name}} --unique {{data.csv}}##Show the number of unique values in the "name" column
csvstat {{data.csv}}##Show all stats for all columns
csvtool --column {{2,4}} {{path/to/file.csv}}##Extract the second and fourth columns from a CSV file
csvtool --column {{2}} --search '{{Baz$}}' {{path/to/file.csv}} | csvtool --no-header --column {{3,6}}##Find lines in a CSV file where the second column ends with 'Baz' and then extract the third and sixth columns
csvtool --column {{2}} --search '{{^Bar}}' {{path/to/file.csv}}##Extract lines from a CSV file where the second column starts with 'Bar'
csvtool --column {{2}} --search '{{^Foo$}}' {{path/to/file.csv}}##Extract lines from a CSV file where the second column exactly matches 'Foo'
csvtool --column {{2}} {{path/to/file.csv}}##Extract the second column from a CSV file
ctags --recurse##Generate tags for all files in the current directory and all subdirectories
ctags -f {{filename}} *##Generate tags for all files in the current directory, and output them to a specific file, overwriting the file if it exists
ctags {{path/to/file}}##Generate tags for a single file, and output them to a file named "tags" in the current directory, overwriting the file if it exists
ctest --output-on-failure -R '^{{test_name}}$'##Run a single test based on its name, or filter on a regular expression
ctest -N##Show a list of available tests
ctest -j{{4}} --output-on-failure##Run all tests defined in the CMake project, executing 4 jobs at a time in parallel
cups-config --datadir##Show the location of CUPS' data directory
cups-config --help##Display all available options
cups-config --serverbin##Show where CUPS is currently installed
cups-config --serverroot##Show the location of CUPS' configuration directory
cups-config --version##Show the currently installed version of CUPS
cupsd -c {{path/to/cupsd.conf}}##Start `cupsd` using the specified [`c`]`upsd.conf` configuration file
cupsd -f##Start `cupsd` on the [f]oreground
cupsd -h##Display all available options
cupsd -l##[l]aunch `cupsd` on-demand (commonly used by `launchd` or `systemd`)
cupsd -s {{path/to/cups-files.conf}}##Start `cupsd` using the specified `cups-file`[`s`]`.conf` configuration file
cupsd -t -c {{path/to/cupsd.conf}}##[t]est the [`c`]`upsd.conf` configuration file for errors
cupsd -t -s {{path/to/cups-files.conf}}##[t]est the `cups-file`[`s`]`.conf` configuration file for errors
cupsd##Start `cupsd` in the background, aka. as a daemon
curl --cert {{client.pem}} --key {{key.pem}} --insecure {{https://example.com}}##Pass client certificate and key for a resource, skipping certificate validation
curl --data {{'name=bob'}} {{http://example.com/form}}##Send form-encoded data (POST request of type `application/x-www-form-urlencoded`). Use `--data @file_name` or `--data @'-'` to read from STDIN
curl --data {{'{"name":"bob"}'}} --header {{'Content-Type: application/json'}} {{http://example.com/users/1234}}##Send data in JSON format, specifying the appropriate content-type header
curl --fail --remote-name --location --continue-at - {{http://example.com/filename}}##Download a file, following location redirects, and automatically continuing (resuming) a previous file transfer and return an error on server error
curl --header {{'X-My-Header: 123'}} --request {{PUT}} {{http://example.com}}##Send a request with an extra header, using a custom HTTP method
curl --remote-name {{http://example.com/filename}}##Download a file, saving the output under the filename indicated by the URL
curl --silent {{http://example.com:9090/metrics/}} | promtool check metrics##Pass Prometheus metrics over stdin to check them for consistency and correctness
curl --user myusername:mypassword {{http://example.com}}##Pass a username and password for server authentication
curl -s {{https://example.com/image.png}} | viu -##Render an image or GIF from the internet using `curl`
curl -s {{https://url/to/xml}} | zek -o {{path/to/output.go}}##Generate a Go struct from a given XML from stdin and send output to a file
curl {{http://example.com}} --output {{filename}}##Download the contents of a URL to a file
curl {{https://example.com/file.patch}} | git apply##Apply a remote patch file
cut -c {{1-16}} {{file}}##Cut out the first sixteen characters of each line of the given files
cut -c {{1-16}}##Cut out the first sixteen characters of each line of stdin
cut -c {{3-}}##Cut out everything from the 3rd character to the end of each line
cut -d'{{ }}' -f{{3-}}##Cut out the fields 3 through to the end of each line, using a space as a delimiter
cut -d'{{:}}' -f{{5}}##Cut out the fifth field of each line, using a colon as a field delimiter (default delimiter is tab)
cut -d'{{;}}' -f{{2,10}}##Cut out the 2nd and 10th fields of each line, using a semicolon as a delimiter
cvs -d {{path/to/repository}} init##Create a new repository (requires the `CVSROOT` environment variable to be set externally)
cvs add {{path/to/file}}##Add a file
cvs checkout {{project_name}}##Checkout a project
cvs commit -m "{{message}}" {{path/to/file}}##Commit a file
cvs diff {{path/to/file}}##Show changes made to files
cvs import -m "{{message}}" {{project_name}} {{version}} {{vendor}}##Add a project to the repository
cvs update##Update the working directory from the remote repository
cwebp {{path/to/image_file}} -o {{path/to/output.webp}} -noalpha##Compress a WebP file and drop alpha channel information
cwebp {{path/to/image_file}} -o {{path/to/output.webp}} -q {{0}}##Compress a WebP file with the worst [q]uality and smallest file size
cwebp {{path/to/image_file}} -o {{path/to/output.webp}} -q {{100}}##Compress a WebP file with the best [q]uality and largest file size
cwebp {{path/to/image_file}} -o {{path/to/output.webp}} -resize {{width}} {{height}}##Compress a WebP file and apply resize to image
cwebp {{path/to/image_file}} -o {{path/to/output.webp}}##Compress a WebP file with default settings (q = 75) to the [o]utput file
d {{bookmark_name}}##Delete a bookmark
d8 -e "{{code}}##Evaluate a JavaScript expression
d8 {{path/to/file.js}}##Run a JavaScript file
d8##Start a REPL (interactive shell)
daps --help##Display help
daps --version##Display version
daps -d {{path/to/file.xml}} html --single##Convert a DocBook XML file into a single HTML file
daps -d {{path/to/file.xml}} pdf##Convert a DocBook XML file into PDF
daps -d {{path/to/file.xml}} validate##Check if a DocBook XML file is valid
darkhttpd {{path/to/docroot}} --addr {{ip_address}}##Listen only on specified IP address (by default, the server listens on all interfaces)
darkhttpd {{path/to/docroot}} --port {{port}}##Start server on specified port (port 8080 by default if running as non-root user)
darkhttpd {{path/to/docroot}}##Start server serving the specified document root
dart compile exe {{path/to/file.dart}}##Compile a Dart file to a native binary
dart create {{project_name}}##Initialize a new Dart project in a directory of the same name
dart pub get##Download dependencies for the current project
dart pub upgrade --null-safety##Update an outdated project's dependencies to support null-safety
dart run {{path/to/file.dart}}##Run a Dart file
dart test##Run unit tests for the current project
dash -c "{{command}}"##Execute a command and then exit
dash -e {{path/to/script.sh}}##Execute commands from a script, stopping at the first error
dash -s##Read and execute commands from stdin
dash -x {{path/to/script.sh}}##Run commands from a script, printing each command before executing it
dash {{path/to/script.sh}}##Execute a script
dash##Start an interactive shell session
date +"%c"##Display the current date using the default locale's format
date +%s##Display the current date as a Unix timestamp (seconds since the Unix epoch)
date --rfc-3339=s##Display the current date using the RFC-3339 format (`YYYY-MM-DD hhmmss TZ`)
date -d "{{2018-09-01 00:00}}" +%s --utc##Convert a specific date to the Unix timestamp format
date -d @1473305798##Display a specific date (represented as a Unix timestamp) using the default format
date -u +"%Y-%m-%dT%H:%M:%SZ"##Display the current date in UTC and ISO 8601 format
date {{093023592021.59}}##Set the current date using the format `MMDDhhmmYYYY.ss` (`YYYY` and `.ss` are optional)
dc --expression='100 k 5 v 1 + 2 / p'##Calculate the golden ratio, phi set number of decimal places to 100 (100 k), square root of 5 (5 v) plus 1 (1 +), divided by 2 (2 /), and [p]rint result
dc --expression='4 5 * 17 - p'##Calculate 4 times 5 (4 5 *), subtract 17 (17 -), and [p]rint the output
dc --expression='7 k 5 _3 / p'##Set number of decimal places to 7 (7 k), calculate 5 divided by -3 (5 _3 /) and [p]rint
dc --expression='{{10}} k {{5 3 /}} p'##Calculate an expression with the specified scale
dc {{path/to/script.dc}}##Execute a script
dc##Start an interactive session
dcfldd if=/dev/{{disk_device}} of={{file.img}} hash=sha256 hashlog={{file.hash}}##Copy a disk to a raw image file and hash the image using SHA256
dcfldd if=/dev/{{disk_device}} of={{file.img}} hash={{sha512|sha384|sha256|sha1|md5}} hashlog={{file.hash}} hashwindow={{1G}}##Copy a disk to a raw image file, hashing each 1 GB chunk
dcg --directory {{path/to/directory}}##Generate the code in a specific directory
dcg {{service|plugin|theme|module|form}}##Directly specify the kind of code to generate
dcg##Start a wizard to choose what kind of code (e.g. module, service, form, etc.) to generate
dcode "{{NjM3YTQyNzQ1YTQ0NGUzMg==}}"##Recursively detect and decode a string
dcode -rev "{{hello world}}"##Reverse a string
dcode -rot {{11}} "{{spwwz hzcwo}}"##Rotate a string by the specified offset
dcode -rot {{all}} "{{bpgkta xh qtiitg iwpc sr}}"##Rotate a string by all 26 possible offsets
dd if=/dev/urandom of={{random_file}} bs=100 count=1##Generate a file of 100 random bytes by using kernel random driver
dd if=/dev/zero of={{file_1GB}} bs=1024 count=1000000##Benchmark the write performance of a disk
dd if=/dev/{{drive_device}} of={{path/to/file.img}} status=progress##Generate a system backup into an IMG file and show the progress
dd if=/dev/{{source_drive}} of=/dev/{{dest_drive}} bs=4M conv=noerror status=progress##Clone a drive to another drive with 4 MiB block, ignore error and show progress
dd if={{file.iso}} of=/dev/{{usb_drive}} status=progress##Make a bootable USB drive from an isohybrid file (such like `archlinux-xxx.iso`) and show the progress
dd if={{path/to/file.img}} of=/dev/{{drive_device}} status=progress##Restore a drive from an IMG file and show the progress
deactivate##Stop the `virtualenv`
deactivate##Stop the environment
decaffeinate --loose-js-modules {{path/to/file.coffee}}##Convert a CoffeeScript, allowing named exports
decaffeinate --use-cs2 {{path/to/file.coffee}}##Convert a CoffeeScript v2 file to JavaScript
decaffeinate --use-js-modules {{path/to/file.coffee}}##Convert require and `module.exports` to import and export
decaffeinate {{path/to/file.coffee}}##Convert a CoffeeScript file to JavaScript
declare -A {{variable}}=({{[key_a]=item_a [key_b]=item_b [key_c]=item_c}})##Declare an associative array variable with the specified value
declare -a {{variable}}=({{item_a item_b item_c}})##Declare an array variable with the specified value
declare -g {{variable}}="{{value}}"##Declare a global variable within a function with the specified value
declare -i {{variable}}="{{value}}"##Declare an integer variable with the specified value
declare -r {{variable}}="{{value}}"##Declare a readonly string variable with the specified value
declare {{variable}}="{{value}}"##Declare a string variable with the specified value
deemix --bitrate {{FLAC|MP3}} {{url}}##Download track / playlist at a specific bitrate
deemix --bitrate {{bitrate}} --path {{path}} {{url}}##Download to a specific path
deemix --portable --bitrate {{bitrate}} --path {{path}} {{url}}##Create a portable deemix config in the current directory
deemix {{https://www.deezer.com/us/track/00000000}}##Download a track or playlist
delta --hyperlinks {{path/to/old_file_or_directory}} {{path/to/new_file_or_directory}}##Compare, rendering commit hashes, file names, and line numbers as hyperlinks, according to the hyperlink spec for terminal emulators
delta --line-numbers {{path/to/old_file_or_directory}} {{path/to/new_file_or_directory}}##Compare files or directories, showing the line numbers
delta --list-languages##Display supported languages and associated file extensions
delta --no-gitconfig {{path/to/old_file_or_directory}} {{path/to/new_file_or_directory}}##Compare files or directories, ignoring any Git configuration settings
delta --show-config##Display the current settings
delta --side-by-side {{path/to/old_file_or_directory}} {{path/to/new_file_or_directory}}##Compare files or directories, showing the differences side by side
delta {{path/to/old_file_or_directory}} {{path/to/new_file_or_directory}}##Compare files or directories
deluge -c {{path/to/configuration_file}} {{url|magnet|path/to/file}}##Download a torrent using a specific configuration file
deluge -l {{path/to/log_file}} {{url|magnet|path/to/file}}##Download a torrent and output the log to a file
deluge -u {{gtk|web|console}} {{url|magnet|path/to/file}}##Download a torrent and launch the specified user interface
deluge {{url|magnet|path/to/file}}##Download a torrent
deluge-console##Start the interactive console interface
deluged -c {{path/to/configuration_file}}##Start the Deluge daemon using a specific configuration file
deluged -l {{path/to/log_file}}##Start the Deluge daemon and output the log to a file
deluged -p {{port}}##Start the Deluge daemon on a specific port
deluged##Start the Deluge daemon
deno install {{https://deno.land/std/examples/colors.ts}}##Install an executable script from a URL
deno run --allow-net {{path/to/file.ts}}##Run a file with network access enabled
deno run {{https://deno.land/std/examples/welcome.ts}}##Run a file from a URL
deno run {{path/to/file.ts}}##Run a JavaScript or TypeScript file
deno##Start a REPL (interactive shell)
dep deploy {{hostname}}##Deploy an application to a remote host
dep help {{command}}##Display help for a command
dep init##Interactively initialize deployer in the local path (use a framework template with `--template={{template}}`)
dep list##List commands
dep rollback##Rollback to the previous working release
dep run "{{command}}"##Run any arbitrary command on the remote hosts
dep ssh {{hostname}}##Connect to a remote host via ssh
desc instance {{instance_id}};##Describe the details of an instance
desc role {{role_name}};##Describe authorities of a role
desc {{table_name}} partition ({{partition_spec}});##Describe a partition
desc {{table_name}};##Describe a table
describepod##Describe a pod
detox --dry-run -r {{directory}}##Show how detox would rename all the files in a directory tree
detox -r {{directory}}##Remove spaces and other undesirable characters from all files in a directory tree
detox {{file}}##Remove spaces and other undesirable characters from a file's name
dexdump -d {{path/to/file.apk}}##Display the dis-assembled output of executable sections
dexdump -f {{path/to/file.apk}}##Display header information of DEX files contained in an APK file
dexdump -o {{path/to/file}} {{path/to/file.apk}}##Output results to a file
dexdump {{path/to/file.apk}}##Extract classes and methods from an APK file
dexter auth -i {{client_id}} -s {{client_secret}} --kube-config {{sample/config}}##Override the default kube config location
dexter auth -i {{client_id}} -s {{client_secret}}##Create and authenticate a user with Google OIDC
df -h##Display all filesystems and their disk usage in human-readable form
df -i##Display statistics on the number of free inodes
df -x {{squashfs}} -x {{tmpfs}}##Display filesystems but exclude the specified types
df {{path/to/file_or_directory}}##Display the filesystem and its disk usage containing the given file or directory
df##Display all filesystems and their disk usage
dfc -a##Display all filesystems including pseudo, duplicate and inaccessible filesystems
dfc -c never##Display filesystems without colour
dfc -t ext##Display filesystems containing "ext" in the filesystem type
dfc##Display filesystems and their disk usage in human-readable form with colours and graphs
dhcpwn --interface {{network_interface}} flood --count {{number_of_requests}}##Flood the network with IP requests
dhcpwn --interface {{network_interface}} sniff##Sniff local DHCP traffic
dict -D##List available databases
dict -I##Show information about the DICT server
dict -d {{database_name}} {{word}}##Look up a word in a specific database
dict -i {{database_name}}##Get information about a database
dict {{word}}##Look up a word in all available databases
diff --ignore-all-space {{old_file}} {{new_file}}##Compare files, ignoring white spaces
diff --recursive --brief {{old_directory}} {{new_directory}}##Compare directories, only showing the names of files that differ
diff --recursive {{old_directory}} {{new_directory}}##Compare directories recursively (shows names for differing files/directories as well as changes made to files)
diff --side-by-side {{old_file}} {{new_file}}##Compare files, showing the differences side by side
diff --text --unified --new-file {{old_file}} {{new_file}} > {{diff.patch}}##Create a patch file for Git from the differences of two text files, treating nonexistent files as empty
diff --unified {{old_file}} {{new_file}}##Compare files, showing the differences in unified format (as used by `git diff`)
diff <(sops -d {{path/to/secret1.enc.yaml}}) <(sops -d {{path/to/secret2.enc.yaml}})##Show the difference between two sops files
diff {{file1}} {{file2}} | diffstat -t##Display inserted, deleted and modified changes as a table
diff {{file1}} {{file2}} | diffstat##Display changes in a histogram
diff {{old_file}} {{new_file}}##Compare files (lists changes to turn `old_file` into `new_file`)
diff-pdf --output-diff={{path/to/diff.pdf}} {{path/to/a.pdf}} {{path/to/b.pdf}}##Compare PDFs, outputting a PDF with visually highlighted differences
diff-pdf --view {{path/to/a.pdf}} {{path/to/b.pdf}}##Compare PDFs, viewing differences in a simple GUI
diff-pdf {{path/to/a.pdf}} {{path/to/b.pdf}}##Compare PDFs, indicating changes using return codes (`0` = no difference, `1` = PDFs differ)
diffoscope --exclude {{pattern}} {{path/to/directory1}} {{path/to/directory2}}##Compare two directories excluding files with a name matching a specified pattern
diffoscope --exclude-directory-metadata {{auto|yes|no|recursive}} {{path/to/directory1}} {{path/to/directory2}}##Compare two directories and control whether directory metadata is considered
diffoscope --html {{path/to/outfile|-}} {{path/to/file1}} {{path/to/file2}}##Compare two files and write an HTML-report to a file (use `-` for stdout)
diffoscope --no-progress {{path/to/file1}} {{path/to/file2}}##Compare two files without displaying a progress bar
diffoscope {{path/to/file1}} {{path/to/file2}}##Compare two files
dig +noall +answer {{example.com}}##Get a detailed answer for a given domain (A records)
dig +nssearch {{example.com}}##Find authoritative name servers for the zone and display SOA records
dig +short {{example.com}} {{A|MX|TXT|CNAME|NS}}##Query a specific DNS record type associated with a given domain name
dig +short {{example.com}}##Lookup the IP(s) associated with a hostname (A records)
dig +trace {{example.com}}##Perform iterative queries and display the entire trace path to resolve a domain name
dig -x {{8.8.8.8}}##Perform a reverse DNS lookup on an IP address (PTR record)
dig @{{8.8.8.8}} {{example.com}}##Specify an alternate DNS server to query
dig {{example.com}} ANY##Get all types of records for a given domain name
dillo --fullwindow##Launch Dillo in full-screen mode
dillo --geometry {{width}}x{{height}}+{{x_position}}+{{y_position}}##Launch Dillo with a specific window size and screen location
dillo --help##Display help
dillo --version##Display version
dillo {{duckduckgo.com}}##Launch Dillo and open a specific URL
dillo {{path/to/file_or_directory}}##Launch Dillo and open a file or directory
dillo##Launch Dillo
dircolors --bourne-shell##Output commands for Bourne shell
dircolors --c-shell##Output commands for C shell
dircolors --print-data##View the default colors for file types and extensions
dircolors {{file}}##Output commands to set LS_COLOR using colors from a file
dircolors##Output commands to set LS_COLOR using default colors
direnv allow {{.}}##Grant direnv permission to load the `.envrc` present in the current directory
direnv deny {{.}}##Revoke the authorization to load the `.envrc` present in the current directory
direnv edit {{.}}##Edit the `.envrc` file in the default text editor and reload the environment on exit
direnv reload##Trigger a reload of the environment
direnv status##Print some debug status information
dirname --zero {{path/to/directory_a}} {{path/to/file_b}}##Delimit output with a NUL character instead of a newline (useful when combining with `xargs`)
dirname {{path/to/file_a}} {{path/to/directory_b}}##Calculate the parent directory of multiple paths
dirname {{path/to/file_or_directory}}##Calculate the parent directory of a given path
dirs +{{N}}##Display only the nth entry in the directory stack, starting at 0
dirs -c##Clear the directory stack
dirs -p##Display the directory stack with one entry per line
dirs##Display the directory stack with a space between each entry
dirsearch --url {{url}} --extensions {{php}} --cookie {{cookie}}##Scan a web server using a cookie
dirsearch --url {{url}} --extensions {{php}} --http-method {{HEAD}}##Scan a web server using the `HEAD` HTTP method
dirsearch --url {{url}} --extensions {{php}} --json-report {{path/to/report.json}}##Scan a web server, saving the results to a `.json` file
dirsearch --url {{url}} --extensions-list --wordlist {{path/to/url-paths.txt}}##Scan a web server for user-defined paths with common extensions
dirsearch --url {{url}} --extensions-list##Scan a web server for common paths with common extensions
dirsearch --url-list {{path/to/url-list.txt}} --extensions {{php}}##Scan a list of web servers for common paths with the `.php` extension
diskonaut --apparent-size {{path/to/directory}}##Show file sizes rather than their block usage on the disk
diskonaut --disable-delete-confirmation##Disable deletion confirmation
diskonaut {{path/to/directory}}##Start diskonaut in a specific directory
diskonaut##Start diskonaut in the current directory
distccd --daemon --allow {{ip_address|network_prefix}}##Start a daemon, accepting connections from a specific network address or address range
distccd --daemon --allow-private##Start a daemon, accepting connections from IPv4 private network ranges
distccd --daemon --jobs {{4}} --nice {{5}}##Start a daemon with a lowered priority that can run a maximum of 4 tasks at a time
distccd --daemon --zeroconf##Start a daemon and register it via mDNS/DNS-SD (Zeroconf)
distccd --daemon##Start a daemon with the default settings
div attach {{pid}}##Attach to a running process and begin debugging
dive build -t {{some_tag}}##Build an image and start analyzing it
dive {{your_image_tag}}##Analyze a Docker image
django-admin --version##Check the current version of Django
django-admin help {{command}}##Display more information for the given command
django-admin startapp {{app_name}}##Create a new app for the current project
django-admin startproject {{project_name}}##Create a new Django project
dlv connect {{ip_address}}##Connect to a headless debug server
dlv debug {{package}} {{arguments}}##Compile and begin debugging a specific package
dlv debug##Compile and begin debugging the main package in the current directory (by default, with no arguments)
dlv test##Compile a test binary and begin debugging the compiled program
dlv trace {{package}} --regexp '{{regular_expression}}'##Compile and begin tracing a program
do##Copy the highlighted difference from the other window to the current window
doas -C {{config_file}} {{command}}##Parse a config file and check if the execution of a command as another user is allowed
doas -L##Make `doas` request a password even after it was supplied earlier
doas -s##Launch the default shell as root
doas -u {{user}} {{command}}##Run a command as another user
doas {{command}}##Run a command as root
docker build --build-arg {{HTTP_PROXY=http://10.20.30.2:1234}} --build-arg {{FTP_PROXY=http://40.50.60.5:4567}} .##Build with custom build-time variables
docker build --file {{Dockerfile}} .##Build a docker image using a specific Dockerfile
docker build --no-cache --tag {{name:tag}} .##Do not use the cache when building the image
docker build --tag {{name:tag}} - < {{Dockerfile}}##Build a docker image with no build context
docker build --tag {{name:tag}} .##Build a docker image and tag it
docker build .##Build a docker image using the Dockerfile in the current directory
docker build {{github.com/creack/docker-firefox}}##Build a docker image from a Dockerfile at a specified URL
docker commit --author="{{author}}" {{container}} {{image}}:{{tag}}##Create an image with a specific author in the metadata
docker commit --change="CMD {{command}}" {{container}} {{image}}:{{tag}}##Apply a `CMD` Dockerfile instruction to the created image
docker commit --change="ENV {{name}}={{value}}" {{container}} {{image}}:{{tag}}##Apply an `ENV` Dockerfile instruction to the created image
docker commit --help##Display help
docker commit --message="{{comment}}" {{container}} {{image}}:{{tag}}##Create an image with a specific comment in the metadata
docker commit --pause={{false}} {{container}} {{image}}:{{tag}}##Create an image without pausing the container during commit
docker commit {{container}} {{image}}:{{tag}}##Create an image from a specific container
docker container commit {{container_name}}##Create a new image from a container's changes
docker container export {{container_name}}##Export a container's filesystem as a tar archive
docker container inspect {{container_name}}##Display detailed information on one or more containers
docker container kill {{container_name}}##Kill one or more running containers
docker container ls##List currently running Docker containers
docker container pause {{container_name}}##Pause all processes within one or more containers
docker container start {{container1_name}} {{container2_name}}##Start one or more stopped containers
docker container stop {{container_name}}##Stop one or more running containers
docker cp --follow-link {{path/to/symlink_on_host}} {{container_name}}:{{path/to/file_or_directory_in_container}}##Copy a file or directory from the host to a container, following symlinks (copies the symlinked files directly, not the symlinks themselves)
docker cp {{container_name}}:{{path/to/file_or_directory_in_container}} {{path/to/file_or_directory_on_host}}##Copy a file or directory from a container to the host
docker cp {{path/to/file_or_directory_on_host}} {{container_name}}:{{path/to/file_or_directory_in_container}}##Copy a file or directory from the host to a container
docker exec --detach {{container_name}} {{command}}##Run a command in the background (detached) on a running container
docker exec --interactive --detach {{container_name}} {{command}}##Run a command in background on existing container but keep stdin open
docker exec --interactive --tty --env {{variable_name}}={{value}} {{container_name}} {{/bin/bash}}##Set an environment variable in a running Bash session
docker exec --interactive --tty {{container_name}} {{/bin/bash}}##Enter an interactive shell session on an already-running container
docker exec --interactive -tty --workdir {{path/to/directory}} {{container_name}} {{command}}##Select the working directory for a given command to execute into
docker exec --user {{user}} {{container_name}} {{command}}##Run a command as a specific user
docker exec -it {{container_name}} {{sh}}##Open a shell inside a running container
docker image history {{image}}##Show the history of a local Docker image
docker image ls##List local Docker images
docker image prune --all##Delete all unused images (not just those without a tag)
docker image prune##Delete unused local Docker images
docker images "{{*name*}}"##List images that contain a substring in their name
docker images --all##List all Docker images including intermediates
docker images --filter dangling=true##List all Docker images not used by any container
docker images --quiet##List the output in quiet mode (only numeric IDs)
docker images##Display the list of already downloaded images
docker images##List all Docker images
docker inspect --format='{{.Config.Image}}' {{container}}##Display the image name of the container
docker inspect --format='{{.LogPath}}' {{container}}##Display the path to the container's log file
docker inspect --format='{{json .Config}}' {{container}}##Display the configuration information as JSON
docker inspect --format='{{range $p, $conf := .NetworkSettings.Ports}} {{$p}} -> {{(index $conf 0).HostPort}} {{end}}' {{container}}##Display all port bindings
docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' {{container}}##Display a container's IP address
docker inspect {{container|image|ID}}##Display information about a container, image, or volume using a name or ID
docker inspect##Show help
docker login --username {{username}} --password {{password}} {{server}}##Log into a registry with username and password
docker login --username {{username}}##Log into a registry with a specific username (user will be prompted for a password)
docker login##Interactively log into a registry
docker logs -f {{container_name}}##Fetch and follow the logs of a container
docker logs -f {{container_name}}##Print logs and follow them
docker logs -t {{container_name}}##Print logs and append them with timestamps
docker logs {{container_name}} --tail {{5}}##Print last 5 lines
docker logs {{container_name}} --until {{time}}##Print logs from a certain point in time of container execution (i.e. 23m, 10s, 2013-01-02T132337)
docker logs {{container_name}}##Print logs from a container
docker network connect {{network_name}} {{container_name|ID}}##Connect a container to a network using a name or ID
docker network create --driver {{driver_name}} {{network_name}}##Create a user-defined network
docker network disconnect {{network_name}} {{container_name|ID}}##Disconnect a container from a network
docker network inspect {{network_name}}##Display detailed information of a space-separated list of networks
docker network ls##List all available and configured networks on docker daemon
docker network prune##Remove all unused (not referenced by any container) networks
docker network rm {{network_name}}##Remove a space-separated list of unused networks
docker ps --all --filter="exited={{code}}"##Filter containers by exit status code
docker ps --all##List all docker containers (running and stopped)
docker ps --all##List all docker containers (running and stopped)
docker ps --filter "ancestor={{image}}:{{tag}}"##Filter containers that share a given image as an ancestor
docker ps --filter="name={{name}}"##Filter containers that contain a substring in their name
docker ps --filter="status={{status}}"##Filter containers by status (created, running, removing, paused, exited and dead)
docker ps --filter="volume={{path/to/directory}}" --format "table {{.ID}}\t{{.Image}}\t{{.Names}}\t{{.Mounts}}"##Filter containers that mount a specific volume or have a volume mounted in a specific path
docker ps --latest##Show the latest created container (includes all states)
docker ps##List currently running docker containers
docker pull {{aws_account_id}}.dkr.ecr.{{region}}.amazonaws.com/{{container_name}}:{{tag}}##Pull an image from a repository
docker pull {{image}}##Pull an image from a docker registry
docker push {{aws_account_id}}.dkr.ecr.{{region}}.amazonaws.com/{{container_name}}:{{tag}}##Push an image to a repository
docker rm {{container_name}}##Remove a stopped container
docker rmi --force {{image}}##Force remove an image
docker rmi --no-prune {{image}}##Remove an image without deleting untagged parents
docker rmi {{image1 image2 ...}}##Remove one or more images given their names
docker rmi##Show help
docker run --entrypoint {{command}} {{image}}##Run command in a new container overwriting the entrypoint of the image
docker run --name {{container_name}} {{image}}##Start a container from an image, with a custom name
docker run --network {{network}} {{image}}##Run command in a new container connecting it to a network
docker run --rm -it {{image}} {{command}}##Run command in a one-off container in interactive mode and pseudo-TTY
docker run -d {{image}} {{command}}##Run command in a new container in background and display its ID
docker run -e '{{variable}}={{value}}' -e {{variable}} {{image}} {{command}}##Run command in a new container with passed environment variables
docker run -p {{host_port}}:{{container_port}} {{image}} {{command}}##Run command in a new container with published ports
docker run -v {{/path/to/host_path}}:{{/path/to/container_path}} {{image}} {{command}}##Run command in a new container with bind mounted volumes
docker run {{image:tag}} {{command}}##Run command in a new container from a tagged image
docker save --output {{path/to/file.tar}} {{image_name:tag1 image_name:tag2 ...}}##Cherry-pick particular tags of an image to save
docker save --output {{path/to/file.tar}} {{image_name}}##Save all tags of the image
docker save --output {{path/to/file.tar}} {{image}}:{{tag}}##Save an image to a tar archive
docker save {{image}}:{{tag}} > {{path/to/file.tar}}##Save an image by redirecting stdout to a tar archive
docker secret create {{secret_name}} {{path/to/file}}##Create a new secret from a file
docker secret inspect --pretty {{secret_name1 secret_name2 ...}}##Display detailed information on one or multiple secrets in a human friendly format
docker secret ls##List all secrets
docker secret rm {{secret_name1 secret_name2 ...}}##Remove one or more secrets
docker service create --name {{service_name}} {{image}}:{{tag}}##Create a new service
docker service inspect {{service_name|ID}}##Display detailed information of a space-separated list of services
docker service ls##List the services on a docker daemon
docker service ps {{service_name|ID}}##List the tasks of a space-separated list of services
docker service rm {{service_name|ID}}##Remove a space-separated list of services
docker service scale {{service_name}}={{count_of_replicas}}##Scale to a specific number of replicas for a space-separated list of services
docker start --attach {{container}}##Start a container, attaching stdout and stderr and forwarding signals
docker start {{container(s)}}##Start one or more space-separated containers
docker start {{container}}##Start a docker container
docker start##Show help
docker stats --all##Display statistics for all containers (both running and stopped)
docker stats --format "{{.Name}}:\t{{.CPUPerc}}"##Change the columns format to display container's CPU usage percentage
docker stats --no-stream##Disable streaming stats and only pull the current stats
docker stats {{container_name}}##Display a live stream of statistics for a space-separated list of containers
docker stats##Display a live stream for the statistics of all running containers
docker swarm ca --rotate##Rotate the current CA certificate and display the new certificate
docker swarm ca##Display the current CA certificate in PEM format
docker swarm init##Initialize a swarm cluster
docker swarm join --token {{token}} {{manager_node_url:2377}}##Join a new node to the cluster
docker swarm join-token {{worker|manager}}##Display the token to join a manager or a worker
docker swarm leave##Remove a worker from the swarm (run inside the worker node)
docker swarm update --cert-expiry {{hours}}h{{minutes}}m{{seconds}}s##Change the valid period for node certificates
docker system df --verbose##Show detailed information on disk usage
docker system df##Show docker disk usage
docker system events --filter 'type=container' --format '{{json .}}'##Display real-time events from containers streamed as valid JSON Lines
docker system events##Display real-time events from the Docker daemon
docker system info##Display system-wide information
docker system prune --filter="until={{hours}}h{{minutes}}m"##Remove unused data created more than a specified amount of time in the past
docker system prune##Remove unused data
docker system##Show help
docker tag {{container_name}}:{{tag}} {{aws_account_id}}.dkr.ecr.{{region}}.amazonaws.com/{{container_name}}:{{tag}}##Tag a local image for ECR
docker volume create --label {{label}} {{volume_name}}##Create a volume with a specific label
docker volume create --opt {{type}}={{tmpfs}} --opt {{device}}={{tmpfs}} --opt {{o}}={{size=100m,uid=1000}} {{volume_name}}##Create a `tmpfs` volume a size of 100 MiB and an uid of 1000
docker volume create {{volume_name}}##Create a volume
docker volume inspect {{volume_name}}##Display information about a volume
docker volume ls##List all volumes
docker volume prune##Remove all unused local volumes
docker volume rm {{volume_name}}##Remove a volume
docker volume {{subcommand}} --help##Display help for a subcommand
docker {{start|stop}} {{container_name}}##Start or stop an existing container
docker-compose --file {{path/to/file}} up##Start all containers using an alternate compose file
docker-compose down --rmi all --volumes##Stop and remove all containers, networks, images, and volumes
docker-compose logs --follow {{container_name}}##Follow logs for a specific container
docker-compose logs --follow##Follow logs for all containers
docker-compose ps##List all running containers
docker-compose stop##Stop all running containers
docker-compose up --build##Start all containers, rebuild if necessary
docker-compose up -d##Create and start all containers in the background using a `docker-compose.yml` file from the current directory
docker-machine create {{name}}##Create a new docker machine with specific name
docker-machine inspect {{name}}##Inspect information about a machine
docker-machine ls##List currently running docker machines
docker-machine start {{name}}##Start a machine
docker-machine status {{name}}##Get the status of a machine
docker-machine stop {{name}}##Stop a machine
docker-slim build {{image:tag}}##Analyze and generate an optimized Docker image
docker-slim lint --target {{path/to/Dockerfile}}##Lint a Dockerfile
docker-slim xray --target {{image:tag}}##Analyze Docker layers from a specific image
docker-slim {{subcommand}} --help##Display help for a subcommand
docker-slim##Start DockerSlim on interactive mode
doctl account --help##Display help
doctl account get##Display account info
doctl account ratelimit##Show the hourly API limit, progress towards it, and when the rate limit resets
doctl apps create##Create an app
doctl apps create-deployment {{app_id}}##Create a deployment for a specific app
doctl apps delete {{app_id}}##Delete an app interactively
doctl apps get##Get an app
doctl apps list##List all apps
doctl apps list-deployments {{app_id}}##List all deployments from a specific app
doctl apps logs {{app_id}}##Get logs from a specific app
doctl apps update {{app_id}} --spec {{path/to/spec.yml}}##Update a specific app with a given app spec
doctl auth --help##Show available commands
doctl auth init --context {{token_label}}##Open a prompt to enter an API token and label its context
doctl auth list##List authentication contexts (API tokens)
doctl auth remove --context {{token_label}}##Remove a stored authentication context (API token)
doctl auth switch --context {{token_label}}##Switch contexts (API tokens)
doctl balance get --access-token {{access_token}}##Get the balance of an account associated with an access token
doctl balance get --context##Get the balance of an account associated with a specified context
doctl balance get##Get balance of the account associated with the current context
doctl compute droplet create --region {{region}} --image {{os_image}} --size {{vps_type}} {{droplet_name}}##Create a droplet
doctl compute droplet delete {{droplet_id|droplet_name}}##Delete a droplet
doctl compute droplet list##List droplets
doctum parse##Parse a project
doctum render##Render a project
doctum update --only-version={{version}}##Parse and render only a specific version of a project
doctum update {{path/to/config.php}}##Parse and render a project using a specific configuration
doctum update##Parse then render a project
dog --query {{example.com}} --type MX --nameserver {{1.1.1.1}} --tcp##Query the MX records type associated with a given domain name over TCP using explicit arguments
dog {{example.com}} --https @{{https://cloudflare-dns.com/dns-query}}##Lookup the IP(s) associated with a hostname (A records) using DNS over HTTPS (DoH)
dog {{example.com}} MX @{{1.1.1.1}} --tcp##Query over TCP rather than UDP
dog {{example.com}} MX @{{1.1.1.1}}##Specify a specific DNS server to query (e.g. Cloudflare)
dog {{example.com}} MX##Query the MX records type associated with a given domain name
dog {{example.com}}##Lookup the IP(s) associated with a hostname (A records)
dokku apps##List running apps
dokku apps:create {{app_name}}##Create an app
dokku apps:destroy {{app_name}}##Remove an app
dokku plugin:install {{full_repo_url}}##Install plugin
dokku {{db}}:link {{db_name}} {{app_name}}##Link database to an app
dolt add --all##Stage all tables
dolt add {{table}}##Add a table to the list of staged tables (stage a table)
dolt blame --help##View help
dolt blame {{commit}} {{table}}##Display the latest commits for each row of a table when the specified commit was made
dolt blame {{table}}##Display the latest commit for each row of a table
dolt branch --all##List all local and remote branches
dolt branch --copy {{branch_name1}} {{branch_name2}}##Duplicate a branch
dolt branch --delete {{branch_name}}##Delete a branch
dolt branch --move {{branch_name1}} {{branch_name2}}##Rename a branch
dolt branch --show-current##Display the name of the current branch
dolt branch {{branch_name}} {{commit}}##Create a new branch with the specified commit as the latest
dolt branch {{branch_name}}##Create a new branch based on the current branch
dolt branch##List local branches (current branch is highlighted by `*`)
dolt checkout -b {{branch_name}} {{commit}}##Create new branch based on a specified commit and switch to it
dolt checkout -b {{branch_name}}##Create new branch and switch to it
dolt checkout {{branch_name}}##Switch to a branch
dolt checkout {{table}}##Revert unstaged changes to a table
dolt clone --aws-creds-file {{credentials_file}} {{repository_url}}##Clone a repository, using an AWS credentials file
dolt clone --aws-creds-profile {{profile_name}} {{repository_url}}##Clone a repository, using an AWS credentials profile (uses the default profile if none is provided)
dolt clone --aws-creds-type {{credentials_type}} {{repository_url}}##Clone a repository, using an AWS credentials type
dolt clone --aws-region {{region_name}} {{repository_url}}##Clone a repository, using an AWS region (uses the profile's default region if none is provided)
dolt clone --branch {{branch_name}} {{repository_url}}##Clone an existing repository only fetching a specific branch (defaults to all branches)
dolt clone --remote {{remote_name}} {{repository_url}}##Clone an existing repository and add a specific remote (defaults to origin)
dolt clone {{repository_url}} {{path/to/directory}}##Clone an existing repository into a specific directory (defaults to the repository name)
dolt commit --all##Stage all unstaged changes to tables before committing
dolt commit --allow-empty##Allow creating an empty commit, with no changes
dolt commit --author "{{author_name}} <{{author_email}}>"##Use the specified author for the commit
dolt commit --date "{{2021-12-31T00:00:00}}"##Use the specified ISO 8601 commit date (defaults to current date and time)
dolt commit --force##Ignore foreign key warnings
dolt commit --message "{{commit_message}}"##Commit all staged changes with the specified message
dolt commit##Commit all staged changes, opening the editor specified by `$EDITOR` to enter the commit message
dolt config --add {{name}} {{value}}##Modify the value of a local configuration variable, creating it if it doesn't exist
dolt config --get {{name}}##Display the value of a local or global configuration variable
dolt config --global --add {{name}} {{value}}##Modify the value of a global configuration variable, creating it if it doesn't exist
dolt config --global --unset {{name}}##Delete a global configuration variable
dolt config --list##List all local and global configuration options and their values
dolt config --unset {{name}}##Delete a local configuration variable
dolt help##List available subcommands
dolt {{subcommand}}##Execute a dolt subcommand
dot -?##Display help
dot -T {{format}} -O {{path/to/input.gv}}##Render the output in `ps`, `pdf`, `svg`, `fig`, `png`, `gif`, `jpg`, `json`, or `dot` format
dot -T {{png}} -O {{path/to/input.gv}}##Render a `png` image with a filename based on the input filename and output format (uppercase -O)
dot -T {{svg}} -o {{path/to/image.svg}} {{path/to/input.gv}}##Render a `svg` image with the specified output filename (lowercase -o)
dot {{path/to/input.gv}} | edgepaint | dot -T {{png}} > {{path/to/output.png}}##Lay out a graph and colorize its edges, then convert to a PNG image
dot {{path/to/input.gv}} | gvcolor | dot -T {{png}} > {{path/to/output.png}}##Lay out a graph and colorize it, then convert to a PNG image
dot {{path/to/input.gv}} | mingle | dot -T {{png}} > {{path/to/output.png}}##Perform layout, bundling, and output to a picture with one command
dotnet build --configuration {{Release}}##Compile in release mode
dotnet build --no-restore##Compile without restoring dependencies
dotnet build --output {{path/to/directory}}##Specify the output directory
dotnet build --runtime {{runtime_identifier}}##Compile for a specific runtime
dotnet build --verbosity {{quiet|minimal|normal|detailed|diagnostic}}##Compile with a specific verbosity level
dotnet build {{path/to/project_or_solution}}##Compile a .NET project or solution in debug mode
dotnet build##Compile the project or solution in the current directory
dotnet ef database drop##Drop the database
dotnet ef database update {{migration}}##Update the database to a specified migration
dotnet ef dbcontext list##List available `DbContext` types
dotnet ef dbcontext scaffold {{connection_string}} {{provider}}##Generate code for a `DbContext` and entity types for a database
dotnet ef migrations add {{name}}##Add a new migration
dotnet ef migrations list##List available migrations
dotnet ef migrations remove##Remove the last migration, rolling back the code changes that were done for the latest migration
dotnet ef migrations script {{from_migration}} {{to_migration}}##Generate a SQL script from migrations range
dotnet new {{template_short_name}}##Initialize a new .NET project
dotnet publish --configuration Release {{path/to/project_file}}##Compile a .NET project in release mode
dotnet publish --no-restore {{path/to/project_file}}##Compile a .NET project without restoring dependencies
dotnet publish --output {{path/to/directory}} {{path/to/project_file}}##Specify the output directory
dotnet publish --runtime {{runtime_identifier}} -p:PublishSingleFile=true {{path/to/project_file}}##Package the application into a platform-specific single-file executable
dotnet publish --self-contained true --runtime {{runtime_identifier}} -p:PublishTrimmed=true {{path/to/project_file}}##Trim unused libraries to reduce the deployment size of an application
dotnet publish --self-contained true --runtime {{runtime_identifier}} {{path/to/project_file}}##Publish the .NET Core runtime with your application for the specified runtime
dotnet restore --force##Force all dependencies to be resolved even if the last restore was successful
dotnet restore --ignore-failed-sources##Restore dependencies using package source failures as warnings
dotnet restore --no-cache##Restore dependencies without caching the HTTP requests
dotnet restore --verbosity {{quiet|minimal|normal|detailed|diagnostic}}##Restore dependencies with a specific verbosity level
dotnet restore {{path/to/project_or_solution}}##Restore dependencies for a .NET project or solution in a specific location
dotnet restore##Restore NuGet packages
dotnet restore##Restore dependencies for a .NET project or solution in the current directory
dotnet run##Build and execute the .NET project in the current directory
dotnet tool --help##Display help
dotnet tool install --global {{dotnetsay}}##Install a global tool (don't use `--global` for local tools)
dotnet tool list --global##List installed global tools (don't use `--global` for local tools)
dotnet tool restore##Install tools defined in the local tool manifest
dotnet tool search {{search_term}}##Search tools in NuGet
dotnet tool uninstall --global {{tool_name}}##Uninstall a global tool (don't use `--global` for local tools)
dotnet tool update --global {{tool_name}}##Update a specific global tool (don't use `--global` for local tools)
dotnet {{path/to/application.dll}}##Run a packaged dotnet application (only needs the runtime, the rest of the commands require the .NET Core SDK installed)
doxygen -g {{path/to/config_file}}##Generate a template configuration file
doxygen -g##Generate a default template configuration file `Doxyfile`
doxygen {{path/to/config_file}}##Generate documentation using an existing configuration file
dp##Copy the highlighted difference from the current window to the other window
drill -TD {{example.com}}##Perform DNSSEC trace from root servers down to a domain name
drill -s dnskey {{example.com}}##Show DNSKEY record(s) for a domain name
drill -x {{8.8.8.8}}##Perform a reverse DNS lookup on an IP address (PTR record)
drill any {{example.com}}##Get all types of records for a given domain name
drill mx {{example.com}}##Lookup the mail server(s) associated with a given domain name (MX record)
drill {{example.com}} @{{8.8.8.8}}##Specify an alternate DNS server to query
drill {{example.com}}##Lookup the IP(s) associated with a hostname (A records)
drop function {{func_name}};##Delete a function
drop resource {{resource_name}};##Delete resource
drop table {{table_name}};##Delete table
drupal cache:rebuild##Clear all caches
drupal module:install {{module_name}}##Install a module
drupal module:uninstall {{module_name}}##Uninstall a module
drupal site:status##View current Drupal installation status
drupal-check --analysis {{path/to/directory}}##Perform static analysis to detect bad coding practices
drupal-check --exclude-dir {{path/to/excluded_directory}},{{path/to/excluded_files/*.php}} {{path/to/directory}}##Check the code excluding a comma-separated list of directories
drupal-check --no-progress {{path/to/directory}}##Don't show a progress bar
drupal-check {{path/to/directory}}##Check the code in a specific directory for deprecations
drush cc css-js##Clear CSS and JavaScript caches
drush cr##Clear all caches
drush en {{foo}}##Enable module "foo"
drush pmu {{foo}}##Uninstall module "foo"
du -ah {{path/to/directory}}##List the human-readable sizes of a directory and of all the files and directories within it
du -ch {{*/*.jpg}}##List the human-readable size of all `.jpg` files in subdirectories of the current directory, and show a cumulative total at the end
du -h --max-depth=N {{path/to/directory}}##List the human-readable sizes of a directory and any subdirectories, up to N levels deep
du -h {{path/to/directory}}##List the sizes of a directory and any subdirectories, in human-readable form (i.e. auto-selecting the appropriate unit for each size)
du -s * | numfmt --to={{iec}} --format="{{%-5f}}"##Convert to IEC units, pad with 5 characters, left aligned
du -sh {{path/to/directory}}##Show the size of a single directory, in human-readable units
du -{{b|k|m}} {{path/to/directory}}##List the sizes of a directory and any subdirectories, in the given unit (B/KiB/MiB)
dua --apparent-size##Display apparent size instead of disk usage
dua --count-hard-links##Count hard-linked files each time they are seen
dua --format {{metric|binary|bytes|GB|GiB|MB|MiB}}##Format printing byte counts
dua --threads {{count}}##Set the number of threads to be used
dua aggregate##Aggregate the consumed space of one or more directories or files
dua interactive##Launch the terminal user interface
dua {{path/to/directory}}##Analyze specific directory
duc gui {{/usr}}##Start the graphical interface to explore the file system using sunburst graphs
duc index {{/usr}}##Index the /usr directory, writing to the default database location ~/.duc.db
duc info##Dump database info
duc ls -Fg -R {{/usr/local}}##List all files and directories under /usr/local using treeview recursively
duc ls -Fg {{/usr/local}}##List all files and directories under /usr/local, showing relative file sizes in a [g]raph
duc ui {{/usr}}##Run the ncurses console interface to explore the file system
dumpcap --interface {{1}} -w {{path/to/output_file.pcapng}} --ring-buffer filesize:{{500000}} --ring-buffer files:{{10}}##Write to a ring buffer with a specific max file limit of a specific size
dumpcap --interface {{1}} -w {{path/to/output_file.pcapng}}##Capture packets to a specific location
dumpcap --interface {{1}}##Capture packets on a specific interface
dumpcap --list-interfaces##Display available interfaces
dune build##Build all targets
dune clean##Clean up the workspace
dune runtest##Run all tests
dune utop##Start the utop REPL with compiled modules automatically loaded into it, to remove the need to load them by hand
duplicacy add {{storage_name}} {{snapshot_id}} {{storage_url}}##Add another storage to be used for the existing repository
duplicacy backup##Save a snapshot of the repository to the default storage
duplicacy check##Check the integrity of snapshots
duplicacy init -e {{snapshot_id}} {{sftp://user@192.168.2.100/path/to/storage/}}##Use current directory as the repository, initialize a SFTP storage and encrypt the storage with a password
duplicacy list##List snapshots of current repository
duplicacy prune -keep {{n:m}}##Prune revisions, keeping one revision every `n` days for all revisions older than `m` days
duplicacy prune -r {{revision}}##Prune a specific revision of snapshot
duplicacy restore -r {{revision}}##Restore the repository to a previously saved snapshot
duplicity --full-if-older-than {{1M}} --use-new-style s3://{{bucket_name[/prefix]}}##Backup a directory to Amazon S3, doing a full backup every month
duplicity collection-status "file://{{absolute/path/to/backup/directory}}"##List the available backups
duplicity list-current-files --time {{YYYY-MM-DD}} scp://{{user@hostname}}/path/to/backup/dir##List the files in a backup stored on a remote machine, via ssh
dust --depth {{3}}##Display information for the current directory, up to 3 levels deep
dust --ignore-directory {{file_or_directory_name}}##Ignore all files and directories with a specific name
dust --no-percent-bars##Do not display percent bars and percentages
dust --number-of-lines {{30}}##Display 30 directories (defaults to 21)
dust --reverse##Display the biggest directories at the top in descending order
dust {{path/to/directory1}} {{path/to/directory2}}##Display information for a space-separated list of directories
dust##Display information for the current directory
dvc --help##Display general help
dvc --version##Check the DVC version
dvc add --file {{custom_name.dvc}} {{path/to/file}}##Add a target file with a custom `.dvc` filename
dvc add --recursive {{path/to/directory}}##Recursively add all the files in a given target directory
dvc add {{path/to/directory}}##Add a target directory to the index
dvc add {{path/to/file}}##Add a single target file to the index
dvc checkout {{target}}##Checkout the latest version of a specified target
dvc checkout##Checkout the latest version of all target files and directories
dvc commit --recursive {{path/to/directory}}##Recursively commit all DVC-tracked files in a directory
dvc commit {{target}}##Commit changes to a specified DVC-tracked target
dvc commit##Commit changes to all DVC-tracked files and directories
dvc config --local/global/system {{key}} {{value}}##Set a local, global, or system level config value
dvc config --unset core.remote##Unset the project's default remote
dvc config --unset {{key}}##Unset a project level config value for a given key
dvc config core.remote {{remote_name}}##Set the project's default remote
dvc config core.remote##Get the name of the default remote
dvc config {{key}} {{value}}##Set the config value for a key on a project level
dvc config {{key}}##Get the config value for a specified key for the current project
dvc dag --dot > {{path/to/pipeline.dot}}##Export the pipeline in the dot format
dvc dag {{target}}##Visualize the pipeline stages up to a specified target stage
dvc dag##Visualize the entire pipeline
dvc destroy --force##Force destroy the current project
dvc destroy##Destroy the current project
dvc diff --show-hash {{commit}}##Compare DVC tracked files, along with their latest hash
dvc diff --show-json --show-hash {{commit}}##Compare DVC tracked files, displaying the output as JSON
dvc diff --show-md --show-hash {{commit}}##Compare DVC tracked files, displaying the output as Markdown
dvc diff {{commit_hash/tag/branch}}##Compare DVC tracked files from different Git commits, tags, and branches w.r.t the current workspace
dvc diff {{revision_b}} {{revision_a}}##Compare the changes in DVC tracked files from 1 Git commit to another
dvc fetch --all-branches --all-tags##Fetch changes for all branch and tags
dvc fetch --all-commits##Fetch changes for all commits
dvc fetch --remote {{remote_name}}##Fetch changes from a specific remote upstream repository
dvc fetch {{target/s}}##Fetch the latest changes for a specific target/s
dvc fetch##Fetch the latest changes from the default remote upstream repository (if set)
dvc freeze {{stage_name_a}} [{{stage_name_b}} ...]##Freeze 1 or more specified stages
dvc gc --all-branches --all-tags --all-commits##Garbage collect from the cache, keeping only versions referenced by branch, tags, and commits
dvc gc --all-commits --cloud --remote {{remote_name}}##Garbage collect from the cache, including a specific cloud remote storage
dvc gc --all-commits --cloud##Garbage collect from the cache, including the default cloud remote storage (if set)
dvc gc --workspace##Garbage collect from the cache, keeping only versions referenced by the current workspace
dvc init --no-scm##Initialize DVC without Git
dvc init##Initialize a new local repository
dvc unfreeze {{stage_name_a}} [{{stage_name_b}} ...]##Unfreeze 1 or more specified stages
dvc {{subcommand}} --help##Display help about a specific subcommand
dvc {{subcommand}}##Execute a DVC subcommand
dwebp {{input.webp}} -o {{output.png}} -crop {{x_pos}} {{y_pos}} {{width}} {{height}} -scale {{width}} {{height}}##Convert a `webp` file, but also crop and scale at the same time
dwebp {{path/to/input.webp}} -bmp|-tiff|-pam|-ppm|-pgm|-yuv -o {{path/to/output}}##Convert a `webp` file into a specific filetype
dwebp {{path/to/input.webp}} -o {{path/to/output.png}} -flip##Convert a `webp` file and flip the output
dwebp {{path/to/input.webp}} -o {{path/to/output.png}} -mt##Convert a `webp` file, using multi-threading if possible
dwebp {{path/to/input.webp}} -o {{path/to/output.png}} -nofilter##Convert a `webp` file and don't use in-loop filtering to speed up the decoding process
dwebp {{path/to/input.webp}} -o {{path/to/output.png}}##Convert a `webp` file into a `png` file
e##Edit current file
e##Edit number in the current cell
ebook-convert {{source}} {{destination}} --level1-toc="//h:h1" --level2-toc="//h:h2" --level3-toc="//h:h3" --title={{title}} --authors={{author}}##Convert Markdown or HTML to e-book with TOC, title and author
ebook-convert {{source}} {{destination}}##Convert an e-book into another format
echo  "{{&lt;a1&gt;}}" | xml unescape##Unescape special XML characters from stdin
echo  "{{<a1>}}" | xml escape##Escape special XML characters from stdin
echo "example" | tee -a {{path/to/file}}##Append to the given files, do not overwrite
echo "example" | tee >(xargs mkdir) >(wc -c)##Create a directory called "example", count the number of characters in "example" and write "example" to the terminal
echo "example" | tee {{/dev/tty}} | {{xargs printf "[%s]"}}##Print standard input to the terminal, and also pipe it into another program for further processing
echo "example" | tee {{path/to/file}}##Copy standard input to each file, and also to standard output
echo "hello" | rev##Reverse the text string "hello"
echo "test" | lp##Print the output of a command to the default printer (see `lpstat` command)
echo "{{./make_db_backup.sh}}" | at 1000##Execute a command from standard input at 1000 AM today
echo "{{./make_db_backup.sh}}" | batch##Execute a command from standard input
echo "{{Echo( Deriv(x)Cos(1/x) );}}" | yacas -p -c /dev/stdin##Execute and print the result of one statement, then exit
echo "{{GET https://example.com}}" | vegeta attack -duration={{30s}} -rate={{10}}##Launch an attack with a rate of 10 requests per second
echo "{{GET https://example.com}}" | vegeta attack -duration={{30s}} | vegeta plot > {{path/to/results.html}}##Launch an attack and plot the results on a graph (latency over time)
echo "{{GET https://example.com}}" | vegeta attack -duration={{30s}} | vegeta report##Launch an attack and display a report
echo "{{GET https://example.com}}" | vegeta attack -duration={{30s}}##Launch an attack lasting 30 seconds
echo "{{GET https://example.com}}" | vegeta attack -insecure -duration={{30s}}##Launch an attack on a server with a self-signed HTTPS certificate
echo "{{Hello World}}" >> {{file.txt}}##Append a message to the file
echo "{{Hello World}}"##Print a text message. Note quotes are optional
echo "{{Hello world}}" | msmtp --account={{account_name}} {{to@example.org}}##Send an email using a specific account configured in `~/.msmtprc`
echo "{{Hello world}}" | msmtp --host={{localhost}} --port={{999}} --from={{from@example.org}} {{to@example.org}}##Send an email without a configured account. The password should be specified in the `~/.msmtprc` file
echo "{{Hello world}}" | msmtp {{to@example.org}}##Send an email using the default account configured in `~/.msmtprc`
echo "{{Hello, World!}}" | nms##Decrypt text after a keystroke
echo "{{My path is $PATH}}"##Print a message with environment variables
echo "{{\{\{Generator\}\}}}" | fakedata##Generate data using a custom output template (the first letter of generator names must be capitalized)
echo "{{content}}" | mailx -s "{{subject}}" {{to_addr}}##Send mail with content passed from another command
echo "{{data}}" | qr --error-correction={{L|M|Q|H}}##Specify the error correction level (defaults to M)
echo "{{data}}" | qr##Generate a QR code
echo "{{digraph {this -> that} }}" | circo -T {{gif}} > {{path/to/image.gif}}##Render a `gif` image using stdin and stdout
echo "{{digraph {this -> that} }}" | dot -T {{gif}} > {{path/to/image.gif}}##Render a `gif` image using stdin and stdout
echo "{{digraph {this -> that} }}" | fdp -T {{gif}} > {{path/to/image.gif}}##Render a `gif` image using stdin and stdout
echo "{{digraph {this -> that} }}" | osage -T {{gif}} > {{path/to/image.gif}}##Render a `gif` image using stdin and stdout
echo "{{digraph {this -> that} }}" | patchwork -T {{gif}} > {{path/to/image.gif}}##Render a `gif` image using stdin and stdout
echo "{{digraph {this -> that} }}" | sfdp -T {{gif}} > {{path/to/image.gif}}##Render a `gif` image using stdin and stdout
echo "{{digraph {this -> that} }}" | twopi -T {{gif}} > {{path/to/image.gif}}##Render a `gif` image using stdin and stdout
echo "{{file1}} {{file2}} {{file3}}" | cpio -o > {{archive.cpio}}##Take a list of file names from standard input and add them [o]nto an archive in cpio's binary format
echo "{{graph {this -- that} }}" | neato -T {{gif}} > {{path/to/image.gif}}##Render a `gif` image using stdin and stdout
echo "{{hello, world}}" | cowsay##Print an ASCII cow saying text from stdin
echo "{{password}}" | docker login --username {{username}} --password-stdin##Log into a registry with password from stdin
echo "{{secret_value}}" | secrethub write {{path/to/secret}}##Store a value supplied on stdin as a new or updated secret
echo "{{text}}" | md5sum##Calculate a MD5 checksum from the standard input
echo "{{url=http://example.com}}" | git credential approve##Send credential information to all configured credential helpers to store for later use
echo "{{url=http://example.com}}" | git credential fill##Display credential information, retrieving the username and password from configuration files
echo "{{url=http://example.com}}" | git credential reject##Erase the specified credential information from all the configured credential helpers
echo $(expr index {{string}} {{substring}})##Get position of the first character in 'string' that matches 'substring'
echo $(expr substr {{string}} {{position_to_start}} {{number_of_characters}}##Extract part of the string
echo $(expr {{string}} : '\({{regular_expression}}\)')##Extract part of the string which matches a regular expression
echo 'scale = {{10}}; {{5 / 3}}' | bc##Calculate an expression with the specified scale
echo '{"hello":"world", "foo":"bar"}' | mlr --ijson --ojson --jvstack cat##Receive JSON and format the output as vertical JSON
echo '{"hello":"world"}' | mlr --ijson --opprint cat##Receive JSON data and pretty print the output
echo '{{$HOME}}' | envsubst##Replace environment variables in stdin and output to stdout
echo '{{3}}' | ajson '{{2 * pi * $}}'##Read some simple JSON and calculate a value
echo '{{5 / 3}}' | bc##Calculate an expression
echo '{{s|c|a|l|e}}({{1}})' | bc --mathlib##Calculate a sine/cosine/arctangent/natural logarithm/exponential function using `mathlib`
echo '{{{"param1":"value1", "param2":"value2"}}}' | gh workflow run {{id|workflow_name|filename.yml}} --ref {{branch_or_tag_name}}##Run a manual workflow using a specific branch or tag with JSON parameters from stdin
echo -e "{{Column 1\tColumn 2}}"##Enable interpretation of backslash escapes (special characters)
echo -n "{{Hello World}}"##Print a message without the trailing newline
echo {{1337}} | pretty-bytes##Convert numeric bytes value from stdin to a human-readable string
echo {{His network looks good}} | alex --stdin##Analyze text from stdin
echo {{example}} | kitty +kitten clipboard##Copy the contents of stdin to the clipboard
echo {{http://example.com/path/to/feed}} >> "${HOME}/.newsboat/urls"##Alternatively, add feeds manually
echo {{input}} | json5##Convert JSON5 stdin to JSON stdout
echo {{log_entry}} | logger --priority {{user.warning}}##Log messages with a given priority. Default is `user.notice`. See `man logger` for all priority options
echo {{log_entry}} | logger --server {{hostname}} --port {{port}}##Send the output to a remote syslog server running at a given port. Default port is 514
echo {{log_entry}} | logger --tag {{tag}}##Use a specific tag for every line logged. Default is the name of logged in user
echo {{log_entry}} | logger##Take input from stdin and log to syslog
echo {{message}} | kafkacat -P -t {{topic}} -b {{brokers}}##Publish message by reading from stdin
echo {{number}} | factor##Take the input from stdin if no argument is specified
echo {{string}} | qrencode -t ansiutf8##Convert input from pipe to a QR code and print it in terminal
echo {{text}} | airpaste##Send text
echo {{text}} | tr {{find_character}} {{replace_character}}##Replace all occurrences of a character from another command's output
echo {{your_token}} | gh auth login --with-token##Log in with a token from standard input (created in https//github.com/settings/tokens)
ect -keep {{path/to/file.png}}##Compress a file, keeping the original modification time
ect -recurse {{path/to/directory}}##Compress all files in a directory recursively
ect -strip {{path/to/file.png}}##Compress a file, stripping metadata
ect -{{9}} --mt-deflate {{path/to/file.zip}}##Compress a file with specified compression level and multithreading (1=Fastest (Worst), 9=Slowest (Best), default is 3)
ect {{path/to/file.png}}##Compress a file
ed -p : {{path/to/file}}##Start ed editing an existing file (this shows the byte count of the loaded file)
ed -p :##Start ed, editing an empty document, with `` as a command prompt indicator
ed##Start ed, editing an empty document (which can be saved as a new file in the current directory)
edgepaint -?##Display help for `edgepaint`
edgepaint -color-scheme={{accent7}} {{path/to/layout.gv}} > {{path/to/output.gv}}##Colorize edges using a color scheme. (See <https//graphviz.org/doc/info/colors.html#brewer>)
edgepaint {{path/to/layout1.gv}} {{path/to/layout2.gv ...}} > {{path/to/output.gv}}##Colorize edges of one or more graph layouts (that already have layout information) to clarify crossing edges
egrep "{{search_pattern}}" {{path/to/file1}} {{path/to/file2}} {{path/to/file3}}##Search for a pattern within multiple files
egrep "{{search_pattern}}" {{path/to/file}}##Search for a pattern within a file
egrep --invert-match "{{search_pattern}}" {{path/to/file}}##Search for lines that do not match a pattern
egrep --recursive --binary-files={{without-match}} "{{search_pattern}}" {{path/to/directory}}##Search for a pattern in all files recursively in a directory, ignoring binary files
egrep --with-filename --line-number "{{search_pattern}}" {{path/to/file}}##Print file name and line number for each match
electron-packager "{{path/to/app}}" "{{app_name}}" --all##Package an application for all architectures and platforms
electron-packager "{{path/to/app}}" "{{app_name}}" --platform="{{darwin}}" --arch="{{arm64}}"##Package an application for ARM macOS
electron-packager "{{path/to/app}}" "{{app_name}}" --platform="{{linux}}" --arch="{{x64}}"##Package an application for 64-bit Linux
electron-packager "{{path/to/app}}" "{{app_name}}"##Package an application for the current architecture and platform
electrum -p socks5:{{127.0.0.1}}:9050 -s {{56ckl5obj37gypcu.onion}}:50001:t -1##Connect only to a specific electrum-server instance
electrum -w {{new_wallet.dat}} create##Create a new wallet
electrum -w {{recovery_wallet.dat}} restore -o##Restore an existing wallet from seed offline
electrum listaddresses -a##Display all wallet receiving addresses
electrum mktx {{recipient}} {{amount}} -f 0.0000001 -F {{from}} -o##Create a signed transaction offline
electrum signmessage {{address}} {{message}}##Sign a message
electrum verifymessage {{address}} {{signature}} {{message}}##Verify a message
elinks -dump -dump-color-mode {{1}} {{url}}##Dump output of webpage to console, colorizing the text with ANSI control codes
elinks##Start elinks
elixir -e "{{code}}"##Evaluate Elixir code by passing it as an argument
elixir {{path/to/file}}##Run an Elixir file
elm init##Initialize an Elm project, generates an elm.json file
elm install {{author}}/{{package}}##Install Elm package from https//package.elm-lang.org
elm make {{source}} --output={{destination}}.js##Compile an Elm file, output the result to a JavaScript file
elm make {{source}}##Compile an Elm file, output the result to an `index.html` file
elm reactor##Start local web server that compiles Elm files on page load
elm repl##Start interactive Elm shell
elvish -c "{{command}}"##Execute a [c]ommand and then exit
elvish -c "{{echo 'elvish is executed'}}"##Execute specific [c]ommands
elvish -version##Print the Elvish version and then exit
elvish {{path/to/script.elv}}##Execute a script and then exit
elvish {{path/to/script.elv}}##Execute a specific script
elvish##Start an interactive shell session
emacs +{{line_number}} {{path/to/file}}##Open a file at a specified line number
emacs --daemon##Start an Emacs server in the background (accessible via `emacsclient`)
emacs --no-window-system##Start Emacs in console mode (without an X window)
emacs {{path/to/file}}##Start Emacs and open a file
emacsclient --alternate-editor {{editor}} {{path/to/file}}##Specify an alternative editor in case no Emacs server is running
emacsclient --create-frame {{path/to/file}}##Open a file in a new Emacs window
emacsclient --eval '(save-buffers-kill-emacs)'##Stop a running Emacs server and all its instances, asking for confirmation on unsaved files
emacsclient --eval '(save-buffers-kill-emacs)'##Stop a running Emacs server and all its instances, asking for confirmation on unsaved files
emacsclient --eval '({{command}})'##Evaluate a command, printing the output to stdout, and then quit
emacsclient --no-window-system {{path/to/file}}##Open a file in console mode (without an X window)
emacsclient {{path/to/file}}##Open a file in an existing Emacs server (using GUI if available)
ember addon {{my_new_addon}}##Create a new Ember addon
ember build -prod##Build the project in production mode
ember build##Build the project
ember generate {{type}} {{name}}##Run a blueprint to generate something like a route or component
ember install {{name_of_addon}}##Install an ember-cli addon
ember new {{my_new_app}}##Create a new Ember application
ember serve##Run the development server
ember test##Run the test suite
emulator -avd {{name}} -camera-back {{none|emulated|webcamN}}##Start an emulator overriding the facing back camera setting (use `-camera-front` for front camera)
emulator -avd {{name}} -http-proxy {{http://example.com:80}}##Start an emulator, making all TCP connections through a specified HTTP/HTTPS proxy (port number is required)
emulator -avd {{name}} -netdelay {{gsm|hscsd|gprs|edge|hsdpa|lte|evdo|none}}##Start an emulator with network latency
emulator -avd {{name}} -netspeed {{gsm|hscsd|gprs|edge|hsdpa|lte|evdo|full}}##Start an emulator, with a maximum network speed
emulator -avd {{name}} -sdcard {{path/to/sdcard.img}}##Start an emulator with a given SD card partition image file
emulator -avd {{name}} -webcam-list##Display the webcams on your development computer that are available for emulation
emulator -avd {{name}}##Start an Android emulator device
emulator -help##Display the help
enca -L {{language}} -x {{to_encoding}} < {{original_file}} > {{new_file}}##Create a copy of an existing file using a different encoding
enca -L {{language}} -x {{to_encoding}} {{file1 file2 ...}}##Convert file(s) to a specific encoding
enca -L {{language}} {{file1 file2 ...}}##Detect file(s) encoding specifying a language in the POSIX/C locale format (e.g. zh_CN, en_US)
enca {{file1 file2 ...}}##Detect file(s) encoding according to the system's locale
encfs --reverse {{path/to/plain_dir}} {{path/to/cipher_dir}}##Mount an encrypted snapshot of a plain directory
encfs --standard {{/path/to/cipher_dir}} {{/path/to/mount_point}}##Initialize an encrypted filesystem with standard settings
encfs -f {{/path/to/cipher_dir}} {{/path/to/mount_point}}##Run encfs in the foreground instead of spawning a daemon
encfs {{/path/to/cipher_dir}} {{/path/to/mount_point}}##Initialize or mount an encrypted filesystem
enscript --help-highlight##Display available syntax highlighting languages and file formats
enscript {{path/to/input_file}} --color=1 --highlight={{language}} --output={{path/to/output_file}}##Generate a PostScript file with syntax highlighting and color for a specified language
enscript {{path/to/input_file}} --columns={{num}} --landscape --output={{path/to/output_file}}##Generate a PostScript file with a landscape layout, splitting the page into columns (maximum 9)
enscript {{path/to/input_file}} --language={{html|rtf|...}} --output={{path/to/output_file}}##Generate a file in a different language than PostScript
enscript {{path/to/input_file}} --output={{path/to/output_file}}##Generate a PostScript file from a text file
env -i {{program}}##Clear the environment and run a program
env -u {{variable}} {{program}}##Remove variable from the environment and run a program
env {{program}}##Run a program. Often used in scripts after the shebang (#!) for looking up the path to the program
env {{variable1}}={{value}} {{variable2}}={{value}} {{variable3}}={{value}} {{program}}##Set multiple variables and run a program
env {{variable}}={{value}} {{program}}##Set a variable and run a program
env##Show the environment
envoy init {{host_name}}##Initialise a configuration file
envoy run --continue {{task_name}}##Run a task and continue on failure
envoy run --path {{path/to/directory}} {{task_name}}##Run a task from a specific project
envoy run --pretend {{task_name}}##Dump a task as a Bash script for inspection
envoy run {{task_name}}##Run a task
envoy ssh {{server_name}}##Connect to the specified server via SSH
envsubst '{{$USER $SHELL $HOME}}' < {{path/to/input_file}}##Replace environment variables in an input file from a space-separated list
envsubst < {{path/to/input_file}} > {{path/to/output_file}}##Replace environment variables in an input file and output to a file
envsubst < {{path/to/input_file}}##Replace environment variables in an input file and output to stdout
eqn -T {{pdf}} {{path/to/input.eqn}} | groff -{{me}} -T {{pdf}} > {{path/to/output.pdf}}##Typeset an input file with equations to PDF using the [me] macro package
eqn {{path/to/input.eqn}} > {{path/to/output.roff}}##Process input with equations, saving the output for future typesetting with groff to PostScript
erl -pa {{directory_with_beam_files}}##Tell the Erlang shell to load modules from a directory
erl -remsh {{nodename}}@{{hostname}} -sname {{custom_shortname}} -hidden -setcookie {{cookie_of_remote_node}}##Connect to a running Erlang node
erlc {{files}} && erl -noshell '{{mymodule:myfunction(arguments)}}, init:stop().'##Compile and run sequential Erlang program as a common script and then exit
errno --list##List all errno names, codes, and descriptions
errno --search {{text}}##Search for code who's description contains all of the given text
errno --search-all-locales {{text}}##Search for code who's description contains all of the given text (all locales)
errno {{name|code}}##Lookup errno description by name or code
esbuild --bundle --define:{{process.env.NODE_ENV=\"production\"}} --minify --sourcemap {{path/to/file.js}}##Bundle and minify a JSX application with source maps in `production` mode
esbuild --bundle --minify --sourcemap --target={{chrome58,firefox57,safari11,edge16}} {{path/to/file.jsx}}##Bundle a JSX application for a comma-separated list of browsers
esbuild --bundle --outdir={{path/to/output_directory}} {{path/to/file1}} {{path/to/file2}}##Bundle a list of files to an output directory
esbuild --bundle --outfile={{path/to/out.js}} < {{path/to/file.jsx}}##Bundle a JSX application from stdin
esbuild --bundle --platform={{node}} --target={{node12}} {{path/to/file.js}}##Bundle a JavaScript application for a specific node version
esbuild --bundle --serve={{port}} --outfile={{index.js}} {{path/to/file.js}}##Bundle and serve a JavaScript application on an HTTP server
esbuild --bundle app.js --loader:{{.js=jsx}} {{path/to/file.js}}##Bundle a JavaScript application enabling JSX syntax in `.js` files
esbuild --bundle {{path/to/file.js}}##Bundle a JavaScript application and print to stdout
eslint --fix##Fix lint issues
eslint --init##Create ESLint config
eslint -c {{path/to/config_file}} {{app/src}}##Lint with config
eslint {{filename}}.js {{filename1}}.js##Lint on a given set of files
espanso edit config##Edit the configuration
espanso install {{package_name}}##Install a package from the hub store (<https//hub.espanso.org/>)
espanso restart##Restart (required after installing a package, useful in case of failure)
espanso status##Check status
espeak "I like to ride my bike."##Speak a phrase aloud
espeak -f {{filename}}##Speak a file aloud
espeak -v {{voice}}##Use a different voice
espeak -w {{filename.wav}} "It's GNU plus Linux"##Save output to a WAV audio file, rather than speaking it directly
etcd --advertise-client-urls {{http://127.0.0.1:1234}} --listen-client-urls {{http://127.0.0.1:1234}}##Start a single-node etcd cluster, listening for client requests on a custom URL
etcd --enable-pprof --metrics extensive##Start a single-node etcd cluster with extensive metrics available at http//localhost2379/debug/pprof/
etcd --name {{my_etcd_cluster}}##Start a single-node etcd cluster with a custom name
etcd##Start a single-node etcd cluster
etcdctl del {{my/key}}##Delete a key-value pair
etcdctl get {{my/key}}##Display the value associated with a specified key
etcdctl put {{my/file}} < {{path/to/file.txt}}##Store a key-value pair, reading the value from a file
etcdctl put {{my/key}} {{my_value}}##Store a key-value pair
etcdctl snapshot restore {{path/to/snapshot.db}}##Restore a snapshot of an etcd keystore (restart the etcd server afterwards)
etcdctl snapshot save {{path/to/snapshot.db}}##Save a snapshot of the etcd keystore
etcdctl user add {{my_user}}##Add a user
etcdctl watch {{my/key}}##Watch a key for changes
eva "{{(1 + 2) * 2 ^ 2}}"##Calculate the result of an expression
eva "{{sin(1) + cos(1)}}"##Calculate an expression with sine and cosine
eva --fix {{5}} "{{5 / 3}}"##Calculate an expression forcing the number of decimal places to 5
eva##Run the calculator in interactive mode
eval "$(grog -T utf8 {{path/to/input.me}})"##Run a `groff` command with preprocessor and macro options guessed by the `grog` utility
eval "$(thefuck --alias)"##Set the `fuck` alias to `thefuck` tool
eval "{{echo foo}}"##Call `echo` with the "foo" argument
eval "{{foo=bar}}"##Set a variable in the current shell
eval $(ssh-agent)##Start an SSH Agent for the current shell
evil-winrm --ip {{ip}} --user {{user}} --hash {{nt_hash}}##Connect to a host, passing the password hash
evil-winrm --ip {{ip}} --user {{user}} --password {{password}} --scripts {{path/to/scripts}} --executables {{path/to/executables}}##Connect to a host, specifying directories for scripts and executables
evil-winrm --ip {{ip}} --user {{user}} --password {{password}} --ssl --pub-key {{path/to/pubkey}} --priv-key {{path/to/privkey}}##Connect to a host, using SSL
evil-winrm --ip {{ip}} --user {{user}} --password {{password}}##Connect to a host
ex {{path/to/file}}##Open a file
exa --all##List all files, including hidden files
exa --git-ignore##Don't list files mentioned in `.gitignore`
exa --long --all##Long format list (permissions, ownership, size and modification date) of all files
exa --long --header --icons --git##List files with their headers, icons, and Git statuses
exa --long --sort={{modified}}##List files sorted by modification date (oldest first)
exa --long --tree --level={{3}}##Display a tree of files, three levels deep
exa --oneline##List files one per line
exa --reverse --sort={{size}}##List files with the largest at the top
exec -a {{process_name}} {{command -with -flags}}##Replace with the specified command and change the process name
exec -c {{command -with -flags}}##Replace with the specified command, clearing environment variables
exec -l {{command -with -flags}}##Replace with the specified command and login using the default shell
exec {{command -with -flags}}##Replace with the specified command using the current environment variables
execpod {{shell_command}}##Exec into a pod's container
exenv global {{version}}##Use a specific version of Elixir across the whole system
exenv install {{version}}##Install a version of Elixir (requires `elixir-build` plugin <https//github.com/mururu/elixir-build>)
exenv local {{version}}##Use a specific version of Elixir for the current application/project directory
exenv versions##Display a list of installed versions
exenv {{version}}##Show the currently selected Elixir version
exercism configure --token={{your-application-token}} --workspace={{/path/to/preferred/workspace}}##Configure the application token and the preferred workspace for Exercism
exercism download --exercise={{exercise_slug}} --track={{track_slug}}##Download a specific exercise
exercism submit {{path/to/file}}##Submit an exercise
exercism workspace##Print the path to the solution workspace
exiftool "-AllDates+=0:0:0 1:0:0" {{path/to/directory}}##Move the date at which all photos in a directory were taken 1 hour forward
exiftool "-AllDates-=0:0:1 2:0:0" -ext jpg##Move the date at which all JPEG photos in the current directory were taken 1 day and 2 hours backward
exiftool '-filename<DateTimeOriginal' -d %Y-%m-%d_%H-%M-%S%%lc.%%e {{path/to/directory}} -r -ext jpg##Recursively rename all JPEG photos in a directory based on the `DateTimeOriginal` field
exiftool -All= {{file1 file2 ...}}##Remove all EXIF metadata from the given files
exiftool -DateTimeOriginal-=1.5 -overwrite_original##Only change the `DateTimeOriginal` field subtracting 1.5 hours, without keeping backups
exit {{exit_code}}##Exit the shell with the specified exit code
exit##Exit the interactive Git shell (or press Ctrl + D)
exit##Exit the shell with the exit code of the last command executed
exit##Stop recording
exiv2 -P kt {{path/to/file}}##Print all metadata (Exif, IPTC, XMP) with interpreted values
exiv2 -P kv {{path/to/file}}##Print all metadata with raw values
exiv2 -d a -k {{path/to/file}}##Delete all metadata, preserving the file timestamp
exiv2 -d a {{path/to/file}}##Delete all metadata from an image
exiv2 -r {{'%Y%m%d_%H%M%S_:basename:'}} {{path/to/file}}##Rename the file, prepending the date and time from metadata (not from the file timestamp)
exiv2 {{path/to/file}}##Print a summary of the image Exif metadata
expand -i {{file}}##Do not convert tabs after non blanks
expand -t={{1,4,6}}##Use a comma separated list of explicit tab positions
expand -t={{number}} {{file}}##Have tabs a certain number of characters apart, not 8
expand {{file}}##Convert tabs in each file to spaces, writing to standard output
expand##Convert tabs to spaces, reading from standard input
export -f {{FUNCTION_NAME}}##Mark a shell function for export
export -n {{VARIABLE}}##Remove an environment variable
export PATH=$PATH:{{path/to/append}}##Append something to the PATH variable
export {{VARIABLE}}={{value}}##Set a new environment variable
expose --subdomain={{subdomain}}##Share the current working directory with a specific subdomain
expose serve {{hostname}}##Run the Expose server with a specific hostname
expose serve##Run the Expose server
expose share {{url}}##Share a local URL
expose token {{token}}##Register your authentication token
expose##Share the current working directory
expr length {{string}}##Get string length
expr {{first_argument}} {{operator}} {{second_argument}}##Evaluate logical or math expression with an operator ('+', '-', '*', '&', '|', etc.). Special symbols should be escaped
exrex '{{( {20}(\| *\\|-{22}|\|)|\.={50}| ( ){0,5}\\\.| {12}~{39})}}'##Print a boat
exrex '{{[oO0](_)[oO0]}}'##Print eyes
exrex '{{regular_expression}}'##Generate all possible strings that match a regular expression
exrex --count '{{regular_expression}}'##Print count of all possible strings that match a regular expression
exrex --delimiter "{{, }}" '{{regular_expression}}'##Generate all possible strings that match a regular expression, joined by a custom delimiter string
exrex --max-number {{100}} '{{regular_expression}}'##Generate at most 100 strings that match a regular expression
exrex --random '{{regular_expression}}'##Generate a random string that matches a regular expression
exrex --simplify '{{ab|ac}}'##Simplify a regular expression
f3read {{path/to/mount_point}}##Validate a device by checking the files in a given directory
f3write --max-write-rate={{kb_per_second}} {{path/to/mount_point}}##Limit the write speed
f3write {{path/to/mount_point}}##Write test files to a given directory, filling the drive
factor {{number}}##Display the prime-factorization of a number
fakedata --format {{csv|tab|sql}} {{generator}}##Generate data with a specific output format
fakedata --generators##List all valid generators
fakedata --limit {{n}} {{generator}}##Generate a given number of data items (defaults to 10)
fakedata {{generator1}} {{generator2}}##Generate data using one or more generators
false##Return an exit code of 1
fast --single-line##Display results on a single line to reduce spacing
fast --upload##Measure the current upload speed in addition to download speed
fast##Measure the current download speed
fastboot devices##Display connected devices
fastboot flash recovery {{file.img}}##Flash a custom recovery image
fastboot flash {{file.img}}##Flash a given image
fastboot getvar all##Display all information of a device
fastboot oem lock##Relock the bootloader
fastboot oem unlock##Unlock the bootloader
fastboot reboot bootloader##Reboot the device from fastboot mode into fastboot mode again
fastlane run build_app##Build and sign the iOS application in the current directory
fastlane run clean_cocoapods_cache##Remove the cache for pods
fastlane run clear_derived_data##Delete the derived data from Xcode
fastlane run cocoapods##Run `pod install` for the project in the current directory
fastmod --accept-all --fixed-strings {{exact_string}} {{replacement}}##Replace for an exact string without prompt for a confirmation (disables regular expressions)
fastmod --accept-all --print-changed-files --fixed-strings {{exact_string}} {{replacement}}##Replace for an exact string without prompt for a confirmation, printing changed files
fastmod --fixed-strings {{exact_string}} {{replacement}} --extensions {{json,js}}##Replace for an exact string in .js or .json files
fastmod --ignore-case {{regex_pattern}} {{replacement}} -- {{path/to/file path/to/directory ...}}##Replace a regex pattern in case-insensitive mode in specific files or directories
fastmod {{regex_pattern}} {{replacement}}##Replace a regex pattern in all files of the current directory, ignoring files on .ignore and .gitignore
fastmod {{regex}} {{replacement}} --dir {{path/to/directory}} --iglob {{'**/*.{js,json}'}}##Replace a regex pattern in in a specific directory files filtered with a case-insensitive glob pattern
fav {{tweet_id}}##Favorite the tweet with given ID
fc '{{416}}' '{{420}}'##List commands in a given interval
fc -e {{'emacs'}}##Specify an editor to open with
fc -l##List recent commands from history
fc -r##List recent commands in reverse order
fc##Open in the default system editor
fc-cache -f##Force a rebuild of all font cache files, without checking if cache is up-to-date
fc-cache -r##Erase font cache files, then generate new font cache files
fc-cache##Generate font cache files
fc-list | grep '{{DejaVu Serif}}'##Return a list of installed fonts with given name
fc-list | wc -l##Return the number of installed fonts in your system
fc-list##Return a list of installed fonts in your system
fc-match -s '{{DejaVu Serif}}'##Return a sorted list of best matching fonts
fc-pattern --config '{{DejaVu Serif}}'##Display config information about a font
fc-pattern --default '{{DejaVu Serif}}'##Display default information about a font
fd --extension {{txt}}##Find files with a specific extension
fd --hidden --no-ignore {{pattern}}##Include ignored and hidden files in the search
fd {{'^foo'}}##Find files that begin with "foo"
fd {{pattern}} --exec {{command}}##Execute a command on each search result returned
fd {{pattern}} {{path/to/directory}}##Find files in a specific directory
fd {{pattern}}##Recursively find files matching the given pattern in the current directory
fdp -?##Display help
fdp -T {{format}} -O {{path/to/input.gv}}##Render the output in `ps`, `pdf`, `svg`, `fig`, `png`, `gif`, `jpg`, `json`, or `dot` format
fdp -T {{png}} -O {{path/to/input.gv}}##Render a `png` image with a filename based on the input filename and output format (uppercase -O)
fdp -T {{svg}} -o {{path/to/image.svg}} {{path/to/input.gv}}##Render a `svg` image with the specified output filename (lowercase -o)
fdroid build {{app_id}} --server##Build a specific app in a build server VM
fdroid build {{app_id}}##Build a specific app
fdroid install {{app_id}}##Install the app on every connected device
fdroid lint --format {{app_id}}##Check if the metadata is formatted correctly
fdroid publish {{app_id}}##Publish the app to the local repository
fdroid rewritemeta {{app_id}}##Fix the formatting automatically (if possible)
fdroidcl download {{app_id}}##Download an APK file
fdroidcl install {{app_id}}##Install an app on a connected device
fdroidcl search {{search_pattern}}##Search for an app in the index
fdroidcl show {{app_id}}##Display info about an app
fdroidcl update##Fetch the F-Droid index
fdupes -r {{directory}}##Search a directory recursively
fdupes -rd {{directory}}##Search recursively for duplicates and display interactive prompt to pick which ones to keep, deleting the others
fdupes -rdN {{directory}}##Search recursively and delete duplicates without prompting
fdupes {{directory1}} -R {{directory2}}##Search multiple directories, one recursively
fdupes {{directory1}} {{directory2}}##Search multiple directories
fdupes {{directory}}##Search a single directory
feh --bg-{{center|fill|max|scale|tile}} {{path/to/image}}##Set your wallpaper (centered, filled, maximized, scaled or tiled)
feh --borderless {{path/to/images}}##View images without window borders
feh --cycle-once {{path/to/images}}##Exit after the last image
feh --montage --thumb-height {{150}} --thumb-width {{150}} --index-info "{{%nn%wx%h}}" --output {{path/to/montage_image.png}}##Create a montage of all images within a directory. Outputs as a new image
feh --recursive {{path/to/images}}##View images recursively
feh --slideshow-delay {{seconds}} {{path/to/images}}##Set the slideshow cycle delay
feh {{path/to/images}}##View images locally or using a URL
ffe --configuration={{path/to/config.ffe}} {{path/to/input}}##Display all input data using the specified data configuration
ffe --field-list="{{FirstName,LastName,Age}}" -c {{path/to/config.ffe}} {{path/to/input}}##Write only the selected fields
ffe --help##Display help
ffe --output={{path/to/output}} -c {{path/to/config.ffe}} {{path/to/input}}##Convert an input file to an output file in a new format
ffe --structure={{structure}} --print={{format}} {{path/to/input}}##Select input structure and print format from definitions in `~/.fferc` config file
ffe -e "{{LastName=Smith}}" -c {{path/to/config.ffe}} {{path/to/input}}##Write only the records that match an expression
ffmpeg -i {{frame_%d.jpg}} -f image2 {{video.mpg|video.gif}}##Combine numbered images (`frame_1.jpg`, `frame_2.jpg`, etc) into a video or GIF
ffmpeg -i {{input_video}}.avi -codec:audio aac -b:audio 128k -codec:video libx264 -crf 23 {{output_video}}.mp4##Convert AVI video to MP4. AAC Audio @ 128kbit, h264 Video @ CRF 23
ffmpeg -i {{input_video}}.mkv -codec copy {{output_video}}.mp4##Remux MKV video to MP4 without re-encoding audio or video streams
ffmpeg -i {{input_video}}.mp4 -codec:video libvpx-vp9 -crf {{30}} -b:video 0 -codec:audio libopus -vbr on -threads {{number_of_threads}} {{output_video}}.webm##Convert MP4 video to VP9 codec. For the best quality, use a CRF value (recommended range 15-35) and -bvideo MUST be 0
ffmpeg -i {{video.mp4}} -vn {{sound}}.mp3##Extract the sound from a video and save it as MP3
ffmpeg -i {{video.mpg|video.gif}} {{frame_%d.png}}##Convert frames from a video or GIF into individual numbered images
ffmpeg -ss {{mm:ss}} -i {{video.mp4}} -frames 1 -s {{128x128}} -f image2 {{image.png}}##Quickly extract a single frame from a video at time mmss and save it as a 128x128 resolution image
ffmpeg -ss {{mm:ss}} -to {{mm2:ss2}} -i {{video.mp4}} -codec copy {{output.mp4}}##Trim a video from a given start time mmss to an end time mm2ss2 (omit the -to flag to trim till the end)
ffplay -flags2 +export_mvs -vf codecview=mv=pf+bf+bb {{path/to/file}}##Play a video and show motion vectors in real time
ffplay -vf select="{{eq(pict_type\,PICT_TYPE_I)}}" {{path/to/file}}##Show only video keyframes
ffplay {{path/to/file}}##Play a media file
ffprobe -v error -select_streams v:0 -show_entries stream=avg_frame_rate -of default=noprint_wrappers=1:nokey=1 {{input.mp4}}##Display the frame rate of a video
ffprobe -v error -select_streams v:0 -show_entries stream=bit_rate -of default=noprint_wrappers=1:nokey=1 {{input.mp4}}##Display the average bit rate of a video
ffprobe -v error -select_streams v:0 -show_entries stream={{width|height}} -of default=noprint_wrappers=1:nokey=1 {{input.mp4}}##Display the width or height of a video
ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 {{input.mp4}}##Display media duration
ffprobe -v error -show_entries {{input.mp4}}##Display all available stream info for a media file
ffsend download {{file}} -p {{password}}##Download a file protected by password
ffsend download {{url}}##Download a file
ffsend upload {{file}} -d {{4}}##Upload a file and allow 4 downloads
ffsend upload {{file}} -p {{password}}##Upload a file with password
ffsend upload {{file}}##Upload a file
fg %{{job_id}}##Bring a specific job to foreground
fg##Bring most recently suspended background job to foreground
fgrep -c {{search_string}} {{path/to/file}}##Count the number of lines that match the given string in a file
fgrep -l {{search_string}} {{path/to/file1}} {{path/to/file2}}##Display filenames whose content matches the search string at least once
fgrep -n {{search_string}} {{path/to/file}}##Show the line number in the file along with the line matched
fgrep -v {{search_string}} {{path/to/file}}##Display all lines except those that contain the search string
fgrep -x {{path/to/file1}} {{path/to/file2}}##Search only lines that match entirely in files
fgrep {{search_string}} {{path/to/file}}##Search for an exact string in a file
figlet {{input_text}} -f {{font_filename}}##Use a font from the default font directory (the extension can be omitted)
figlet {{input_text}} -f {{path/to/font_file.flf}}##Use a custom font file
figlet {{input_text}}##Generate by directly inputting text
file -i {{filename}}##Determine the mime encoding type of a file
file -k {{filename}}##Don't stop at first file type match; keep going until the end of the file
file -s {{filename}}##Allow file to work with special or device files
file -z {{foo.zip}}##Look inside a zipped file and determine the file type(s) inside
file {{filename}}##Give a description of the type of the specified file. Works fine for files with no file extension
fin bash {{container_name}}##Open a shell into a specific container
fin logs -f {{container_name}}##Display logs of a specific container and follow the log
fin logs {{container_name}}##Display logs of a specific container
fin project start##Start the project in the current directory
fin project stop##Stop the project in the current directory
find . -name "*.cpp" | uncrustify -F - --no-backup##Don't make backups (useful if files are under version control)
find . -name "*.cpp" | uncrustify -F - --replace##Read filenames from stdin, and take backups before writing output back to the original filepaths
find . -name {{'*.backup'}} -print0 | xargs -0 rm -v##Delete all files with a `.backup` extension (`-print0` uses a null character to split file names, and `-0` uses it as delimiter)
find {{path/to/directory}} -type f | fzf --multi > {{filename}}##Select multiple files with `Shift + Tab` and write to a file
find {{path/to/directory}} -type f | fzf##Start fzf on all files in the specified directory
find {{path/to/directory}} -type f | peco##Start peco on all files in the specified directory
find {{path/to/directory}} -type f | sk --multi > {{filename}}##Select multiple files with `Shift + Tab` and write to a file
find {{path/to/directory}} -type f | sk##Start skim on all files in the specified directory
find {{path/to/directory}} | cpio -ov > {{archive.cpio}}##Copy all files and directories in a directory and add them [o]nto an archive, in [v]erbose mode
find {{root_path}} -daystart -mtime -{{7}} -delete##Find files modified in the last 7 days and delete them
find {{root_path}} -name '{{*.ext}}' -exec {{wc -l {} }}\;##Run a command for each file (use `{}` within the command to access the filename)
find {{root_path}} -name '{{*.ext}}'##Find files by extension
find {{root_path}} -name '{{*.py}}' -not -path '{{*/site-packages/*}}'##Find files matching a given pattern, excluding specific paths
find {{root_path}} -path '{{**/path/**/*.ext}}' -or -name '{{*pattern*}}'##Find files matching multiple path/name patterns
find {{root_path}} -size {{+500k}} -size {{-10M}}##Find files matching a given size range
find {{root_path}} -type d -iname '{{*lib*}}'##Find directories matching a given name, in case-insensitive mode
find {{root_path}} -type {{f}} -empty -delete##Find empty (0 byte) files and delete them
findpod -a##Get pod details (from all namespaces)
findpod##Get pod details (from current namespace)
finger -l##Produce multiline output format displaying same information as `-s` as well as user's home directory, home phone number, login shell, mail status, etc.
finger -m##Prevent matching against user's names and only use login names
finger -s##Display the user's login name, real name, terminal name, and other information
finger {{username}}##Display information about a specific user
finger##Display information about currently logged in users
firebase deploy##Deploy code and assets to the current Firebase project
firebase init##Start an interactive wizard to create a Firebase project in the current directory
firebase login##Log in to <https//console.firebase.google.com>
firebase open##Start an interactive wizard to open one of many links of the current Firebase project in the default web browser
firebase projects:list##List existing Firebase projects
firebase serve##Start a local server to statically host the current Firebase project's assets
firefox --headless --screenshot {{path/to/output_file.png}} {{https://example.com/}}##Take a screenshot of a web page in headless mode
firefox --new-window {{https://www.duckduckgo.com}}##Open a new window
firefox --private-window##Open a private (incognito) window
firefox --profile {{path/to/directory}} {{https://example.com/}}##Use a specific profile to allow multiple separate instances of Firefox to run at once
firefox --safe-mode##Launch Firefox in safe mode, with all extensions disabled
firefox --search "{{wikipedia}}"##Search for "wikipedia" using the default search engine
firefox --setDefaultBrowser##Set Firefox as the default browser
firefox {{https://www.duckduckgo.com}}##Launch Firefox and open a web page
fish --command "{{command}}"##Execute a command
fish --no-config##Start an interactive shell session without loading startup configs
fish --no-execute {{path/to/script.fish}}##Check a script for syntax errors
fish --private##Start an interactive shell session in private mode, where the shell does not access old history or save new history
fish --version##Print the version
fish {{path/to/script.fish}}##Execute a script
fish##Start an interactive shell session
fisher ls##List installed plugins
fisher remove {{plugin1}} {{plugin2}}##Remove one or more plugins
fisher update##Update plugins
fisher {{gist_url}}##Install a plugin from a GitHub gist
fisher {{plugin1}} {{plugin2}}##Install one or more plugins
fkill {{pid|name|:port}}##Kill the process by PID, name or port
fkill##Run without arguments to use the interactive interface
flac -d -o {{path/to/output.wav}} {{path/to/file.flac}}##Decode a FLAC file to WAV, specifying the output file
flac -o {{path/to/output.flac}} {{path/to/file.wav}}##Encode a WAV file to FLAC, specifying the output file
flac -t {{path/to/file.flac}}##Test a FLAC file for the correct encoding
flac {{path/to/file.wav}}##Encode a WAV file to FLAC (this will create a FLAC file in the same location as the WAV file)
flake8 --exclude {{substring1,glob2}} {{path/to/file_or_directory}}##Lint a file or directory recursively but exclude files matching the given globs or substrings
flake8 --ignore {{rule1,rule2}} {{path/to/file_or_directory}}##Lint a file or directory recursively and ignore a list of rules. (All available rules can be found at flake8rules.com)
flake8 --show-source {{path/to/file_or_directory}}##Lint a file or directory recursively and show the line on which each error occurred
flake8 {{path/to/file_or_directory}}##Lint a file or directory recursively
flask routes##Show the routes for the app
flask run##Run a development server
flask shell##Run a Python interactive shell in the app's context
flex --outfile {{analyser.c}} {{analyser.l}}##Specify the output file
flex {{analyser.l}}##Generate an analyser from a flex file
flow batch-coverage --show-all --strip-root {{path/to/directory}}##Run a type coverage check on all files in a directory
flow coverage --color {{path/to/file.jsx}}##Display line-by-line type coverage stats
flow ls##Check which files are being checked by flow
flow##Run a flow check
fls -r -m {{C:}} -o {{sector}} {{path/to/image_file}}##Analyse a single partition, providing the sector offset at which the filesystem starts in the image
fls -r -m {{C:}} -z {{timezone}} {{/dev/loop1p1}}##Analyse a single partition, providing the timezone of the original system
fls -r -m {{C:}} {{/dev/loop1p1}}##Build a recursive fls list over a device, output paths will start with C
flutter build apk --target-platform {{android-arm}},{{android-arm64}}##Build a release APK targeting most modern smartphones
flutter channel {{stable|beta|dev|master}}##List or change Flutter channel
flutter doctor##Check if all external tools are correctly installed
flutter help {{command}}##Display help about a specific command
flutter pub get##Download all packages specified in `pubspec.yaml`
flutter run -d all##Run Flutter on all started emulators and connected devices
flutter test {{test/example_test.dart}}##Run tests in a terminal from the root of the project
fluxctl --k8s-fwd-ns={{namespace}} list-workloads##List workloads currently running in the cluster on specific namespace
fluxctl automate##Turn on automatic deployment for a workload
fluxctl list-images##Show deployed and available images
fluxctl sync##Synchronize the cluster with the git repository
fly --target {{target_name}} login --team-name {{team_name}} -c {{https://ci.example.com}}##Authenticate with and save concourse target
fly -t {{target_name}} destroy-pipeline --pipeline {{pipeline_name}}##Destroy pipeline
fly -t {{target_name}} get-pipeline --pipeline {{pipeline_name}}##Show pipeline configuration
fly -t {{target_name}} pipelines##List pipelines
fly -t {{target_name}} set-pipeline --config {{pipeline.yml}} --pipeline {{pipeline_name}}##Upload or update a pipeline
fly -t {{target_name}} sync##Update local copy of fly
fly -t {{target_name}} unpause-pipeline --pipeline {{pipeline_name}}##Unpause pipeline
fly targets##List targets
fmt -s {{path/to/file}}##Reformat a file without joining lines shorter than the given width together
fmt -u {{path/to/file}}##Reformat a file with uniform spacing (1 space between words and 2 spaces between paragraphs)
fmt -w {{n}} {{path/to/file}}##Reformat a file producing output lines of (at most) `n` characters
fmt {{path/to/file}}##Reformat a file
fnm default {{node_version}}##Set the default Node.js version
fnm install {{node_version}}##Install a specific version of Node.js
fnm list##List all available Node.js versions and highlight the default one
fnm uninstall {{node_version}}##Uninstall a given Node.js version
fnm use {{node_version}}##Use a specific version of Node.js in the current shell
fold -w30 {{file}}##Wrap each line to width "30"
fold -w5 -s {{file}}##Wrap each line to width "5" and break the line at spaces (puts each space separated word in a new line, words with length > 5 are wrapped)
fold {{file}}##Wrap each line to default width (80 characters)
for {{variable}} in */; do (cd "${{variable}}" || continue; {{echo "Loop is executed"}}) done##Perform a given command in every directory
for {{variable}} in {{item1 item2 ...}}; do {{echo "Loop is executed"}}; done##Execute the given commands for each of the specified items
for {{variable}} in {{path/to/directory1/ path/to/directory2/ ...}}; do {{echo "Loop is executed"}}; done##Iterate over a given list of directories
for {{variable}} in {{path/to/file1 path/to/file2 ...}}; do {{echo "Loop is executed"}}; done##Iterate over a given list of files
for {{variable}} in {{{from}}..{{to}}..{{step}}}; do {{echo "Loop is executed"}}; done##Iterate over a given range of numbers
forever list##List running "forever" processes (along with IDs and other details of "forever" processes)
forever stop {{ID|pid|script}}##Stop a running "forever" process
forever {{script}}##Start running a file forever (as a daemon)
fortune -f##List the available quotation database files
fortune -l##Print a long quotation
fortune -o##Print an offensive quotation
fortune -s##Print a short quotation
fortune {{filename}}##Print a quotation from one of the database files listed by `fortune -f`
fortune##Print a quotation
fossa analyze##Analyze built dependencies
fossa build##Run a default project build
fossa init##Initialize a `.fossa.yml` configuration file
fossa report##Generate reports
fossa test##Test current revision against the FOSSA scan status and exit with errors if issues are found
fping -a -g 192.168.1.0/24##List alive hosts within a subnet generated from a netmask
fping -a -g 192.168.1.1 192.168.1.254##List alive hosts within a subnet generated from an IP range
fping -u -g 192.168.1.0/24##List unreachable hosts within a subnet generated from a netmask
from --count##Display the number of messages stored
from --sender={{me@example.com}}##Print the mail from the specified address
from##List mail
fselect "{{MIN(size), MAX(size), AVG(size), SUM(size), COUNT(*)}} from {{path/to/directory}}"##Use SQL aggregate functions to calculate minimum, maximum and average size of files in a directory
fselect path from {{path/to/directory}} where genre = {{Rap}} and bitrate = {{320}} and mp3_year lt {{2000}}##Find old-school rap 320kbps MP3 files
fselect path from {{path/to/directory}} where width = height##Find square images
fselect size, path from {{path/to/directory}} limit {{5}} into json##Select only the first 5 results and output as JSON
fselect size, path from {{path/to/directory}} where name = {{'*.cfg'}} or name = {{'*.tmp'}}##Select full path and size from temporary or config files in a given directory
fswatch --event {{Updated|Deleted|Created}} {{path/to/directory}} | xargs -n 1 {{bash_command}}##Filter by event type
fswatch {{path/to/directory}} | xargs -n 1 -I {} echo {}##Print the absolute paths of the changed files
fswatch {{path/to/file}} {{path/to/directory}} {{path/to/another_directory/**/*.js}} | xargs -n 1 {{bash_command}}##Watch one or more files and/or directories
fswatch {{path/to/file}} | xargs -n 1 {{bash_command}}##Run a Bash command on file creation, update or deletion
fswebcam --timestamp {{timestamp}} {{filename}}##Take a picture with timestamp(timestamp string is formatted by strftime)
fswebcam -d {{device}} {{filename}}##Take a picture from selected device(Default is `/dev/video0`)
fswebcam -r {{width}}x{{height}} {{filename}}##Take a picture with custom resolution
fswebcam {{filename}}##Take a picture
ftp {{ftp.example.com}}##Connect to an FTP server
ftp {{ip_address}} {{port}}##Connect to an FTP server specifying its IP address and port
fuck --{{yes|yeah|hard}}##Confirm the first choice immediately (correct argument depends on level of annoyance)
fuck##Try to match a rule for the previous command
func azure functionapp fetch-app-settings {{function}}##Download all settings from an existing function app
func azure functionapp publish {{function}}##Publish your code to a function app in Azure
func azure storage fetch-connection-string {{storage_account}}##Get the connection string for a specific storage account
func init {{project}}##Create a new functions project
func new##Create a new function
func start##Run functions locally
fusermount --version##Display version
fusermount -u {{path/to/directory}}##Unmount MTP device
fusermount -u {{path/to/mount_point}}##Unmount a FUSE filesystem
fusermount -u {{path/to/mount_point}}##Unmount rclone remote if CTRL-C fails (experimental)
fusermount -z {{path/to/mount_point}}##Unmount a FUSE filesystem as soon as it becomes unused
fzf --query "!pyc 'travis"##Start fzf on entries that not match pyc and match exactly travis
fzf --query "^core go$ | rb$ | py$"##Start fzf on entries that start with core and end with either go, rb, or py
fzf --query "{{query}}"##Start fzf with a specified query
g {{bookmark_name}}##Go to a bookmarked directory
g##Interactively generate a new key
g++ {{path/to/source.cpp}} -Wall -o {{path/to/output_executable}}##Display (almost) all errors and warnings
g++ {{path/to/source.cpp}} -o {{path/to/output_executable}} -I{{path/to/header}} -L{{path/to/library}} -l{{library_name}}##Include libraries located at a different path than the source file
g++ {{path/to/source.cpp}} -o {{path/to/output_executable}}##Compile a source code file into an executable binary
g++ {{path/to/source.cpp}} -std={{c++98|c++11|c++14|c++17}} -o {{path/to/output_executable}}##Choose a language standard to compile for (C++98/C++11/C++14/C++17)
gacutil -i {{assembly_display_name}}##Uninstall the specified assembly from GAC
gacutil -i {{path/to/assembly.dll}}##Install the specified assembly into GAC
gacutil -l##Print the content of GAC
ganache-cli --account="{{account_private_key}},{{account_balance}}"##Run Ganache with a specific account and balance
ganache-cli --accounts={{number_of_accounts}}##Run Ganache with a specific number of accounts
ganache-cli --defaultBalanceEther={{default_balance}}##Run Ganache with accounts with a default balance
ganache-cli --secure --unlock "{{account_private_key1}}" --unlock "{{account_private_key2}}"##Run Ganache server and unlock specific accounts
ganache-cli --secure##Run Ganache and lock available accounts by default
ganache-cli --verbose##Run Ganache and log all requests to stdout
ganache-cli##Run Ganache
gatsby build##Perform a production build and generate static HTML
gatsby develop##Start a live-reloading local development server
gatsby new {{site_name}} {{url_of_starter_github_repo}}##Create a new site with a Gatsby 'starter'
gatsby new {{site_name}}##Create a new site
gatsby serve##Start a local server which serves the production build
gcal --starting-day={{1}}##Change starting day of week to 1st day of the week (Monday)
gcal --with-week-number##Provide calendar sheet with week numbers
gcal .##Display the previous, current and next month surrounding today
gcal {{2}} {{2010}}##Display calendar for the month of February of the year 2010
gcal##Display calendar for the current month
gcalcli --calendar "{{calendar_name}}" add##Add an event to calendar. Triggers interactive prompt
gcalcli --calendar {{calendar_name}} agenda##List events from a specific calendar
gcalcli --calendar {{calendar_name}} quick "{{mm/dd}} {{HH:MM}} {{event_name}}"##Quick-add an event to your calendar
gcalcli agenda {{mm/dd}} [{{mm/dd}}]##Show events starting from or between specific dates (also takes relative dates e.g. "tomorrow")
gcalcli agenda##List your events for all your calendars over the next 7 days
gcalcli calm##Display an ASCII calendar of events for a month
gcalcli calw##Display an ASCII calendar of events by week
gcc -S {{path/to/source.c}}##Compile source code into Assembler instructions
gcc -c {{path/to/source.c}}##Compile source code without linking
gcc {{path/to/source.c}} --output {{path/to/output_executable}} -I{{path/to/header}} -L{{path/to/library}} -l{{library_name}}##Include libraries from a different path
gcc {{path/to/source.c}} -Wall -Og --output {{path/to/output_executable}}##Allow warnings, debug symbols in output
gcc {{path/to/source1.c path/to/source2.c ...}} --output {{path/to/output_executable}}##Compile multiple source files into executable
gcloud auth login##Log in to Google account
gcloud components update##Update all gcloud CLI components
gcloud compute instances list##Display all Google Compute Engine instances in a project. Instances from all zones are listed by default
gcloud compute ssh {{user}}@{{instance}} ##SSH into a virtual machine instance
gcloud config list##List all properties in one's active configuration
gcloud config set project {{project_name}}##Set the active project
gcloud container clusters get-credentials {{cluster_name}}##Update a kubeconfig file with the appropriate credentials to point kubectl to a specific cluster in Google Kubernetes Engine
gcloud help {{command}}##Show help for a given command
gdalbuildvrt -hidenodata -vrtnodata "{{0 0 255}}" {{path/to/output.vrt}} {{path/to/input_directory/*.tif}}##Make a virtual mosaic with blue background colour (RGB 0 0 255)
gdalbuildvrt -input_file_list {{path/to/list.txt}} {{path/to/output.vrt}}##Make a virtual mosaic from files whose name is specified in a text file
gdalbuildvrt -separate {{path/to/rgb.vrt}} {{path/to/red.tif}} {{path/to/green.tif}} {{path/to/blue.tif}}##Make an RGB virtual mosaic from 3 single-band input files
gdalbuildvrt {{path/to/output.vrt}} {{path/to/input_directory/*.tif}}##Make a virtual mosaic from all TIFF files contained in a directory
gdb --args {{executable}} {{argument1}} {{argument2}}##Start gdb and pass arguments to the executable
gdb -c {{core}} {{executable}}##Debug with a core file
gdb -ex "{{commands}}" {{executable}}##Execute given GDB commands upon start
gdb -p {{procID}}##Attach a process to gdb
gdb {{executable}}##Debug an executable
gdrive download --path {{path/to/folder}} {{id}}##Download to a given local path by its ID
gdrive download {{id}}##Download file or directory by ID to current directory
gdrive update {{id}} {{path/to/file_or_folder}}##Create a new revision of an ID using a given file or folder
gdrive upload -p {{id}} {{path/to/file_or_folder}}##Upload a local path to the parent folder with the specified ID
gdu --ignore-dirs {{path/to/directory1,path/to/directory2,...}}##Interactively show the disk usage of the current directory but ignore some sub-directories
gdu --ignore-dirs-pattern '{{.*[abc]+}}'##Ignore paths by regular expression
gdu --no-hidden##Ignore hidden directories
gdu --no-progress {{path/to/directory}}##Do not show the progress in non-interactive mode (useful in scripts)
gdu --non-interactive {{path/to/directory}}##Only print the result, do not enter interactive mode
gdu --show-disks##Interactively show the disk usage of all mounted disks
gdu {{path/to/directory}}##Interactively show the disk usage of a given directory
gdu##Interactively show the disk usage of the current directory
gem install {{gemname}} --version '~> {{1.0}}'##Install the latest matching (SemVer) version of a gem
gem install {{gemname}} --version {{1.0.0}}##Install specific version of a gem
gem install {{gemname}}##Install the latest version of a gem
gem list##List all local gems
gem search {{regular_expression}} --all##Search for remote gem(s) and show all available versions
gem uninstall {{gemname}} --version {{1.0.0}}##Uninstall specific version of a gem
gem uninstall {{gemname}}##Uninstall a gem
gem update {{gemname}}##Update a gem
get -R {{/path/remote_directory}}##Transfer remote directory to the local system recursively (works with `put` too)
get {{/path/remote_file}}##Transfer remote file to the local system
get {{variable}}##Get the value of a TeX Live variable
get##List all TeX Live variables
geth --mine##Enable mining
geth --testnet##Connect to the Ropsten test network
geth account new##Create a new account
geth##Connect to the main Ethereum network and automatically download the full node
gh alias delete {{alias_name}}##Delete a command shortcut
gh alias list##List all the aliases `gh` is configured to use
gh alias set --shell {{alias_name}} {{command}}##Set a shell command as a `gh` subcommand
gh alias set {{pv}} '{{pr view}}'##Create a `gh` subcommand alias
gh alias##Display the subcommand help
gh api --header {{Accept:application/vnd.github.squirrel-girl-preview+json}} --raw-field '{{content=+1}}' {{repos/:owner/:repo/issues/123/reactions}}##Create a reaction for a specific issue
gh api --help##Display the subcommand help
gh api --hostname {{github.example.com}} {{endpoint}}##Send a request to a specific GitHub Enterprise Server
gh api --include {{endpoint}}##Include the HTTP response headers in the output
gh api --method {{POST}} {{endpoint}}##Send a request using a custom HTTP method
gh api --silent {{endpoint}}##Do not print the response body
gh api graphql --field {{name=':repo'}} --raw-field '{{query}}'##Display the result of a GraphQL query in JSON format
gh api repos/:owner/:repo/releases##Display the releases for the current repository in JSON format
gh auth login --hostname {{github.example.com}}##Log in with a specific GitHub Enterprise Server
gh auth login##Log in with interactive prompt
gh auth logout##Log out
gh auth refresh --scopes {{write:org,read:public_key}}##Expand the permission scopes
gh auth refresh##Refresh the session to ensure authentication credentials have the correct minimum scopes (removes additional scopes requested previously)
gh auth status##Check if you are logged in
gh browse --branch {{branch_name}}##Open a specific branch in the web browser
gh browse --no-browser##Print the destination URL without open the web browser
gh browse --settings##Open the settings page of the current repository in the default web browser
gh browse --wiki##Open the wiki of the current repository in the default web browser
gh browse {{issue_or_pull_request_number}}##Open a specific issue or pull request in the web browser
gh browse {{owner}}/{{repository}}##Open the homepage of a specific repository in the default web browser
gh browse {{path_from_root_of_repository}}##Open a specific file or directory of the current repository in the web browser
gh browse##Open the homepage of the current repository in the default web browser
gh codespace cp {{path/to/source_file}} remote:{{path/to/remote_file}}##Transfer a file to a codespace interactively
gh codespace create##Create a codespace in GitHub interactively
gh codespace delete##Delete a codespace interactively
gh codespace list##List all available codespaces
gh codespace logs##Print the logs from a codespace interactively
gh codespace ports##List the ports of a codespace interactively
gh codespace ssh##Connect to a codespace via SSH interactively
gh codespace {{subcommand}} --help##Display help for a subcommand
gh completion --shell {{bash|zsh|fish|powershell}}##Print a completion script
gh completion --shell {{bash}} >> {{~/.bashrc}}##Append the `gh` completion script to `~/.bashrc`
gh completion --shell {{zsh}} >> {{~/.zshrc}}##Append the `gh` completion script to `~/.zshrc`
gh completion##Display the subcommand help
gh config get git_protocol##Display what Git protocol is being used
gh config set editor {{""}}##Reset to default text editor
gh config set editor {{vim}}##Set text editor to Vim
gh config set git_protocol {{ssh}}##Set protocol to SSH
gh config set pager '{{delta --side-by-side}}'##Use `delta` in side-by-side mode as the default pager for all `gh` commands
gh config set prompt {{disabled}}##Disable interactive prompts
gh config set {{key}} {{value}}##Set a specific configuration value
gh configure##Setup GitHub integration with the current account
gh environment##Display help about environment variables that can be used with `gh`
gh extension create {{extension_name}}##Initialize a new GitHub CLI extension project in a directory of the same name
gh extension install {{owner}}/{{repository}}##Install an extension from a GitHub repository
gh extension list##List installed extensions
gh extension list##List installed extensions
gh extension remove {{extension_name}}##Remove an extension
gh extension upgrade --all##Upgrade all extensions
gh extension upgrade {{extension_name}}##Upgrade a specific extension
gh extension {{subcommand}} --help##Display help about a subcommand
gh feed {{tldr-pages/tldr}}##View the recent activity feed of a given GitHub repository
gh feed {{torvalds}} -p##View the recent activity feed for a given GitHub user, using the default pager (e.g. `less`)
gh formatting##Display help about formatting JSON output from `gh` using `jq`
gh gist create {{filename}} --desc "{{description}}"##Create a new Gist with a description
gh gist create {{path/to/files}}##Create a new Gist from a space-separated list of files
gh gist edit {{id_or_url}}##Edit a Gist
gh gist list --limit {{int}}##List Gists owned by the currently logged in user
gh gist view {{id_or_url}} --web --raw##View a Gist in the default browser without rendering Markdown
gh help --help##Display help for the `gh help` subcommand
gh help environment##Display help about environment variables that can be used with `gh`
gh help formatting##Display help about formatting JSON output from `gh` using `jq`
gh help mintty##Display help about using `gh` with MinTTY
gh help reference##Display a markdown reference of all `gh` commands
gh help {{pr}} {{create}}##Display help for a subcommand action
gh help {{subcommand}}##Display help for a subcommand
gh help##Display general help
gh issue create --assignee {{user1,user2,...}}##Create a new issue interactively and assign it to the specified users
gh issue create --body-file {{path/to/file}}##Create a new issue interactively, reading the body text from a file
gh issue create --help##Display the help
gh issue create --label "{{bug}}"##Create a new issue with the `bug` label interactively
gh issue create --title "{{title}}" --body "{{body}}" --assignee "{{@me}}"##Create a new issue with a title, body and assign it to the current user
gh issue create --web##Create a new issue in the default web browser
gh issue create --web##Create a new issue in the web browser
gh issue create##Create a new issue
gh issue create##Create a new issue against the current repository interactively
gh issue list --limit {{10}} --label "{{bug}}"##List the last 10 issues with the `bug` label
gh issue list --state closed --author {{username}}##List closed issues made by a specific user
gh issue list##View and filter the open issues of the current repository
gh issue reopen {{issue_number}}##Reopen a specific issue
gh issue reopen {{issue_number}}##Reopen an issue
gh issue status --repo {{owner}}/{{repository}}##Display the status of issues relevant to the user, in a specific repository
gh issue view --web {{issue_number}}##View an issue in the browser
gh issue view --web {{issue_number}}##View an issue in the default web browser
gh issue view {{issue_number}} --web##Display a specific issue in the default web browser
gh issue view {{issue_number}}##Display a specific issue
gh issue view {{issue_number}}##Print out the issue
gh mintty##Display help about using `gh` with MinTTY
gh notifications##List notifications for the current account (as would be seen in https//github.com/notifications)
gh pr checkout {{pr_number}}##Check out a pull request locally
gh pr checkout {{pr_number}}##Check out a specific pull request locally
gh pr checkout {{pr_number}}##Check out a specific pull request locally
gh pr checkout {{pr_number}}##Locally check out the branch of a pull request, given its number
gh pr create --base {{base_branch}} --title "{{title}}" --body "{{body}}"##Create a pull request specifying the base branch, title, and description
gh pr create --draft##Create a draft pull request
gh pr create --fill##Create a pull request, determining the title and description from the commit messages of the current branch
gh pr create --web##Start opening a pull request in the browser
gh pr create --web##Start opening a pull request in the default web browser
gh pr create##Create a pull request
gh pr create##Create a pull request
gh pr create##Interactively create a pull request
gh pr diff##View the changes made in the PR
gh pr diff##View the changes made in the pull request for the current branch
gh pr edit --base {{branch_name}}##Edit the base branch of a pull request
gh pr edit##Edit a pull request interactively
gh pr merge --delete-branch##Merge the pull request, removing the branch on both the local and the remote
gh pr merge --help##Display help
gh pr merge --squash --body="{{commit_message_body}}"##Squash the current pull request into one commit with the message body and merge
gh pr merge --{{merge|squash|rebase}} --subject {{commit_message}}##Merge the current pull request with the specified merge strategy and commit message
gh pr merge --{{merge|squash|rebase}}##Merge the current pull request with the specified merge strategy
gh pr merge {{pr_number}}##Merge the specified pull request, interactively
gh pr merge##Merge the pull request associated with the current branch interactively
gh pr merge##Merge the pull request associated with the current branch interactively
gh pr review --approve##Approve the pull request for the current branch
gh pr review --approve##Approve the pull request of the current branch
gh pr status##Check the status of a repository's pull requests
gh pr status##Check the status of the current repository's pull requests
gh pr view --web {{pr_number}}##View a pull request in the browser
gh pr view --web {{pr_number}}##View a pull request in the default web browser
gh reference##Display a markdown reference of all `gh` commands
gh release create {{tag}}##Create a new release
gh release delete {{tag}}##Delete a specific release
gh release download {{tag}}##Download assets from a specific release
gh release list##List releases in a GitHub repository, limited to 30 items
gh release upload {{tag}} {{path/to/file1}} {{path/to/file2}}##Upload assets to a specific release
gh release view {{tag}}##Display information about a specific release
gh repo clone {{owner}}/{{repository}}##Clone a GitHub repository locally
gh repo clone {{owner}}/{{repository}}##Clone a repository
gh repo create {{name}}##Create a new repository (if the repository name is not set, the default name will be the name of the current directory)
gh repo fork {{owner}}/{{repository}} --clone##Fork and clone a repository
gh repo list {{owner}} --language {{language_name}}##List repositories with a specific primary coding language
gh repo list {{owner}} --non-forks##List only non-forks repositories
gh repo list {{owner}}##List repositories owned by a specific user or organization (if the owner is not set, the default owner will be the currently logged in user)
gh repo view {{repository}} --web##View a repository in the default web browser
gh repo view {{repository}} --web##View a repository in the web browser
gh run rerun {{workflow_run_number}}##Re-run a specific workflow
gh run view --job={{job_number}} --log##Display the log of a job
gh run view --job={{job_number}}##Display information about the steps of a job
gh run view {{workflow_run_number}} --exit-status && {{echo "run pending or passed"}}##Check a specific workflow and exit with a non-zero status if the run failed
gh run view {{workflow_run_number}}##Display information about a specific run
gh run view##Interactively select a run to see information about the jobs
gh run watch {{workflow_run_number}}##Display the jobs for a run and wait until it's done
gh run watch##Interactively select an active run and wait until it's done
gh screensaver --list##List available screensavers
gh screensaver --saver {{fireworks|marquee|pipes|pollock|starfield}}##Run a specific screensaver
gh screensaver --saver {{marquee}} -- --message="{{message}}" --font={{font_name}}##Run the "marquee" screensaver with a specific text and font
gh screensaver --saver {{starfield}} -- --density {{500}} --speed {{10}}##Run the "starfield" screensaver with a specific density and speed
gh screensaver##Run a random screensaver
gh secret list --org {{organization}}##List secret keys for a specific organization
gh secret list --repo {{owner}}/{{repository}}##List secret keys for a specific repository
gh secret list##List secret keys for the current repository
gh secret remove {{name}} --org {{organization}}##Remove a secret for a specific organization
gh secret remove {{name}}##Remove a secret for the current repository
gh secret set {{name}} --body {{value}} --repo {{owner}}/{{repository}}##Set a secret for a specific repository
gh secret set {{name}} --org {{organization}} --repos "{{repository1,repository2,...}}"##Set an organization secret for specific repositories
gh secret set {{name}} --org {{organization}} --repos {{repository1,repository2}}##Set an organization secret for specific repositories
gh secret set {{name}} --org {{organization}} --visibility {{all|private|selected}}##Set an organization secret with a specific visibility
gh secret set {{name}} < {{path/to/file}}##Set a secret from a file for the current repository
gh secret set {{name}} < {{path/to/file}}##Set a secret from a file for the current repository
gh secret set {{name}}##Set a secret for the current repository (user will be prompted for the value)
gh secret set {{name}}##Set a secret for the current repository (user will be prompted for the value)
gh ssh-key add --title {{title}} {{path/to/key.pub}}##Add an SSH key to the currently authenticated user's account with a specific title
gh ssh-key add {{path/to/key.pub}}##Add an SSH key to the currently authenticated user's account
gh ssh-key list##List SSH keys for the currently authenticated user
gh ssh-key##Display help
gh starred "{{python 3}}"##List the current account's starred repos, filtered by a given search string
gh workflow list##List workflow files (use `--all` to include disabled workflows)
gh workflow run {{id|workflow_name|filename.yml}} --raw-field {{param1}}={{value1}} --raw-field {{param2}}={{value2}}##Run a manual workflow with parameters
gh workflow view {{id|workflow_name|filename.yml}} --ref {{branch_or_tag_name}} --yaml##Display the YAML definition for a specific Git branch or tag
gh workflow view {{id|workflow_name|filename.yml}} --web##View a specific workflow in the default browser
gh workflow view {{id|workflow_name|filename.yml}} --yaml##Display the YAML definition of a specific workflow
gh workflow view##Interactively select a workflow to view the latest jobs for
gh workflow {{enable|disable}} {{id|workflow_name|filename.yml}}##Enable or disable a specific workflow
ghc -O {{file.hs}}##Compile using extra optimization
ghc -c {{file.hs}}##Stop compilation after generating object files (.o)
ghc -e {{expression}}##Evaluate a single expression
ghc Main##Find and compile all modules in the current directory
ghc {{file.hs}}##Compile a single file
ghci -W{{warning_level}}##Start a REPL and enable some level of compiler warnings (e.g. `all` or `compact`)
ghci -X{{language_option}}##Start a REPL and enable a language option
ghci -i{{path/to/directory1}}:{{path/to/directory2}}##Start a REPL with a colon-separated list of directories for finding source files
ghci {{source_file.hs}}##Start a REPL and load the specified Haskell source file
ghci##Start a REPL (interactive shell)
ghci##Start a REPL (interactive shell)
ghcup install cabal##Install cabal-install
ghcup install ghc {{version}}##Install a specific GHC version
ghcup install ghc##Install the recommended GHC version
ghcup list##List available GHC/cabal versions
ghcup set ghc {{version}}##Set the currently "active" GHC version
ghcup tui##Start the interactive TUI
ghcup upgrade##Update `ghcup` itself
ghdl --help##Display the help page
ghdl -a {{filename.vhdl}}##Analyze a VHDL source file and produce an object file
ghdl -e {{design}}##Elaborate a design (where `{{design}}` is the name of a configuration unit, entity unit or architecture unit)
ghdl -r {{design}} --wave={{output.ghw}}##Run an elaborated design and dump output to a waveform file
ghdl -r {{design}}##Run an elaborated design
ghdl -s {{filename.vhdl}}##Check the syntax of a VHDL source file
ghost config {{key}} {{value}}##View or edit Ghost configuration
ghost doctor##Check the system for any potential hiccups while installing or updating Ghost
ghost install##Install Ghost in the current directory
ghost log {{name}}##View the logs of a Ghost instance
ghost ls##View running Ghost processes
ghost restart##Restart the Ghost instance
ghost run##Run a Ghost instance directly (used by process managers and for debugging)
ghost start##Start an instance of Ghost
gibo dump {{boilerplate}} >>{{.gitignore}}##Write a boilerplate to .gitignore
gibo dump {{boilerplate}}##Write a boilerplate to stdout
gibo list##List available boilerplates
gibo search {{string}}##Search for boilerplates containing a given string
gibo update##Update available local boilerplates
gifsicle --batch --optimize=3 {{amin.gif}}##Optimise a GIF
gifsicle --delay={{10}} --loop *.gif > {{anim.gif}}##Make a GIF animation with gifsicle
gifsicle -b {{anim.gif}} --replace '#0' {{new.gif}}##You can also edit animations by replacing, deleting, or inserting frames
gifsicle {{anim.gif}} '#0' > {{firstframe.gif}}##Extract frames from an animation
gimp --console-messages##Print errors and warnings to the console instead of showing them in a dialog box
gimp --debug-handlers##Enable debugging signal handlers
gimp --new-instance##Start the new instance, even if there is already a running one
gimp --no-splash##Start without the splash screen
gimp {{path/to/image1 path/to/image2 ...}}##Open the specified files
gimp##Start GIMP
gist --list {{username}}##List all public gists for any user
gist --list##List your public and private gists
gist --login##Log in in gist on this computer
gist --private --description "{{A meaningful description}}" {{file.txt}} ##Create a private gist with a description
gist --update {{GIST_ID}} {{file.txt}}##Update a gist using the ID from URL
gist {{file.txt}} {{file2.txt}}##Create a gist from any number of text files
git --help##Show general help
git --version##Check the Git version
git -C {{path/to/repo}} {{subcommand}}##Execute a Git subcommand on a custom repository root path
git -c '{{config.key}}={{value}}' {{subcommand}}##Execute a Git subcommand with a given configuration set
git abort##Abort a Git rebase, merge, or cherry-pick
git add -A##Add all files (tracked and untracked)
git add -f##Also add ignored files
git add -i##Interactively stage a file
git add -p {{path/to/file}}##Interactively stage parts of a given file
git add -p##Interactively stage parts of files
git add -u##Only add already tracked files
git add {{path/to/file}}##Add a file to the index
git alias "{{name}}" "{{command}}"##Create a new alias
git alias ^{{name}}##Search for an existing alias
git alias##List all aliases
git am --abort##Abort the process of applying a patch file
git am --reject {{path/to/file.patch}}##Apply as much of a patch file as possible, saving failed hunks to reject files
git am {{path/to/file.patch}}##Apply a patch file
git annex add {{path/to/file_or_directory}}##Add a file
git annex get {{path/to/file_or_directory}}##Get a file or directory
git annex help##Help
git annex init##Initialize a repo with Git annex
git annex status {{path/to/file_or_directory}}##Show the current status of a file or directory
git annex {{remote}}##Synchronize a local repository with a remote
git annotate -e {{path/to/file}}##Print a file with the author email and commit hash prepended to each line
git annotate {{path/to/file}}##Print a file with the author name and commit hash prepended to each line
git apply --cache {{path/to/file}}##Store the patch result in the index without modifying the working tree
git apply --index {{path/to/file}}##Apply and add the patched files to the index
git apply --reverse {{path/to/file}}##Apply the patch in reverse
git apply --stat --apply {{path/to/file}}##Output diffstat for the input and apply the patch
git apply --verbose {{path/to/file}}##Print messages about the patched files
git archive --output={{path/to/file.tar}} --prefix={{path/to/prepend}}/ HEAD##Prepend a path to each file to archive it inside a specific directory
git archive --output={{path/to/file.tar}} HEAD:{{path/to/directory}}##Create a tar archive from the contents of a specific directory
git archive --output={{path/to/file.tar}} {{branch_name}}##Create a tar archive from the contents of the latest commit on a specific branch
git archive --verbose --format=zip HEAD##Create a zip archive from the current HEAD and print it to standard output
git archive --verbose --output={{path/to/file.zip}} HEAD##Same as above, but write the zip archive to file
git archive --verbose HEAD##Create a tar archive from the contents of the current HEAD and print it to standard output
git archive-file##Pack the currently checked out commit into a zip archive
git authors --list##Print a full list of committers to stdout instead of to the `AUTHORS` file
git authors --no-email##Append the list of committers, excluding emails, to the `AUTHORS` file and open it in the default editor
git authors##Append the list of committers to the `AUTHORS` file and open it in the default editor
git bisect reset##After `git bisect` pinpoints the faulty commit, end the bisect session and return to the previous branch
git bisect skip##Skip a commit during a bisect (e.g. one that fails the tests due to a different issue)
git bisect start {{bad_commit}} {{good_commit}}##Start a bisect session on a commit range bounded by a known buggy commit, and a known clean (typically older) one
git bisect {{good|bad}}##For each commit that `git bisect` selects, mark it as "bad" or "good" after testing it for the issue
git blame -e {{file}}##Print file with author email and commit hash on each line
git blame {{file}}##Print file with author name and commit hash on each line
git blame-someone-else "{{author <someone@example.com>}}" {{commit}}##Change the commiter and author of a commit
git branch --all --contains {{commit_hash}}##List which branches include a specific Git commit in their history
git branch --all##List all branches (local and remote; the current branch is highlighted by `*`)
git branch --show-current##Show the name of the current branch
git branch -d {{branch_name}}##Delete a local branch (must not have it checked out to do this)
git branch -m {{old_branch_name}} {{new_branch_name}}##Rename a branch (must not have it checked out to do this)
git branch {{branch_name}} {{commit_hash}}##Create new branch based on a specific commit
git branch {{branch_name}}##Create new branch based on the current commit
git browse {{upstream}}##Open a specific upstream in the default browser
git browse##Open the first upstream in the default browser
git brv##List each branch showing date, latest commit hash and message
git bug add##Create a new bug
git bug ls "{{search_query}}" baz##Search for bugs by text content
git bug ls "{{status}}:{{open}} {{sort}}:{{edit}}"##Filter and sort bugs using a query
git bug ls##List existing bugs
git bug pull##You can pull for updates
git bug push##You can push your new entry to a remote
git bug user create##Create a new identity
git bugreport --output-directory {{path/to/directory}}##Create a new bug report file in the specified directory, creating it if it does not exist
git bugreport --suffix {{%m%d%y}}##Create a new bug report file with the specified filename suffix in `strftime` format
git bugreport##Create a new bug report file in the current directory
git bundle create {{path/to/file.bundle}} --all##Create a bundle file of all branches
git bundle create {{path/to/file.bundle}} --since={{7.days}} {{HEAD}}##Create a bundle file of the latest 7 days
git bundle create {{path/to/file.bundle}} -{{5}} {{HEAD}}##Create a bundle file of the last 5 commits of the current branch
git bundle create {{path/to/file.bundle}} {{branch_name}}##Create a bundle file that contains all objects and references of a specific branch
git bundle unbundle {{path/to/file.bundle}}##Print to the standard output the list of references contained in a bundle
git bundle verify {{path/to/file.bundle}}##Verify that a bundle file is valid and can be applied to the current repository
git cat-file -p {{HEAD~2}}##Pretty-[p]rint the contents of a given Git object based on its type
git cat-file -s HEAD##Get the [s]ize of the HEAD commit in bytes
git cat-file -t {{8c442dc3}}##Get the [t]ype (blob, tree, commit, tag) of a given Git object
git changelog --list --start-tag {{2.1.0}}##List a range of commits from the tag named `2.1.0` to now
git changelog --list##List commits from the current version
git changelog --prune-old##Replace contents of current changelog file entirely
git changelog --start-commit {{0b97430}} --final-tag {{1.0.0}}##List pretty formatted range of commits between the commit `0b97430` and the tag `1.0.0`
git changelog --start-tag {{0.5.0}} --final-tag {{1.0.0}}##List pretty formatted range of commits between the tag `0.5.0` and the tag `1.0.0`
git changelog {{CHANGELOG.md}}##Specify `CHANGELOG.md` as the output file
git changelog##Update existing file or create a new `History.md` file with the commit messages since the latest Git tag
git check-attr --all {{path/to/file1}} {{path/to/file2}}##Check the value of a specific attribute on files
git check-attr --all {{path/to/file}}##Check the values of all attributes on a file
git check-attr {{attribute}} {{path/to/file1}} {{path/to/file2}}##Check the value of a specific attribute on one or more files
git check-attr {{attribute}} {{path/to/file}}##Check the value of a specific attribute on a file
git check-ignore --no-index {{path/to/files_or_directories}}##Do not check the index (used to debug why paths were tracked and not ignored)
git check-ignore --stdin < {{path/to/file_list}}##Use pathnames, one per line, from stdin
git check-ignore --verbose {{path/to/files_or_directories}}##Include details about the matching pattern for each path
git check-ignore {{path/to/file_or_directory}}##Check whether a file or directory is ignored
git check-ignore {{path/to/file}} {{path/to/directory}}##Check whether multiple files or directories are ignored
git check-mailmap "<{{email@example.com}}>"##Look up the canonical name associated with an email address
git check-ref-format --branch @{-1}##Print the name of the last branch checked out
git check-ref-format --normalize {{refs/head/refname}}##Normalize a refname
git check-ref-format {{refs/head/refname}}##Check the format of the specified refname
git checkout -##Switch to the previously checked out branch
git checkout --track {{remote_name}}/{{branch_name}}##Switch to an existing remote branch
git checkout -b {{branch_name}} {{reference}}##Create and switch to a new branch based on a specific reference (branch, remote/branch, tag are examples of valid references)
git checkout -b {{branch_name}}##Create and switch to a new branch
git checkout .##Discard all unstaged changes in the current directory (see `git reset` for more undo-like commands)
git checkout {{branch_name}} -- {{filename}}##Replace a file in the current directory with the version of it committed in a given branch
git checkout {{branch_name}}##Switch to an existing local branch
git checkout {{commit_hash|tag|branch}} {{target}} && dvc checkout {{target}}##Checkout a specific version of a target from a different Git commit/tag/branch
git checkout {{filename}}##Discard unstaged changes to a given file
git checkout-index --all --force --no-create##Restore any files changed since the last commit, ignoring any files that were deleted
git checkout-index --all --force --prefix={{path/to/export_directory/}}##Export a copy of the entire tree at the last commit to the specified directory (the trailing slash is important)
git checkout-index --all --force##Restore any files deleted or changed since the last commit
git checkout-index --all##Restore any files deleted since the last commit
git cherry -v##Show commits (and their messages) with equivalent commits upstream
git cherry {{origin}} {{topic}} {{base}}##Limit commits to those within a given limit
git cherry {{origin}} {{topic}}##Specify a different upstream and topic branch
git cherry-pick -n {{commit}}##Add the changes of a commit to the working directory, without creating a commit
git cherry-pick {{commit_1}} {{commit_2}}##Apply multiple (non-sequential) commits to the current branch
git cherry-pick {{commit}}##Apply a commit to the current branch
git cherry-pick {{start_commit}}~..{{end_commit}}##Apply a range of commits to the current branch (see also `git rebase --onto`)
git clean --dry-run##Show what files would be deleted without actually deleting them
git clean -f##Forcefully delete files that are not tracked by Git
git clean -fd##Forcefully delete directories that are not tracked by Git
git clean -i##Interactively delete files that are not tracked by Git
git clean -x##Delete untracked files, including ignored files in `.gitignore` and `.git/info/exclude`
git clean##Delete files that are not tracked by Git
git clear##Reset all tracked files and delete all untracked files even if they are included in the `.gitignore`
git clear-soft##Reset all tracked files and delete all untracked files
git clone --branch {{name}} --single-branch {{remote_repository_location}}##Clone an existing repository only fetching a specific branch
git clone --config core.sshCommand="{{ssh -i path/to/private_ssh_key}}" {{remote_repository_location}}##Clone an existing repository using a specific SSH command
git clone --depth {{10}} {{remote_repository_location}}##Clone an existing repository only fetching the 10 most recent commits on the default branch (useful to save time)
git clone --recursive {{remote_repository_location}}##Clone an existing repository and its submodules
git clone -l {{path/to/local/repository}}##Clone a local repository
git clone -q {{remote_repository_location}}##Clone quietly
git clone {{remote_repository_location}} {{path/to/directory}}##Clone an existing repository into a specific directory
git clone {{remote_repository_location}}##Clone an existing repository
git coauthor {{name}} {{name@example.com}}##Insert an additional author to the last Git commit
git cola --amend##Start git cola in amend mode
git cola --prompt##Prompt for a Git repository. Defaults to the current directory
git cola --repo {{path/to/git-repository}}##Open the Git repository at mentioned path
git cola --status-filter {{filter}}##Apply the path filter to the status widget
git cola##Start git cola
git commit --amend##Update the last commit by adding the currently staged changes, changing the commit's hash
git commit --file {{path/to/commit_message_file}}##Commit staged files with a message read from a file
git commit -S -m "{{message}}"##Commit staged files and [S]ign them with the GPG key defined in `~/.gitconfig`
git commit -a -m "{{message}}"##Auto stage all modified files and commit with a message
git commit -m "{{message}}" --allow-empty##Create a commit, even if there are no staged files
git commit -m "{{message}}"##Commit staged files to the repository with a message
git commit {{path/to/file1}} {{path/to/file2}}##Commit only specific (already staged) files
git commit-graph write##Write a commit-graph file for the packed commits in the repository's local `.git` directory
git commit-tree {{tree}} -F {{path/to/file}}##Create a commit object reading the message from a file (use `-` for stdin)
git commit-tree {{tree}} -m "{{message}}" --gpg-sign##Create a GPG-signed commit object
git commit-tree {{tree}} -m "{{message}}" -p {{parent_commit_sha}}##Create a commit object with the specified parent commit object
git commit-tree {{tree}} -m "{{message}}"##Create a commit object with the specified message
git commits-since {{last month}}##Display commits since last month
git commits-since {{last week}}##Display commits since last week
git commits-since {{yesterday 2pm}}##Display commits since yesterday 2pm
git commits-since {{yesterday}}##Display commits since yesterday
git config --edit##Edit the Git configuration for the current repository in the default editor
git config --global --edit##Edit the global Git configuration in the default editor
git config --global --unset alias.unstage##Revert a global configuration entry to its default value
git config --global alias.unstage "reset HEAD --"##Set the global value of a given configuration entry
git config --global diff.tool "{{meld}}"##Set the default diff tool to meld
git config --list --global##List only global configuration entries (stored in `~/.gitconfig`)
git config --list --local##List only local configuration entries (stored in `.git/config` in the current repository)
git config --list##List all configuration entries that have been defined either locally or globally
git config -f .lfsconfig lfs.url {{lfs_endpoint_url}}##Change the Git LFS endpoint URL (useful if the LFS server is separate from the Git server)
git config alias.unstage##Get the value of a given configuration entry
git contrib {{author}}##Display all commit hashes and their corresponding commit messages from a specific author
git count --all##Print the number of commits per contributor and the total number of commits
git count##Print the total number of commits
git count-objects --human-readable --verbose##Display more verbose information, displaying sizes in human-readable units
git count-objects --human-readable##Display a count of all objects and their total disk usage, displaying sizes in human-readable units
git count-objects --verbose##Display more verbose information
git count-objects##Count all objects and display the total disk usage
git cp {{file}} {{new_file}}##Copy an existing file in a Git repo, staying in the same directory
git cp {{path/to/file}} {{path/to/new_file}}##Copy an existing file in a Git repo and place it elsewhere
git create-branch --remote upstream {{branch_name}}##Create a branch locally and on upstream (through forks)
git create-branch --remote {{branch_name}}##Create a branch locally and on origin
git create-branch {{branch_name}}##Create a local branch
git daemon --base-path={{path/to/directory}} --export-all --reuseaddr##Launch a Git daemon with a specific base directory and allow pulling from all sub-directories that look like Git repositories
git daemon --export-all {{path/to/directory1}} {{path/to/directory2}}##Launch a Git daemon with a whitelisted set of directories
git daemon {{path/to/directory}} --enable=receive-pack --informative-errors --verbose##Launch a Git daemon for the specified directory, verbosely printing log messages and allowing Git clients to write to it
git delete-branch {{branch_name1 branch_name2 ...}}##Delete multiple local and remote Git branches
git delete-branch {{branch_name}}##Delete a local and remote Git branch
git delete-merged-branches##Delete merged branches
git delete-tag {{tag_version}}##Delete a tag
git delta {{branch_1}} {{branch_2}}##List files from a specific branch that differ from another specific branch
git delta {{main}}##List files from the current checked out branch that differ from the `main` branch
git describe --abbrev={{4}}##Create a name with 4 digits for the abbreviated commit hash
git describe --all##Generate a name with the tag reference path
git describe {{branch_name}}##Create a name for the last commit of a given branch
git describe {{v1.0.0}}##Describe a Git tag
git describe##Create a unique name for the current commit (the name contains the most recent annotated tag, the number of additional commits, and the abbreviated commit hash)
git diff 'HEAD@{3 months|weeks|days|hours|seconds ago}'##Show changes from all commits since a given date/time (a date expression, e.g. "1 week 2 days" or an ISO date)
git diff --name-only {{commit}}##Show only names of changed files since a given commit
git diff --staged##Show only staged (added, but not yet committed) changes
git diff --summary {{commit}}##Output a summary of file creations, renames and mode changes since a given commit
git diff HEAD##Show all uncommitted changes (including staged ones)
git diff {{branch_1}}..{{branch_2}} [--] {{path/to/file}}##Compare a single file between two branches or commits
git diff {{branch}}:{{path/to/file2}} {{path/to/file}}##Compare different files from the current branch to other branch
git diff##Show unstaged, uncommitted changes
git diff-files --name-only##Show only the names of changed files
git diff-files --summary##Output a summary of extended header information
git diff-files {{path/to/file}}##Compare only specified files
git diff-files##Compare all changed files
git difftool --staged##Use the default diff tool to show staged changes
git difftool --tool-help##List available diff tools
git difftool --tool={{opendiff}} {{commit}}##Use a specific tool (opendiff) to show changes since a given commit
git effort -- --author="{{username}}"##Display files modified by a specific author, showing commits and active days
git effort -- --since="{{last month}}"##Display files modified since a specific time/date, showing commits and active days
git effort --above {{5}}##Display files modified by a specific number of commits or more, showing commits and active days
git effort {{path/to/directory/*}}##Display all files in a specific directory, showing commits and active days
git effort {{path/to/file_or_directory1 path/to/file_or_directory2 ...}}##Display only the specified files or directories, showing commits and active days
git effort##Display each file in the repository, showing commits and active days
git extras --help##Display help and subcommands
git extras --version##Print the version of installed `git-extras`
git extras update##Install or upgrade `git-extras` commands
git fame --bytype##Display contributions per file extension
git fame --excl "{{regular_expression}}"##Exclude files/directories that match the specified regular expression
git fame --format {{pipe|yaml|json|csv|tsv}}##Display contributions in the specified format
git fame --ignore-whitespace##Ignore whitespace changes
git fame --since "{{3 weeks ago|2021-05-13}}"##Calculate contributions made after the specified date
git fame -C##Detect inter-file line moves and copies
git fame -M##Detect intra-file line moves and copies
git fame##Calculate contributions for the current Git repository
git fetch --all##Fetch the latest changes from all remote upstream repositories
git fetch --prune##Delete local references to remote branches that have been deleted upstream
git fetch --tags##Also fetch tags from the remote upstream repository
git fetch --tags##Get updated tags from upstream
git fetch {{remote_name}}##Fetch new branches from a specific remote upstream repository
git fetch##Fetch the latest changes from the default remote upstream repository (if set)
git filter-repo --replace-text <(echo '{{find}}==>{{replacement}}')##Replace a sensitive string in all files
git flow feature finish {{feature}}##Finish development on a feature branch, merging it into the `develop` branch and deleting it
git flow feature publish {{feature}}##Publish a feature to the remote server
git flow feature pull origin {{feature}}##Get a feature published by another user
git flow feature start {{feature}}##Start developing on a feature branch based on `develop`
git flow init##Initialize it inside an existing Git repository
git for-each-repo --config={{global_configuration_variable}} {{pull}}##Run `git pull` on each repository listed in a global configuration variable
git for-each-repo --config={{maintenance.repo}} {{maintenance run}}##Run maintenance on each of a list of repositories stored in the `maintenance.repo` user configuration variable
git fork {{https://github.com/tldr-pages/tldr}}##Fork and clone a GitHub repository by its URL
git fork {{tldr-pages/tldr}}##Fork and clone a GitHub repository by its slug
git format-patch -{{3}}##Write a `.patch` file for the 3 latest commits
git format-patch {{origin}}##Create an auto-named `.patch` file for all the unpushed commits
git format-patch {{revision_1}}..{{revision_2}}##Write a `.patch` file for all the commits between 2 revisions to stdout
git fsck --root##List all root nodes found
git fsck --tags##List all tags found
git fsck##Check the current repository
git gc --aggressive##Aggressively optimise, takes more time
git gc --help##View full usage
git gc --no-prune##Do not prune loose objects (prunes by default)
git gc --quiet##Suppress all output
git gc##Optimise the repository
git graft {{source_branch}} {{target_branch}}##Merge all commits not present on the target branch from the source branch to target branch, and delete the source branch
git grep --recurse-submodules {{search_string}}##Search for a string in tracked files, including submodules
git grep {{search_string}} $(git rev-list --all)##Search for a string across all branches
git grep {{search_string}} -- {{file_glob_pattern}}##Search for a string in files matching a pattern in tracked files
git grep {{search_string}} {{HEAD~2}}##Search for a string at a specific point in history
git grep {{search_string}}##Search for a string in tracked files
git help --all##Display a list of all available Git subcommands
git help --config##List all possible configuration variables
git help --guide##List the available guides
git help --web {{subcommand}}##Display help about a specific Git subcommand in a web browser
git help {{subcommand}}##Display help about a specific Git subcommand
git help {{subcommand}}##Show help on a Git subcommand (like `clone`, `add`, `push`, `log`, etc.)
git ignore {{file_pattern}} --global##Ignore file(s) globally, updating global `.gitignore` file
git ignore {{file_pattern}} --private##Ignore file(s) privately, updating `.git/info/exclude` file
git ignore {{file_pattern}}##Ignore file(s) locally, updating local `.gitignore` file
git ignore##Show the content of all global and local `.gitignore` files
git ignore-io list##List available templates
git ignore-io {{item_a,item_b,item_n}}##Generate a .gitignore template
git imerge continue --no-edit##Continue imerge operation after resolving conflicts (`git add` the conflicted files, first)
git imerge diagram##Show ASCII diagram of in-progress merge or rebase
git imerge finish##Wrap up imerge operation, after all conflicts are resolved
git imerge merge {{branch_to_be_merged}}##Start imerge-based merge (checkout the branch to merge into, first)
git imerge rebase {{branch_to_rebase_onto}}##Start imerge-based rebase (checkout the branch to be rebased, first)
git info --no-config##Display remote locations, remote and local branches and most recent commit data
git info##Display remote locations, remote and local branches, most recent commit data and `.git/config` settings
git init --bare##Initialize a barebones repository, suitable for use as a remote over ssh
git init --initial-branch={{branch_name}}##Initialize a repository with the specified name for the initial branch
git init --object-format={{sha256}}##Initialize a repository using SHA256 for object hashes (requires Git version 2.29+)
git init##Initialize a new local repository
git instaweb --restart##Restart the currently running GitWeb server
git instaweb --start --browser##Also auto-launch a web browser
git instaweb --start --httpd {{lighttpd|apache2|mongoose|plackup|webrick}}##Use a specified HTTP daemon
git instaweb --start --local##Listen only on localhost
git instaweb --start --port {{1234}}##Listen on a specific port
git instaweb --start##Launch a GitWeb server for the current Git repository
git instaweb --stop##Stop the currently running GitWeb server
git lfs checkout##Checkout all Git LFS objects
git lfs fetch##Fetch all Git LFS objects
git lfs install##Initialise Git LFS
git lfs ls-files##List tracked files that have been committed
git lfs push --all {{remote_name}} {{branch_name}}##Push all Git LFS objects to the remote server (useful if errors are encountered)
git lfs track '{{*.bin}}'##Track files that match a glob
git lfs track##List tracked patterns
git local-commits##Show commits that haven't been pushed
git lock {{path/to/file}}##Disable the ability to commit changes of a local file
git locked##List all local locked files
git log --before="{{2017-01-29}}" --after="{{2017-01-17}}"##Show commits between two dates (yyyy-mm-dd)
git log --oneline --decorate --all --graph##Show a graph of all commits, tags and branches in the entire repo
git log --oneline --graph##Show a graph of commits in the current branch using only the first line of each commit message
git log --stat##Show an overview of which file(s) changed in each commit
git log -i --grep {{search_string}}##Show only commits whose messages include a given string (case-insensitively)
git log -n {{number}} --author={{author}}##Show the last N commits from a certain author
git log -p {{path/to/file_or_directory}}##Show the history of a particular file or directory, including differences
git log##Show the sequence of commits starting from the current one, in reverse chronological order of the Git repository in the current working directory
git ls-crypt##List the currently encrypted files
git ls-files --deleted##Show deleted files
git ls-files --modified##Show modified and deleted files
git ls-files --others --exclude-standard##Show untracked files, not ignored
git ls-files --others##Show ignored and untracked files
git ls-remote --heads##Show only heads references in the default remote repository
git ls-remote --tags##Show only tags references in the default remote repository
git ls-remote {{repository_name}} "{{pattern}}"##Show references from a remote repository filtered by a pattern
git ls-remote {{repository_url}}##Show all references from a remote repository based on name or URL
git ls-remote##Show all references in the default remote repository
git ls-tree --name-only {{commit_hash}}##List only the filenames of the tree on a commit
git ls-tree -r {{commit_hash}}##List the contents of the tree on a commit, recursing into subtrees
git ls-tree {{branch_name}}##List the contents of the tree on a branch
git mailinfo --scissors {{message|patch}}##Remove everything from the body before a scissors line (e.g. "-->* --") and retrieve the message or patch
git mailinfo -k {{message|patch}}##Extract but remove leading and trailing whitespace
git mailinfo {{message|patch}}##Extract the patch and author data from an email message
git maintenance register##Register the current repository in the user's list of repositories to daily have maintenance run
git maintenance run --task={{commit-graph|gc|incremental-repack|loose-objects|pack-refs|prefetch}}##Run a specific maintenance task on the current repository
git maintenance start##Start running maintenance on the current repository
git maintenance stop##Halt the background maintenance schedule for the current repository
git maintenance unregister##Remove the current repository from the user's maintenance repository list
git merge --abort##Abort a merge in case of conflicts
git merge --no-ff {{branch_name}}##Merge a branch and create a merge commit
git merge -e {{branch_name}}##Edit the merge message
git merge {{branch_name}}##Merge a branch into your current branch
git mergetool --gui##Explicitly use the GUI merge tool (see the `merge.guitool` config variable)
git mergetool --no-gui##Explicitly use the regular merge tool (see the `merge.tool` config variable)
git mergetool --no-prompt##Don't prompt before each invocation of the merge tool
git mergetool --tool {{tool_name}}##Launch the merge tool identified by a name
git mergetool --tool-help##List valid merge tools
git mergetool##Launch the default merge tool to resolve conflicts
git missing {{branch_1}} {{branch_2}}##Show commits which aren't shared between two branches
git missing {{branch}}##Show commits which aren't shared between the currently checked-out branch and another branch
git mr clean##Clean up old merge request branches
git mr {{mr_number}} {{remote}}##Check out a merge request from a specific remote
git mr {{mr_number}}##Check out a specific merge request
git mr {{url}}##Checkout a merge request from its URL
git mv --force {{file}} {{target}}##Overwrite the file in the target path if it exists
git mv {{filename}} {{new_filename}}##Rename file and add renaming to the next commit
git mv {{path/to/file}} {{new/path/to/file}}##Move file inside the repo and add the movement to the next commit
git notes append --message="{{message_text}}"##Append a note to a specified object, specifying the message
git notes append {{object}}##Append a note to a specified object (opens the default text editor)
git notes copy {{source_object}} {{target_object}}##Copy a note from one object to another
git notes edit [{{object}}]##Edit an existing note (defaults to HEAD)
git notes list [{{object}}]##List all notes attached to a given object (defaults to HEAD)
git notes list##List all notes and the objects they are attached to
git notes remove {{object}}##Remove all the notes added to a specified object
git notes show [{{object}}]##Show the notes attached to a given object (defaults to HEAD)
git obliterate {{file_1 file_2 ...}} -- {{commit_hash_1}}..{{commit_hash_2}}##Erase the existence of specific files between 2 commits
git obliterate {{file_1 file_2 ...}}##Erase the existence of specific files
git pr clean##Clean up old pull request branches
git pr {{pr_number}} {{remote}}##Check out a pull request from a specific remote
git pr {{pr_number}}##Check out a specific pull request
git pr {{url}}##Check out a pull request from its URL
git prune --dry-run##Report what would be removed by Git prune without removing it
git prune --progress##Prune unreachable objects while showing progress
git prune --verbose##Prune unreachable objects and display what has been pruned to stdout
git pull --rebase##Download changes from default remote repository and use fast-forward
git pull {{path/to/file.bundle}} {{branch_name}}##Unbundle a specific branch from a bundle file into the current repository
git pull {{remote_name}} {{branch}}##Download changes from given remote repository and branch, then merge them into HEAD
git pull##Download changes from default remote repository and merge it
git push --all {{remote_name}}##Send changes on all local branches to their counterparts in a given remote repository
git push --prune {{remote_name}}##Remove remote branches that don't have a local counterpart
git push --tags##Publish tags that aren't yet in the remote repository
git push -u {{remote_name}} {{local_branch}}##Send changes from a specific local branch to its remote counterpart, and set the remote one as the default push/pull target of the local one
git push {{remote_name}} --delete {{remote_branch_name}}##Delete a remote branch
git push {{remote_name}} --delete {{remote_branch}}##Delete a branch in a remote repository
git push {{remote_name}} {{local_branch}}##Send changes from a specific local branch to its remote counterpart
git push {{remote_name}} {{local_branch}}:{{remote_branch}}##Send changes from a specific local branch to a specific remote branch
git push##Send local changes in the current branch to its default remote counterpart
git range-diff {{base1}}..{{rev1}} {{base2}}..{{rev2}}##Diff the changes of two commit ranges, e.g. to check whether conflicts have been resolved appropriately when rebasing commits from `base1` to `base2`
git range-diff {{commit_1}}^! {{commit_2}}^!##Diff the changes of two individual commits
git range-diff {{theirs}}...{{ours}}##Diff the changes of ours and theirs from their common ancestor, e.g. after an interactive rebase
git reauthor --all --correct-email {{name@example.com}} --correct-name {{name}}##Change the email and name of all commits, regardless of their original author
git reauthor --old-email {{old@example.com}} --correct-email {{new@example.com}} --correct-name "{{name}}"##Change an author's email and name across the whole Git repository
git reauthor --old-email {{old@example.com}} --use-config##Change the email and name to the ones defined in the Git config
git rebase --abort##Abort a rebase in progress (e.g. if it is interrupted by a merge conflict)
git rebase --continue##Continue a rebase that was interrupted by a merge failure, after editing conflicting files
git rebase --onto {{new_base}} {{old_base}}##Move part of the current branch onto a new base, providing the old base to start from
git rebase --skip##Continue a rebase that was paused due to merge conflicts, by skipping the conflicted commit
git rebase -X theirs {{branch_name}}##Auto-resolve any conflicts by favoring the working branch version (`theirs` keyword has reversed meaning in this case)
git rebase -i {{HEAD~5}}##Reapply the last 5 commits in-place, stopping to allow them to be reordered, omitted, combined or modified
git rebase -i {{target_base_branch_or_commit_hash}}##Start an interactive rebase, which allows the commits to be reordered, omitted, combined or modified
git rebase {{new_base_branch}}##Rebase the current branch on top of another specified branch
git reflog -n {{5}}##Show only the 5 latest entries in the reflog
git reflog {{branch_name}}##Show the reflog for a given branch
git reflog##Show the reflog for HEAD
git release {{tag_name}} -s##Create and push a signed release
git release {{tag_name}}##Create and push a release
git release {{{tag_name}}} -m "{{message}}"##Create and push a release with a message
git remote -v##Show a list of existing remotes, their names and URL
git remote add {{remote_name}} {{remote_url}}##Add a remote
git remote remove {{remote_name}}##Remove a remote
git remote rename {{old_name}} {{new_name}}##Rename a remote
git remote set-url {{remote_name}} {{new_url}}##Change the URL of a remote (use `--add` to keep the existing URL)
git remote show {{remote_name}}##Show information about a remote
git rename-branch {{new_branch_name}}##Rename the branch you are currently on
git rename-branch {{old_branch_name}} {{new_branch_name}}##Rename a specific branch
git rename-remote {{upstream}} {{origin}}##Change the upstream remote to origin
git rename-tag {{old_tag_name}} {{new_tag_name}}##Rename an existing Git tag locally and remotely
git repack -d##Also remove redundant objects after packing
git repack##Pack unpacked objects in the current directory
git repl##Start an interactive Git shell
git replace --delete {{object}}##Delete existing replace refs for the given objects
git replace --edit {{object}}##Edit an object’s content interactively
git replace {{object}} {{replacement}}##Replace any commit with a different one, leaving other commits unchanged
git request-pull {{v0.1}} {{https://example.com/project}} {{foo:bar}}##Produce a request summarizing the changes between the v0.1 release on the `foo` branch and the local `bar` branch
git request-pull {{v1.1}} {{https://example.com/project}} {{branch_name}}##Produce a request summarizing the changes between the v1.1 release and a specified branch
git reset --hard {{commit}}##Reset the repository to a given commit, discarding committed, staged and uncommitted changes since then
git reset --hard##Discard any uncommitted changes, staged or not (for only unstaged changes, use `git checkout`)
git reset --patch {{path/to/file}}##Interactively unstage portions of a file
git reset --soft HEAD~2##Undo the last two commits, adding their changes to the index, i.e. staged for commit
git reset HEAD~##Undo the last commit, keeping its changes (and any further uncommitted changes) in the filesystem
git reset {{path/to/file(s)}}##Unstage specific file(s)
git reset##Unstage everything
git reset-file {{path/to/file}} {{commit_hash}}##Reset a file to a specific commit
git reset-file {{path/to/file}}##Reset a file to HEAD
git restore --patch##Interactively select sections of files to restore
git restore --source {{commit}} {{path/to/file}}##Restore an unstaged file to the version of a specific commit
git restore --staged :/##Unstage all files
git restore --staged {{path/to/file}}##Unstage a file
git restore --worktree --staged :/##Discard all changes to files, both staged and unstaged
git restore :/##Discard all unstaged changes to tracked files
git restore {{path/to/file}}##Restore an unstaged file to the version of the current commit (HEAD)
git rev-list --merges {{commit}}##List all merge commits on a specific commit
git rev-list --since={{'2019-12-01 00:00:00'}} {{branch_name}}##List commits more recent than a specific date, on a specific branch
git rev-list -n 1 HEAD -- {{path/to/file}}##Print the latest commit that changed (add/edit/remove) a specific file on the current branch
git rev-list {{HEAD}}##List all commits on the current branch
git rev-list {{commit_hash}}..HEAD | xargs core-validate-commit##Validate a range of commits
git rev-list {{tag_name}}..HEAD --count##Print the number of commits since a specific tag
git rev-parse --abbrev-ref {{HEAD}}##Get the current branch name
git rev-parse --show-toplevel##Get the absolute path to the root directory
git rev-parse {{HEAD}} | git commit-graph write --stdin-commits --append##Write a commit-graph file containing all commits in the current commit-graph file along with those reachable from `HEAD`
git rev-parse {{branch_name}}##Get the commit hash of a branch
git revert -n {{0c01a9..9a1743}}##Don't create new commits, just change the working tree
git revert HEAD~{{4}}##Revert the 5th last commit
git revert {{HEAD}}##Revert the most recent commit
git revert {{branch_name~5..branch_name~2}}##Revert multiple commits
git rm --cached {{file}}##Remove file from repository index but keep it untouched locally
git rm -r {{directory}}##Remove directory
git rm {{file}}##Remove file from repository index and filesystem
git root --relative##Print the current working directory relative to the root of the current Git repository
git root##Print the absolute path of the current Git repository
git secret add {{path/to/file}}##Register a secret file
git secret hide##Encrypt secrets
git secret init##Initialize `git-secret` in a local repository
git secret killperson {{email}}##Revoke access by email
git secret reveal##Decrypt secret files
git secret tell -m##Grant access to the current Git user's email
git secret tell {{email}}##Grant access by email
git secret whoknows##List emails with access to secrets
git sed '{{find_text}}' '{{replace_text}}' -- {{path/to/directory}}##Replace a specific text in all files under a given directory
git sed '{{find_text}}' '{{replace_text}}'##Replace the specified text in the current repository
git sed -c '{{find_text}}' '{{replace_text}}'##Replace the specified text and then commit the resulting changes with a standard commit message
git sed -f g '{{find_text}}' '{{replace_text}}'##Replace the specified text, using regular expressions
git send-email -1 {{commit}}##Send a given commit
git send-email -1##Send the last commit in the current branch
git send-email -{{number_of_commits}} --annotate##Review and edit the email message for each patch you're about to send
git send-email -{{number_of_commits}} --compose##Send an introductory email message for the patch series
git send-email {{-10}}##Send multiple (e.g. 10) commits in the current branch
git setup {{path/to/directory}}##Create a Git repository in a specific directory and commit all files
git setup##Create a Git repository in the current directory and commit all files
git shortlog -c##View a summary of all the commits made, grouped by the committer identities (name and email)
git shortlog -n##View a summary of all the commits made, sorted by the number of commits made
git shortlog -sne --all##View all users, emails and the number of commits in all branches
git shortlog -sne##View all users, emails and the number of commits in the current branch
git shortlog HEAD~{{5}}..HEAD##View a summary of the last 5 commits (i.e. specify a revision range)
git shortlog##View a summary of all the commits made, grouped alphabetically by author name
git show --oneline -s {{commit}}##Show a commit's message in a single line, suppressing the diff output
git show --stat {{commit}}##Show only statistics (added/removed characters) about the changed files
git show --summary {{commit}}##Show only the list of added, renamed or deleted files
git show {{branch}}~{{3}}##Show information about the 3rd commit from the HEAD of a branch
git show {{commit}}##Show information about a given commit
git show {{revision}}:{{path/to/file}}##Show the contents of a file as it was at a given revision (e.g. branch, tag or commit)
git show {{tag}}##Show information about the commit associated with a given tag
git show##Show information about the latest commit (hash, message, changes, and other metadata)
git show-branch --all --list##List the latest commits in all branches
git show-branch --all##Compare both local and remote tracking branches
git show-branch --current {{commit|branch_name|ref}}##Compare a given branch with the current branch
git show-branch --more {{5}} {{commit|branch_name|ref}} {{commit|branch_name|ref}} {{...}}##Keep going a given number of commits past the common ancestor
git show-branch --remotes##Compare all remote tracking branches
git show-branch --sha1-name --current {{current|branch_name|ref}}##Display the commit name instead of the relative name
git show-branch {{branch_name|ref|commit}}##Compare commits in the history of multiple commits or branches
git show-branch {{branch_name|ref|commit}}##Show a summary of the latest commit on a branch
git show-index --object-format={{sha1|sha256}} {{path/to/file}}##Specify the hash algorithm for the index file (experimental)
git show-index {{path/to/file.idx}}##Read an IDX file for a Git packfile and dump its contents to stdout
git show-merged-branches##Print all branches which are merged into the current head
git show-ref --hash | git commit-graph write --stdin-commits##Write a commit-graph file containing all reachable commits
git show-ref --heads##Show only heads references
git show-ref --tags##Show only tags references
git show-ref --verify {{path/to/ref}}##Verify that a given reference exists
git show-ref##Show all refs in the repository
git show-tree##Show a decorated tree graph for all branches annotated with tags and branch names
git show-unmerged-branches##Print all branches which are not merged into the current HEAD
git sizer -h##See additional options
git sizer -v##Report all statistics
git sizer##Report only statistics that have a level of concern greater than 0
git squash --squash-msg HEAD~{{n}}##Squash the `n` latest commits and commit concatenating all individual messages
git squash HEAD~{{n}} "{{message}}"##Squash the `n` latest commits and commit with a message
git squash {{commit}}##Squash all commits starting with a specific commit on the current branch
git squash {{source_branch}}##Merge all commits from a specific branch into the current branch as a single commit
git stage -A##Add all files (tracked and untracked)
git stage -f##Also add ignored files
git stage -i##Interactively stage a file
git stage -p {{path/to/file}}##Interactively stage parts of a given file
git stage -p##Interactively stage parts of files
git stage -u##Only add already tracked files
git stage {{path/to/file}}##Add a file to the index
git standup -a all -d {{10}}##Show all the commits from all contributors for the last 10 days
git standup -a {[name|email}} -d {{10}} -g##Show a given author's commits from the last 10 days and whether they are GPG signed
git standup -a {{name|email}} -d {{10}}##Show a given author's commits from the last 10 days
git standup -h##Display help
git stash -p##Interactively select parts of changed files for stashing
git stash -u##Stash current changes, including new (untracked) files
git stash [push -m {{optional_stash_message}}]##Stash current changes, except new (untracked) files
git stash apply {{optional_stash_name_or_commit}}##Apply a stash (default is the latest, named stash@{0})
git stash clear##Drop all stashes
git stash drop {{optional_stash_name}}##Drop a stash (default is stash@{0})
git stash list##List all stashes (shows stash name, related branch and message)
git stash pop {{optional_stash_name}}##Apply a stash (default is stash@{0}), and remove it from the stash list if applying doesn't cause conflicts
git status --untracked-files=no##Don't show untracked files in the output
git status -s##Give output in [s]hort format
git status -sb##Show output in [s]hort format along with [b]ranch info
git status##Show changed files which are not yet added for commit
git stripspace --comment-lines < {{path/to/file}}##Convert all lines in a file into Git comments
git submodule add {{repository_url}} {{path/to/directory}}##Add a Git repository as a submodule at the specified directory
git submodule add {{repository_url}}##Add a Git repository as a submodule
git submodule foreach git pull##Update every submodule to its latest commit
git submodule update --init --recursive##Install a repository's specified submodules
git subtree add --prefix={{path/to/directory/}} --squash {{repository_url}} {{branch_name}}##Add a Git repository as a subtree
git subtree merge --prefix={{path/to/directory/}} --squash {{repository_url}} {{branch_name}}##Merge recent changes up to the latest subtree commit into the subtree
git subtree pull --prefix={{path/to/directory/}} {{repository_url}} {{branch_name}}##Update subtree repository to its latest commit
git subtree push --prefix={{path/to/directory/}} {{repository_url}} {{branch_name}}##Push commits to a subtree repository
git subtree split --prefix={{path/to/directory/}} {{repository_url}} -b {{branch_name}}##Extract a new project history from the history of a subtree
git summary --dedup-by-email##Display data about a Git repository, merging committers using different emails into 1 statistic for each author
git summary --line##Display data about a Git repository, showing the number of lines modified by each contributor
git summary {{commit|branch_name|tag_name}}##Display data about a Git repository since a commit-ish
git summary##Display data about a Git repository
git svn clone -r{{1234}}:HEAD {{https://svn.example.net/subversion/repo}} {{local_dir}}##Clone an SVN repository starting at a given revision number
git svn clone {{https://example.com/subversion_repo}} {{local_dir}}##Clone an SVN repository
git svn dcommit##Commit back to the SVN repository
git svn fetch##Fetch updates from the remote SVN repository without changing the Git HEAD
git svn rebase##Update local clone from the remote SVN repository
git switch -##Switch to the previous branch
git switch --create {{branch_name}} {{commit}}##Create a new branch based on an existing commit and switch to it
git switch --create {{branch_name}}##Create a new branch and switch to it
git switch --merge {{branch_name}}##Switch to a branch and automatically merge the current branch and any uncommitted changes into it
git switch --recurse-submodules {{branch_name}}##Switch to a branch and update all submodules to match
git switch {{branch_name}}##Switch to an existing branch
git symbolic-ref --delete refs/{{name}}##Delete a reference by name
git symbolic-ref --quiet --short refs/{{name}}##For scripting, hide errors with `--quiet` and use `--short` to simplify ("refs/heads/X" prints as "X")
git symbolic-ref -m "{{message}}" refs/{{name}} refs/heads/{{branch_name}}##Store a reference by name, including a message with a reason for the update
git symbolic-ref refs/{{name}} {{ref}}##Store a reference by a name
git symbolic-ref refs/{{name}}##Read a reference by name
git sync -s {{remote_name}} {{branch_name}}##Sync without cleaning untracked files
git sync origin main##Sync the current local branch with the remote main branch
git sync##Sync the current local branch with its remote branch
git tag --contains {{commit}}##List all tags whose ancestors include a given commit
git tag -d {{tag_name}}##Delete the tag with the given name
git tag {{tag_name}} -m {{tag_message}}##Create an annotated tag with the given message
git tag {{tag_name}} {{commit}}##Create a tag with the given name pointing to a given commit
git tag {{tag_name}}##Create a tag with the given name pointing to the current commit
git tag##List all tags
git touch {{path/to/file1 path/to/file2 ...}}##Create new files and add them to the index
git undo {{3}}##Remove a specific number of the most recent commits
git undo##Remove the most recent commit
git unlock {{path/to/file}}##Enable the ability to commit changes of a previously-locked local file
git update-index --skip-worktree {{path/to/modified_file}}##Pretend that a modified file is unchanged (`git status` will not show this as changed)
git update-ref -d {{HEAD}}##Delete a ref, useful for soft resetting the first commit
git update-ref -m {{message}} {{HEAD}} {{4e95e05}}##Update ref with a message
git var -l##[l]ist all Git logical variables
git var {{GIT_AUTHOR_IDENT|GIT_COMMITTER_IDENT|GIT_EDITOR|GIT_PAGER}}##Print the value of a Git logical variable
git verify-commit {{commit_hash1 optional_commit_hash2 ...}} --raw##Check commits for a GPG signature and print the raw details
git verify-commit {{commit_hash1 optional_commit_hash2 ...}} --verbose##Check commits for a GPG signature and show details of each commit
git verify-commit {{commit_hash1 optional_commit_hash2 ...}}##Check commits for a GPG signature
git verify-tag {{tag1 optional_tag2 ...}} --raw##Check tags for a GPG signature and print the raw details
git verify-tag {{tag1 optional_tag2 ...}} --verbose##Check tags for a GPG signature and show details for each tag
git verify-tag {{tag1 optional_tag2 ...}}##Check tags for a GPG signature
git whatchanged --since="{{2 hours ago}}"##Display logs and changes for recent commits within the specified time frame
git whatchanged {{path/to/file_or_directory}}##Display logs and changes for recent commits for specific files or directories
git whatchanged##Display logs and changes for recent commits
git worktree add {{path/to/directory}} -b {{new_branch}}##Create a new directory with a new branch checked out into it
git worktree add {{path/to/directory}} {{branch}}##Create a new directory with the specified branch checked out into it
git worktree list##List all the working directories attached to this repository
git worktree prune##Remove a worktree (after deleting worktree directory)
git {{subcommand}}##Execute a Git subcommand
git-filter-repo --path {{path/to/folder}} --invert-paths##Remove a single folder, keeping history
git-filter-repo --path {{path/to/folder}}##Extract a single folder, keeping history
git-filter-repo --path-rename {{path/to/folder/:}}##Move everything from sub-folder one level up
git-imerge remove && git checkout {{previous_branch}}##Abort imerge operation, and return to the previous branch
github-label-sync --access-token {{token}} --allow-added-labels {{repository_name}}##Keep labels that aren't in `labels.json`
github-label-sync --access-token {{token}} --dry-run {{repository_name}}##Perform a dry run instead of actually synchronising labels
github-label-sync --access-token {{token}} --labels {{url|path/to/json_file}} {{repository_name}}##Synchronise labels using a specific labels JSON file
github-label-sync --access-token {{token}} {{repository_name}}##Synchronise labels using a local `labels.json` file
github-label-sync {{repository_name}}##Synchronise using the `GITHUB_ACCESS_TOKEN` environment variable
gitk --max-count={{100}} --all##Show at most 100 changes in all branches
gitk --since="{{1 week ago}}"##Show commits made since 1 week ago
gitk --until="{{1/1/2015}}"##Show commits older than 1/1/2016
gitk {{path/to/file_or_directory}}##Show repository browser for a specific file or directory
gitk##Show the repository browser for the current Git repository
gitlab commit {{project_name}} {{commit_hash}}##Get info about a specific commit
gitlab create_project {{project_name}}##Create a new project
gitlab job_play {{project_name}} {{job_id}}##Start a specific CI job
gitlab pipeline_jobs {{project_name}} {{pipeline_id}}##Get info about jobs in a CI pipeline
gitlint --commits {{single_refspec_argument}}##The range of commits to lint
gitlint --extra-path {{path/to/directory}}##Path to a directory or python module with extra user-defined rules
gitlint --msg-filename {{path/to/filename}}##Path to a file containing a commit-msg
gitlint --staged##Read staged commit meta-info from the local repository
gitlint --target {{path/to/target_directory}}##Start a specific CI job
gitlint##Check the last commit message
gitmoji --commit##Start the commit wizard
gitmoji --config##Configure global preferences
gitmoji --init##Initialize the git hook (so `gitmoji` will be run every time `git commit` is run)
gitmoji --list##List all available emojis and their descriptions
gitmoji --remove##Remove the git hook
gitmoji --search {{keyword1}} {{keyword2}}##Search emoji list for a list of keywords
gitmoji --update##Update cached list of emojis from main repository
gitsome##Enter the gitsome shell (optional), to enable autocompletion and interactive help for Git (and gh) commands
gixy --skips {{http_splitting}}##Analyze nginx configuration but skip specific tests
gixy {{-l|-ll|-lll}}##Analyze nginx configuration with the specific severity level
gixy {{path/to/configuration_file_1}} {{path/to/configuration_file_2}}##Analyze nginx configuration files on the specific path
gixy##Analyze nginx configuration (default path `/etc/nginx/nginx.conf`)
glab alias delete {{alias_name}}##Delete a command shortcut
glab alias list##List all the aliases `glab` is configured to use
glab alias set --shell {{alias_name}} {{command}}##Set a shell command as a `glab` subcommand
glab alias set {{mrv}} '{{mr view}}'##Create a `glab` subcommand alias
glab alias set {{pv}} '{{pr view}}'##Create a `glab` subcommand alias
glab alias##Display the subcommand help
glab auth login --hostname {{gitlab.example.com}}##Log in to a specific GitLab instance
glab auth login --token {{token}}##Log in with a token
glab auth login##Log in with interactive prompt
glab auth status##Check authentication status
glab issue create --web##Create a new issue in the default web browser
glab issue create##Create a new issue
glab issue list --closed --author {{username}}##List closed issues made by a specific user
glab issue list --per-page {{10}} --label "{{bug}}"##List the last 10 issues with the `bug` label
glab issue list##View and filter the current repository's open issues
glab issue list##View and filter the open issues of the current repository
glab issue reopen {{issue_number}}##Reopen a specific issue
glab issue view --web {{issue_number}}##View an issue in the default browser
glab issue view {{issue_number}} --web##Display a specific issue in the default web browser
glab issue view {{issue_number}}##Display a specific issue
glab mr approve##Approve the merge request for the current branch
glab mr checkout {{mr_number}}##Check out a merge request locally
glab mr checkout {{mr_number}}##Check out a specific merge request locally
glab mr checkout {{pr_number}}##Check out a specific pull request locally
glab mr create --draft##Create a draft merge request
glab mr create --fill##Create a merge request, determining the title and description from the commit messages of the current branch
glab mr create --target-branch {{target_branch}} --title "{{title}}" --description "{{description}}"##Create a merge request specifying the target branch, title, and description
glab mr create --web##Start opening a merge request in the default web browser
glab mr create##Create a merge request
glab mr create##Create a merge request
glab mr create##Interactively create a merge request
glab mr diff##View the changes made in the merge request
glab mr list##List merge requests
glab mr merge --help##Display help
glab mr merge --remove-source-branch##Merge the merge request, removing the branch on both the local and the remote
glab mr merge --squash --message="{{commit_message_body}}"##Squash the current merge request into one commit with the message body and merge
glab mr merge {{mr_number}}##Merge the specified merge request, interactively
glab mr merge##Merge the merge request associated with the current branch interactively
glab mr merge##Merge the merge request associated with the current branch interactively
glab mr update --target-branch {{branch_name}}##Edit the target branch of a merge request
glab mr update##Edit a merge request interactively
glab mr view --web {{pr_number}}##View a pull request in the default web browser
glab pipeline list##Get the list of pipelines
glab pipeline list##List pipelines
glab pipeline run --branch {{branch_name}}##Run a manual pipeline on a specific branch
glab pipeline run##Run a manual pipeline on the current branch
glab pipeline status --branch {{branch_name}}##View a running pipeline on a specific branch
glab pipeline status##View a running pipeline on the current branch
glab release create {{tag}}##Create a new release
glab release delete {{tag}}##Delete a specific release
glab release download {{tag}}##Download assets from a specific release
glab release list##List releases in a Gitlab repository, limited to 30 items
glab release upload {{tag}} {{path/to/file1}} {{path/to/file2}}##Upload assets to a specific release
glab release view {{tag}}##Display information about a specific release
glab repo clone {{owner}}/{{repository}}##Clone a GitLab repository locally
glab repo clone {{owner}}/{{repository}}##Clone a repository
glab repo clone {{user}}/{{repository}} {{directory}}##Clone a repository into a specific directory
glab repo create {{name}}##Create a new repository (if the repository name is not set, the default name will be the name of the current directory)
glab repo fork {{owner}}/{{repository}} --clone##Fork and clone a repository
glab repo search -s {{search_string}}##Search some repositories in the GitLab instance
glab repo view {{owner}}/{{repository}} --web##View a repository in the default web browser
glab repo view {{owner}}/{{repository}} --web##View a repository in the web browser
glances -c {{hostname}}##Connect to a Glances server
glances -s --password##Require a password in (web) server mode
glances -s##Run in server mode to allow connections from other Glances clients
glances -w##Run in web server mode to show results in browser
glances##Run in terminal
glib-compile-resources --generate --target={{file.ext}} {{file.gresource.xml}}##Compile resources in `file.gresource.xml` to a chosen target file, with `.c`, `.h` or `.gresource` extension
glib-compile-resources --generate-dependencies {{file.gresource.xml}}##Print a list of resource files referenced in `file.gresource.xml`
glib-compile-resources --generate-source {{file.gresource.xml}}##Compile resources referenced in `file.gresource.xml` to a C source file
glib-compile-resources {{file.gresource.xml}}##Compile resources referenced in `file.gresource.xml` to a .gresource binary
glow -p {{path/to/file}}##View a Markdown file using a paginator
glow {{github.com/owner/repository}}##View a GitHub/GitLab README
glow {{https://example.com/file.md}}##View a file from a URL
glow {{path/to/file}}##Render a Markdown file to the terminal
glow##Run glow and select a file to view
gml2gv -?##Display help
gml2gv -o {{output.gv}} {{input.gml}}##Convert a graph from `gml` to `gv` format
gmssl sm2 -genkey -out {{path/to/file.pem}}##Generate an SM2 private key
gmssl sm2 -pubout -in {{path/to/file.pem}} -out {{path/to/file.pem.pub}}##Generate an SM2 public key from an existing private key
gmssl sm3 {{path/to/file}}##Generate an SM3 hash for a file
gmssl sms4 -d -in {{path/to/file.sms4}}##Decrypt a file using the SM4 cipher
gmssl sms4 -e -in {{path/to/file}} -out {{path/to/file.sms4}}##Encrypt a file using the SM4 cipher
gmssl version##Print version
gmssl zuc -d -in {{path/to/file.zuc}}##Decrypt a file using the ZUC cipher
gmssl zuc -e -in {{path/to/file}} -out {{path/to/file.zuc}}##Encrypt a file using the ZUC cipher
gnucash --nofile##Launch GnuCash and load an empty file
gnucash {{path/to/file.gnucash}}##Launch GnuCash and load the specified file
gnucash##Launch GnuCash and load the previously opened file
gnucash-cli --quotes get {{path/to/file.gnucash}}##Get quotes for currencies and stocks specified in a file and print them
gnucash-cli --report run --name "{{Balance Sheet}}" {{path/to/file.gnucash}}##Generate a financial report of a specific type, specified by `--name`
gnuplot --persist {{path/to/definition.plt}}##Persist the graph plot preview window after gnuplot exits
gnuplot -e "{{set output "path/to/filename.png" size 1024,768}}" {{path/to/definition.plt}}##Set the output format by executing a command before loading the definition file
gnuplot {{path/to/definition.plt}}##Plot the graph for the specified graph definition file
gnuplot##Start the interactive graph plotting shell
go bug##Open a web page to start a bug report
go build -o {{executable}} {{file}}.go##Compile a source file into a named executable
go build -o {{path/to/binary}} {{path/to/package}}##Compile a package
go build -o {{path/to/binary}} {{path/to/source.go}}##Compile, specifying the output filename
go build -race -o {{path/to/executable}} {{path/to/main/package}}##Compile a main package into an executable, enabling data race detection
go build {{path/to/main.go}}##Compile a 'package main' file (output will be the filename without extension)
go build##Compile the package present in the current directory
go clean -cache##Delete the build cache
go clean -modcache##Delete the module cache
go clean -n##Print the remove commands instead of actually removing anything
go clean -testcache##Delete all cached test results
go doc -all -src {{encoding/json.Number}}##Show a specific symbol
go doc -all -src {{encoding/json}}##Show also sources
go doc -all {{encoding/json}}##Show also documentation of symbols
go doc {{encoding/json}}##Show package documentation and exported symbols
go doc##Show documentation for the current package
go env -u {{GOBIN}}##Reset an environment variable's value
go env -w {{GOBIN}}={{path/to/directory}}##Set an environment variable to a value
go env {{GOPATH}}##Show a specific environment variable
go env##Show all environment variables
go fix {{packages}}##Update packages to use new APIs
go fmt -n##Print what format commands would've been run, without modifying anything
go fmt -x##Print which format commands are run as they are run
go fmt {{./...}}##Format the package in the current directory and all subdirectories (note the `...`)
go fmt {{path/to/package}}##Format a specific Go package in your import path (`$GOPATH/src`)
go fmt##Format Go source files in the current directory
go generate##Generate Go files by running commands within source files
go get {{example.com/pkg}}##Add a specified package to `go.mod` in module-mode or install the package in GOPATH-mode
go get {{example.com/pkg}}@{{none}}##Remove a specified package
go get {{example.com/pkg}}@{{v1.2.3}}##Modify the package with a given version in module-aware mode
go get {{package_path}}##Download and install a package, specified by its import path
go install {{golang.org/x/tools/gopls}}##Install a program at the version selected by `go.mod` in the current directory
go install {{golang.org/x/tools/gopls}}@{{latest}}##Install the latest version of a program, ignoring `go.mod` in the current directory
go install {{path/to/package}}##Compile and install a specific local package
go install##Compile and install the current package
go install##Compile and install the current package
go list -json time net/http##List packages in JSON format
go list -m -u all##List module dependencies and available updates
go list ./...##List packages
go list std##List standard packages
go mod download##Download modules to local cache
go mod init {{moduleName}}##Initialize new module in current directory
go mod init {{module_name}}##Initialize a new module in the current directory
go mod tidy##Add missing and remove unused modules
go mod vendor##Copy sources of all dependencies into the vendor directory
go mod verify##Verify dependencies have expected content
go run {{file}}.go##Compile and run a source file (it has to contain a `main` package)
go run {{path/to/file.go}}##Run a Go file
go run {{path/to/package}}##Run a main Go package
go test -cover##Test the package with coverage analysis
go test -v -bench . -benchtime {{50s}}##Test the package in the current directory and run all benchmarks for 50 seconds
go test -v -bench .##Test the package in the current directory and run all benchmarks
go test -v ./...##Test the packages in the current directory and all subdirectories (note the `...`)
go test -v##[v]erbosely test the package in the current directory
go test##Execute all test cases of the current package (files have to end with `_test.go`)
go test##Test the package found in the current directory
go tool -n {{command}} {{arguments}}##Print the command that would be executed, but do not execute it (similar to `whereis`)
go tool link {{path/to/main.o}}##Run the go link tool
go tool vet help {{check_name}}##View details and flags for a particular check
go tool vet help##List available checks that can be run with go vet
go tool {{command}} --help##Display documentation for a specified tool
go tool##List available tools
go version {{path/to/executable}}##Print the Go version used to build the named executable file
go version##Print Go version
go vet -c={{N}}##Display offending lines plus N lines of surrounding context
go vet -json##Output analysis and errors in JSON format
go vet {{path/to/file_or_directory}}##Check the Go package in the specified path
go vet##Check the Go package in the current directory
gobuster dir --url {{https://example.com/}} --wordlist {{path/to/file}}##Discover directories and files that match in the wordlist
gobuster dns --domain {{example.com}} --wordlist {{path/to/file}}##Discover subdomains
gobuster fuzz --url {{https://example.com/?FUZZ=value}} --wordlist {{path/to/file}}##Fuzz the name of a parameter
gobuster fuzz --url {{https://example.com/?parameter=FUZZ}} --wordlist {{path/to/file}}##Fuzz the value of a parameter
gobuster s3 --wordlist {{path/to/file}}##Discover Amazon S3 buckets
gobuster vhost --url {{https://example.com/}} --wordlist {{path/to/file}}##Discover other virtual hosts on the server
gocryptfs --masterkey {{path/to/cipher_dir}} {{path/to/mount_point}}##Mount with the explicit master key instead of password
gocryptfs --passwd {{path/to/cipher_dir}}##Change the password
gocryptfs --reverse {{path/to/plain_dir}} {{path/to/cipher_dir}}##Make an encrypted snapshot of a plain directory
gocryptfs -init {{path/to/cipher_dir}}##Initialize an encrypted filesystem
gocryptfs {{path/to/cipher_dir}} {{path/to/mount_point}}##Mount an encrypted filesystem
godoc -http=:{{6060}} -index -index_files={{path/to/file}}##Use the given index file to search the docs
godoc -http=:{{6060}}##Serve documentation as a web server on port 6060
godoc -write_index -index_files={{path/to/file}}##Create an index file
godoc {{fmt}} {{Printf}}##Display help for the function "Printf" of "fmt" package
godoc {{fmt}}##Display help for package "fmt"
godot --export {{preset}} {{output_path}}##Export a project for a given export preset (the preset must be defined in the project)
godot -e##Edit a project (the current directory must contain a `project.godot` file)
godot -p##Open the project manager even if the current directory contains a `project.godot` file
godot -s {{script.gd}}##Execute a standalone GDScript file (the script must inherit from `SceneTree` or `MainLoop`)
godot##Run a project if the current directory contains a `project.godot` file, otherwise open the project manager
gofmt -e {{source.go}}##Print all (including spurious) errors
gofmt -s -w {{source.go}}##Format a file, and then simplify the code, overwriting the original file
gofmt -w {{source.go}}##Format a file, overwriting the original file in-place
gofmt {{source.go}}##Format a file and display the result to the console
goimports -local {{path/to/package}} {{file}}.go##Set the import prefix string after 3rd-party packages (comma-separated list)
goimports -w -d {{file}}.go##Display diffs and write the result back to the source file
goimports -w {{file}}.go##Write the result back to the source file instead of the standard output
goimports {{file}}.go##Display the completed import source file
googler --json {{keyword}}##Show Google search result in JSON format
googler -j {{keyword}}##Search Google and open the first result in web browser
googler -n {{N}} {{keyword}}##Show N search results (default 10)
googler -u##Perform in-place self-upgrade
googler -w {{site}} {{keyword}}##Search one site for a keyword
googler -x {{keyword}}##Disable automatic spelling correction
googler {{keyword}}##Search Google for a keyword
gopass find {{keyword}}##Search using a keyword
gopass init##Initialise the configuration settings
gopass mounts add {{store_name}} {{git_repo_url}}##Mount a shared Git store
gopass mounts##Show all stores
gopass new##Create a new entry
gopass show {{keyword}}##Search interactively using a keyword
gopass sync##Sync all mounted stores
gopass {{store_name|path/to/directory|email@email.com}}##Show a particular password entry
gops memstats {{pid|addr}}##Print the current runtime memory statistics
gops stack {{pid|addr}}##Print the current stack trace from a target program
gops tree##Display a process tree
gops {{pid}}##Print more information about a process
gops##Print all go processes running locally
goreload --all##Reload whenever any file changes
goreload --logPrefix {{prefix}} {{file}}.go##Set a custom log prefix (defaults to `goreload`)
goreload -b {{path/to/binary}} {{file}}.go##Set the name of the binary file to watch (defaults to `.goreload`)
gotty -w -c {{username}}:{{password}} {{shell}}##Share with credential (Basic Auth)
gotty -w {{shell}}##Share with write permission
gotty {{command}}##Share result of command
gource --title {{title}}##Set a title for the animation
gource -c {{time_scale_multiplier}}##Set a custom timescale for the animation
gource -f -b {{hex_color_code}}##Set fullscreen mode and a custom background color
gource -s {{seconds}}##Set how long each day should be in the animation (this combines with -c, if provided)
gource -{{width}}x{{height}}##Run gource in the current directory, with a custom output resolution
gource {{path/to/repository}}##Run gource in a directory (if it isn't the repository's root directory, the root is sought up from there)
gow -e={{go,html}} run .##Watch the specified file extensions
gow -h##Display help
gow -v -w={{path/to/directory1,path/to/directory2,...}} run .##Watch subdirectories in verbose mode
gow run . {{argument1 argument2 ...}}##Start the application with the specified arguments
gow run .##Start and watch the current directory
gox -os="{{os}}"##Compile current directory for a particular operating system
gox -osarch="{{os}}/{{arch}}"##Compile current directory for a single operating system and architecture combination
gox {{url_1}} {{url_2}}##Download and compile a Go program from a remote URL
gox##Compile Go program in the current directory for all operating systems and architecture combinations
gpg --clearsign {{doc.txt}}##Sign `doc.txt` without encryption (writes output to `doc.txt.asc`)
gpg --decrypt {{doc.txt.gpg}}##Decrypt `doc.txt.gpg` (output to stdout)
gpg --encrypt --recipient {{alice@example.com}} {{doc.txt}}##Encrypt `doc.txt` for alice@example.com (output to `doc.txt.gpg`)
gpg --export --armor {{alice@example.com}}##Export public key for alice@example.com (output to stdout)
gpg --export-secret-key {{key}} | paperkey --output {{path/to/secret_data.txt}}##Export a specific secret key and generate a text file with the secret data
gpg --export-secret-keys --armor {{alice@example.com}}##Export private key for alice@example.com (output to stdout)
gpg --full-generate-key##Create a GPG public and private key interactively
gpg --import {{public.gpg}}##Import a public key
gpg --symmetric {{doc.txt}}##Encrypt `doc.txt` with only a passphrase (output to `doc.txt.gpg`)
gpg-tui --style {{colored}} --armor##Start `gpg-tui` with color and ASCII armored output
gpg-tui##Start `gpg-tui`
gpg-zip --decrypt {{path/to/archive.gpg}}##Decrypt `archive.gpg` into a directory of the same name
gpg-zip --list-archive {{path/to/archive.gpg}}##List the contents of the encrypted `archive.gpg`
gpg-zip --symmetric --output {{archive.gpg}} {{path/to/directory}}##Encrypt a directory into `archive.gpg` using a passphrase
gpg2 --decrypt {{path/to/doc.txt.gpg}}##Decrypt a specified file, writing the result to the standard output
gpg2 --encrypt --recipient {{alice@example.com}} {{path/to/doc.txt}}##Encrypt a specified file for a specified recipient, writing the output to a new file with `.gpg` appended
gpg2 --export --armor {{alice@example.com}}##Export the public key of a specified email address to the standard output
gpg2 --export-secret-keys --armor {{alice@example.com}}##Export the private key with a specified email address to the standard output
gpg2 --import {{path/to/public_key.gpg}}##Import a public key
gpg2 --list-keys##List imported keys
gpg2 --symmetric {{path/to/doc.txt}}##Encrypt a specified file with only a passphrase, writing the output to a new file with `.gpg` appended
gpgv --keyring {{./alice.keyring}} {{path/to/signature}} {{path/to/file}}##Add a file to the list of keyrings (a single exported key also counts as a keyring)
gpgv {{path/to/file}}##Verify a signed file
gpgv {{path/to/signature}} {{path/to/file}}##Verify a signed file using a detached signature
gradle assembleRelease##Build an Android Package (APK) in release mode
gradle build --offline##Run in offline mode to prevent Gradle from accessing the network during builds
gradle build -x {{test}}##Exclude test task
gradle build##Compile a package
gradle clean##Clear the build directory
gradle tasks --all##List all the tasks
gradle tasks##List the main tasks
grant {{action_list}} on {{object_type}} {{object_name}} to role {{role_name}};##Grant a set of authorities to a role
grant {{action_list}} on {{object_type}} {{object_name}} to user {{username}};##Grant a set of authorities to a user
grant {{role_name}} to {{username}};##Grant a role to a user
grap {{path/to/input.grap}} > {{path/to/output.pic}}##Process a `grap` file and save the output file for future processing with `pic` and `groff`
grap {{path/to/input.grap}} | pic -T {{pdf}} | groff -{{me}} -T {{pdf}} > {{path/to/output.pdf}}##Typeset a `grap` file to PDF using the [me] macro package, saving the output to a file
graphml2gv -?##Display help
graphml2gv -o {{output.gv}} {{input.gml}}##Convert a graph from `gml` to `gv` format
grep "{{search_pattern}}" {{path/to/file}}##Search for a pattern within a file
grep --extended-regexp --ignore-case "{{search_pattern}}" {{path/to/file}}##Use extended regular expressions (supports `?`, `+`, `{}`, `()` and `|`), in case-insensitive mode
grep --fixed-strings "{{exact_string}}" {{path/to/file}}##Search for an exact string (disables regular expressions)
grep --only-matching "{{search_pattern}}" {{path/to/file}}##Search for lines matching a pattern, printing only the matched text
grep --recursive --line-number --binary-files={{without-match}} "{{search_pattern}}" {{path/to/directory}}##Search for a pattern in all files recursively in a directory, showing line numbers of matches, ignoring binary files
grep --with-filename --line-number "{{search_pattern}}" {{path/to/file}}##Print file name and line number for each match
grep --{{context|before-context|after-context}}={{3}} "{{search_pattern}}" {{path/to/file}}##Print 3 lines of context around, before, or after each match
grep -v '^{{#}}' {{path/to/file}} | sponge {{path/to/file}}##Remove all lines starting with # in a file
grex -d {{space_separated_strings}}##Replace digits with '\d'
grex -i {{space_separated_strings}}##Generate a case-insensitive regular expression
grex -r {{space_separated_strings}}##Add {min, max} quantifier representation for repeating sub-strings
grex -s {{space_separated_strings}}##Replace spaces with '\s'
grex -w {{space_separated_strings}}##Replace Unicode word character with '\w'
grex {{space_separated_strings}}##Generate a simple regular expression
grip --browser##Start the server and open the `README` file of the current directory in the browser
grip {{path/to/file.md}}##Start the server and serve a specific Markdown file
grip {{port}}##Start the server in the specified port and serve the rendered `README` file of the current directory
grip##Start the server and serve the rendered `README` file of a current directory
groff -man -T ascii {{path/to/manpage.1}} | less --RAW-CONTROL-CHARS##Render a man page using the ASCII output device, and display it using a pager
groff -man -T html {{path/to/manpage.1}} > {{path/to/manpage.html}}##Render a man page into an HTML file
groff {{-t}} {{-p}} -{{me}} -T {{pdf}} {{path/to/input.me}} > {{path/to/output.pdf}}##Typeset a roff file containing [t]ables and [p]ictures, using the [me] macro set, to PDF, saving the output
groff {{path/to/input.roff}} > {{path/to/output.ps}}##Format output for a PostScript printer, saving the output to a file
groups {{username1 username2 ...}}##Print group memberships for a list of users
groups##Print group memberships for the current user
grpcurl -H "{{Authorization: Bearer $token}}" -d {{'{"foo": "bar"}'}} {{grpc.server.com:443}} {{my.custom.server.Service/Method}}##Send a request with a header and a body
grpcurl {{grpc.server.com:443}} list {{my.custom.server.Service}}##List all methods in a particular service
grpcurl {{grpc.server.com:443}} list##List all services exposed by a server
grpcurl {{grpc.server.com:443}} {{my.custom.server.Service/Method}}##Send an empty request
grumphp git:init##Register the Git hooks
grumphp git:pre-commit##Trigger the pre-commit hook manually
grumphp run##Check every versioned file
grunt --base {{path/to/directory}}##Specify an alternative base path for relative files
grunt --gruntfile {{path/to/file}}##Specify an alternative configuration file
grunt --help##List all available options
grunt --no-write##Perform a dry-run without writing any files
grunt --tasks {{path/to/directory}}##Specify an additional directory to scan for tasks in
grunt {{task_name}}##Run one or more specific space-separated task(s)
grunt##Run the default task process
gt auth --token {{graphite_cli_auth_token}}##Authenticate the CLI with Graphite's API
gt branch create {{branch_name}}##Create a new branch stacked on top of the current branch and commit staged changes
gt commit create -m {{commit_message}}##Create a new commit and fix upstack branches
gt log short##Log all tracked stacks
gt repo init##Initialise `gt` for the repository in the current directory
gt stack submit##Force push all branches in the current stack to GitHub and create or update PRs
gt {{subcommand}} --help##Print help for a specified subcommand
gtop##Show the system stats dashboard
guacd -C {{my-cert.crt}} -K {{my-key.pem}}##Start with TLS support
guacd -b {{127.0.0.1}} -l {{4823}}##Bind to a specific port on localhost
guacd -f -L {{debug}}##Start in debug mode, keeping the process in the foreground
guacd -p {{path/to/file.pid}}##Write the PID to a file
guetzli --quality {{quality_value}} {{input.jpg}} {{output.jpg}}##Compress a JPEG with the desired visual quality (84-100)
guetzli {{input.jpg}} {{output.jpg}}##Compress a JPEG image
guetzli {{input.png}} {{output.jpg}}##Create a compressed JPEG from a PNG
guile --listen={{port_or_socket}}##Listen on a port or a Unix domain socket (the default is port 37146) for remote REPL connections
guile -c "{{expression}}"##Execute a Scheme expression
guile {{script.scm}}##Execute the script in a given Scheme file
guile##Start a REPL (interactive shell)
gulp {{task}} {{othertask}}##Run individual tasks
gulp##Run the default task
gunicorn --bind {{localhost}}:{{8080}} {{import.path:app_object}}##Listen on port 8080 on localhost
gunicorn --certfile {{cert.pem}} --keyfile {{key.pem}} {{import.path:app_object}}##Run app over HTTPS
gunicorn --reload {{import.path:app_object}}##Turn on live reload
gunicorn --threads {{4}} {{import.path:app_object}}##Use 4 worker threads for handling requests
gunicorn --workers {{4}} {{import.path:app_object}}##Use 4 worker processes for handling requests
gunicorn {{import.path:app_object}}##Run Python web app
gunzip --keep {{archive.tar.gz}}##Extract a file and keep the archive file
gunzip --list {{file.txt.gz}}##List the contents of a compressed file
gunzip --stdout {{archive.tar.gz}} > {{archive.tar}}##Extract a file to a target destination
gunzip {{archive.tar.gz}}##Extract a file from an archive, replacing the original file if it exists
gv2gml -?##Display help
gv2gml -o {{output.gml}} {{input.gv}}##Convert a graph from `gv` to `gml` format
gv2gxl -?##Display help
gv2gxl -o {{output.gxl}} {{input.gv}}##Convert a graph from `gv` to `gxl` format
gvcolor -?##Display help for `gvcolor`
gvcolor {{path/to/layout1.gv}} {{path/to/layout2.gv ...}} > {{path/to/output.gv}}##Colorize one or more ranked digraph (that were already processed by `dot`)
gvpack -?##Display help for `gvpack`
gvpack -g {{path/to/layout1.gv}} {{path/to/layout2.gv ...}} > {{path/to/output.gv}}##Combine several graph layouts at the graph level, keeping graphs separate
gvpack -n {{path/to/layout1.gv}} {{path/to/layout2.gv ...}} > {{path/to/output.gv}}##Combine several graph layouts at the node level, ignoring clusters
gvpack -u {{path/to/layout1.gv}} {{path/to/layout2.gv ...}} > {{path/to/output.gv}}##Combine several graph layouts without packing
gvpack {{path/to/layout1.gv}} {{path/to/layout2.gv ...}} > {{path/to/output.gv}}##Combine several graph layouts (that already have layout information)
gxl2gv -?##Display help
gxl2gv -o {{output.gv}} {{input.gxl}}##Convert a graph from `gxl` to `gv` format
gzip --keep {{file.ext}}##Compress a file, keeping the original file
gzip -9 -c {{file.ext}} > {{compressed_file.ext.gz}}##Specify the compression level. 1=Fastest (Worst), 9=Slowest (Best), Default level is 6
gzip -c -d {{file.ext}}.gz > {{uncompressed_file.ext}}##Decompress a gzipped file specifying the output filename
gzip -c {{file.ext}} > {{compressed_file.ext.gz}}##Compress a file specifying the output filename
gzip -d {{file.ext}}.gz##Decompress a file, replacing it with the original uncompressed version
gzip {{file.ext}}##Compress a file, replacing it with a gzipped compressed version
h##Display help about interactive commands
h##Display interactive command help
hadolint --format {{json}} {{path/to/Dockerfile}}##Lint a Dockerfile, displaying the output in JSON format
hadolint --format {{tty|json|checkstyle|codeclimate|codacy}} {{path/to/Dockerfile}}##Lint a Dockerfile, displaying the output in a specific format
hadolint --ignore {{DL3006}} --ignore {{DL3008}} {{path/to/Dockerfile}}##Lint a Dockerfile ignoring specific rules
hadolint --trusted-registry {{docker.io}} --trusted-registry {{example.com}}:{{5000}} {{path/to/Dockerfile}} {{path/to/another/Dockerfile}}##Lint multiple Dockerfiles using specific trusted registries
hadolint {{path/to/Dockerfile}}##Lint a Dockerfile
hakyll-init --help##Show help for `hakyll-init`
hakyll-init {{path/to/directory}}##Generate a new Hakyll sample blog
handbrakecli --input {{/dev/sr0}} --title 0##Print the content of a DVD, getting the CSS keys in the process
handbrakecli --input {{/dev/sr0}} --title 1 --output {{out.mkv}} --format av_mkv --encoder x264 --subtitle {{1,4,5}} --audio {{1,2}} --aencoder copy --quality {{23}}##Rip the first track of a DVD in the specified device. Audiotracks and subtitle languages are specified as lists
handbrakecli --input {{input.avi}} --output {{output.mkv}} --encoder x264 --quality 20 --ab 160##Convert a video file to MKV (AAC 160kbit audio and x264 CRF20 video)
handbrakecli --input {{input.mp4}} --output {{output.mp4}} --width 320 --height 240##Resize a video file to 320x240
handbrakecli --preset-list##List available presets
handbrakecli --preset="Android" --input {{input.ext}} --output {{output.mp4}}##Convert an AVI video to MP4 using the Android preset
hangups --token-path {{path/to/token}}##Set a refresh token for hangups
hangups -h##View troubleshooting information and help
hangups##Start hangups
hardhat clean##Clean the cache and all artifacts
hardhat compile##Compile the current project and build all artifacts
hardhat node --hostname {{hostname}} --port {{port}}##Start a local Ethereum JSON-RPC node with a specific hostname and port
hardhat node##Start a local Ethereum JSON-RPC node for development
hardhat run {{path/to/script.js}}##Run a user-defined script after compiling the project
hardhat test {{path/to/file1.js}} {{path/to/file2.js}}##Run all given test files
hardhat test##Run Mocha tests
hardhat##List available subcommands (or create a new project if no configuration exists)
hashid --extended {{hash}}##Show all possible hash types (including salted hashes)
hashid --mode --john {{hash}}##Show `hashcat`'s mode number and `john`'s format string of the hash types
hashid --outfile {{path/to/output.txt}} {{hash}}##Save output to a file instead of printing to standard output
hashid {{hash}}##Identify hashes passed as arguments (multiple hashes can be passed)
hashid {{path/to/hashes.txt}}##Identify hashes on a file (one hash per line)
hashid##Identify hashes from standard input (through typing, copying and pasting, or piping the hash into the program)
haxelib git {{libname}} {{git_url}}##Install the development version of a library from a Git repository
haxelib install {{libname}} {{version}}##Install a specific version of a Haxe library
haxelib install {{libname}}##Install a Haxe library
haxelib list##Print a tree of locally installed Haxe libraries
haxelib remove {{libname}}##Uninstall a Haxe library
haxelib search {{keyword}}##Search for a Haxe library
haxelib upgrade##Upgrade all installed Haxe libraries
head --bytes -{{count}} {{path/to/file}}##Output everything but the last few bytes of a file
head --bytes {{count}} {{path/to/file}}##Output the first few bytes of a file
head --lines -{{count}} {{path/to/file}}##Output everything but the last few lines of a file
head --lines {{count}} {{path/to/file}}##Output the first few lines of a file
helix {{path/to/file}}##Open a file
hello --greeting="{{greeting_text}}"##Print a text message
hello --traditional##Print "hello, world", the traditional type
hello##Print "Hello, world!"
helm create {{chart_name}}##Create a helm chart
helm dependency update##Update helm dependencies
helm get {{chart_release_name}}##Download helm chart as a tar archive
helm install {{name}} {{path/to/source_directory}}##Install a helm chart from an unpacked chart directory
helm install {{name}} {{repository_name}}/{{chart_name}} --dry-run##Perform a dry run
helm install {{name}} {{repository_name}}/{{chart_name}} --set {{parameter1}}={{value1}},{{parameter2}}={{value2}}##Install a helm chart with custom values
helm install {{name}} {{repository_name}}/{{chart_name}} --values {{path/to/values.yaml}}##Install a helm chart passing a custom values file
helm install {{name}} {{repository_name}}/{{chart_name}}##Install a helm chart
helm install {{name}} {{repository_name}}/{{chart_name}}##Install a helm chart
helm install {{package_name}} {{https://example.com/charts/packagename-1.2.3.tgz}}##Install a helm chart from a URL
helm install {{repository_name}}/{{chart_name}} --generate-name##Install a helm chart and generate a name
helm repo add {{repository_name}}##Add a new helm repository
helm repo list##List helm repositories
helm repo remove {{repository_name}}##Delete a helm repository
helm repo update##Update helm repositories
help shopt##Show help for the command
help2man --help##Display detailed help
help2man {{executable}} --name {{name}}##Specify the "name" paragraph in the man page
help2man {{executable}} --output {{path/to/file}}##Output to a file instead of stdout
help2man {{executable}} --section {{section}}##Specify the section for the man page (defaults to 1)
help2man {{executable}}##Generate a man page for an executable
heroku create##Create a Heroku app
heroku destroy --app {{app_name}}##Permanently destroy an app
heroku login##Log in to your Heroku account
heroku logs --app {{app_name}}##Show logs for an app
heroku ps --app {{app_name}}##List dynos (Heroku virtual machines) for an app
heroku run {{process_name}} --app {{app_name}}##Run a one-off process inside a dyno (Heroku virtual machine)
hexdump --no-squeezing {{file}}##Don't replace duplicate lines with '*'
hexdump -C -n{{number_of_bytes}} {{file}}##Display the hexadecimal representation of a file, but interpret only n bytes of the input
hexdump -C {{file}}##Display the input offset in hexadecimal and its ASCII representation in two columns
hexdump {{file}}##Print the hexadecimal representation of a file, replacing duplicate lines by '*'
hexo clean##Clean the cache file (`db.json`) and generated files (`public/`)
hexo deploy##Deploy the website
hexo generate##Generate static files
hexo init {{path/to/directory}}##Initialize a website
hexo new {{layout}} {{title}}##Create a new article
hexo server##Start a local server
hexyl -n {{n}} {{path/to/file}}##Print the hexadecimal representation of the first n bytes of a file
hexyl -r {{1024}}:+{{512}} {{path/to/file}}##Print 512 bytes starting at the 1024th byte
hexyl -r {{512}}:{{1024}} {{path/to/file}}##Print bytes 512 through 1024 of a file
hexyl {{path/to/file}}##Print the hexadecimal representation of a file
hg --version##Check the Mercurial version
hg add --dry-run##Perform a test-run without performing any actions
hg add --exclude {{pattern}}##Add all unstaged files, excluding those that match a specified pattern
hg add --include {{pattern}}##Add all unstaged files matching a specified pattern
hg add --subrepos##Recursively add sub-repositories
hg add {{path/to/file}}##Add files or directories to the staging area
hg branch {{branch_name}}##Create a new branch for the next commit
hg branch##Show the name of the currently active branch
hg clone --branch {{branch}} {{remote_repository_source}}##Clone a repository to the head of a specific branch, ignoring later commits
hg clone --noupdate {{remote_repository_source}}##Clone a repository with only the `.hg` directory, without checking out files
hg clone --rev {{revision}} {{remote_repository_source}}##Clone a repository up to a specific revision without any newer history
hg clone --updaterev {{revision}} {{remote_repository_source}}##Clone a repository to a specific revision, tag or branch, keeping the entire history
hg clone {{remote_repository_source}} {{destination_path}}##Clone a repository to a specified directory
hg commit --exclude {{pattern}}##Commit all files, excluding those that match a specified pattern
hg commit --include {{pattern}}##Commit all files matching a specified pattern
hg commit --interactive##Commit using the interactive mode
hg commit --message {{message}}##Commit with a specific message
hg commit {{path/to/file_or_directory}}##Commit a specific file or directory
hg commit##Commit staged files to the repository
hg help {{command}}##Call help on a command
hg help##Call general help
hg init {{path/to/directory}}##Initialise a new repository in the specified directory
hg init##Initialise a new repository in the current directory
hg log --branch {{branch}}##Display the revision history for a specific branch
hg log --date {{date}}##Display the revision history for a specific date
hg log --exclude {{pattern}}##Display the revision history, excluding file names that match a specified pattern
hg log --graph##Display the revision history with an ASCII graph
hg log --include {{pattern}}##Display the revision history with file names matching a specified pattern
hg log --rev {{revision}}##Display the log information for a specific revision
hg log --user {{user}}##Display revisions committed by a specific user
hg log##Display the entire revision history of the repository
hg pull --bookmark {{bookmark}}##Specify a specific bookmark to pull
hg pull --branch {{branch}}##Specify a specific branch to pull
hg pull --force##Pull changes even when the remote repository is unrelated
hg pull --rev {{revision}}##Specify a specific revision changeset to pull up to
hg pull --update##Update the local repository to the head of the remote
hg pull {{path/to/source_repository}}##Pull from a specified source repository
hg pull##Pull from the "default" source path
hg push --bookmark {{bookmark}}##Specify a specific bookmark to push
hg push --branch {{branch}}##Specify a specific branch to push
hg push --new-branch##Push a new branch if it does not exist (disabled by default)
hg push --rev {{revision}}##Specify a specific revision changeset to push
hg push {{path/to/destination_repository}}##Push changes to a specified remote repository
hg push##Push changes to the "default" remote path
hg remove --after##Remove files from the repository that have been physically removed
hg remove --exclude {{pattern}}##Remove all staged files, excluding those that match a specified pattern
hg remove --include {{pattern}}##Remove all staged files matching a specified pattern
hg remove --subrepos##Recursively remove sub-repositories
hg remove {{path/to/file}}##Remove files or directories from the staging area
hg root --cwd {{path/to/directory}}##Display the root location of the specified repository
hg root##Display the root location of the current repository
hg serve --address {{address}}##Start a web server instance on the specified listening address
hg serve --certificate {{path/to/certificate}}##Start a web server instance using the specified SSL certificate bundle
hg serve --name {{name}}##Start a web server instance with a specific identifier
hg serve --port {{port}}##Start a web server instance on the specified port
hg serve --style {{style}}##Start a web server instance using the specified theme (see the templates directory)
hg serve##Start a web server instance
hg status --added##Display only added files
hg status --deleted##Display only deleted (but tracked) files
hg status --exclude {{pattern}}##Display files, excluding those that match a specified glob pattern
hg status --include {{pattern}}##Display only files matching a specified glob pattern
hg status --modified##Display only modified files
hg status --removed##Display only removed files
hg status --rev {{revision}}##Display changes in the working directory compared to a specified changeset
hg status##Display the status of changed files
hg update --clean##Update and discard uncommitted changes
hg update --date {{dd-mm-yyyy}}##Update to the last commit matching a specified date
hg update --rev {{revision}}##Update to the specified revision
hg update##Update to the tip of the current branch
hg {{command}}##Execute Mercurial command
highlight --list-scripts {{langs|themes|plugins}}##List all supported languages, themes, or plugins
highlight --out-format={{html}} --fragment --syntax {{language}} {{source_file}}##Produce an HTML fragment, suitable for inclusion in a larger document
highlight --out-format={{html}} --inline-css --syntax {{language}} {{source_file}}##Inline the CSS styling in every tag
highlight --out-format={{html}} --print-style --style {{theme_name}} --syntax {{language}}] --stdout##Print a CSS stylesheet for a theme
highlight --out-format={{html}} --style {{theme_name}} --syntax {{language}} {{path/to/source_code}}##Produce a complete HTML document from a source code file
history -c##Clear the commands history list (only for current `bash` shell)
history -d {{offset}}##Delete the history entry at the specified offset
history -w##Overwrite history file with history of current `bash` shell (often combined with `history -c` to purge history)
history {{20}}##Display the last 20 commands (in `zsh` it displays all commands starting from the 20th)
history##Display the commands history list with line numbers
hive --define {{key}}={{value}} -f {{path/to/file.sql}}##Run a HiveQL file with a variable substitution
hive --hiveconf {{conf_name}}={{conf_value}}##Run a HiveQL with HiveConfig (e.g. `mapred.reduce.tasks=32`)
hive -e "{{hiveql_query}}"##Run HiveQL
hive##Start a Hive interactive shell
hn --keep-open##View stories on Hacker News, and keep the list open after selecting a link
hn --latest##View stories on Hacker News sorted by submission date
hn --limit {{number}}##View _number_ of stories on Hacker News
hn##View stories on Hacker News
home [{{num_of_last_tweets}}]##Show your timeline (optional number of tweets to display, default is 5)
home-manager build##Activate the configuration defined in `~/.config/nixpkgs/home.nix`
home-manager switch##Activate the configuration and switch to it
host -t {{field}} {{domain}}##Lookup a field (CNAME, TXT,...) of a domain
host {{domain}} {{8.8.8.8}}##Specify an alternate DNS server to query
host {{domain}}##Lookup A, AAAA, and MX records of a domain
host {{ip_address}}##Reverse lookup an IP
hostess add {{local.example.com}} {{127.0.0.1}}##Add a domain pointing to your machine to your hosts file
hostess del {{local.example.com}}##Remove a domain from your hosts file
hostess list##List domains, target IP addresses and on/off status
hostess off {{local.example.com}}##Disable a domain (but don't remove it)
hostid##Display the numeric identifier for the current host in hexadecimal
hostname --fqdn##Show the FQDN (Fully Qualified Domain Name)
hostname -I##Show all network addresses of the host
hostname -i##Show the network address of the host name
hostname {{new_hostname}}##Set current host name
hostname##Show current host name
hping3 --count {{2}} --verbose --destport {{80}} -A {{ip_or_hostname}}##Perform a TCP ACK scan to check if a given host is alive
hping3 --flood -p {{80}} -S {{192.168.1.1}}##Perform a charge test on port 80
hping3 --icmp --count {{4}} {{ip_or_hostname}}##Ping a destination with 4 ICMP ping requests
hping3 --scan {{80,3000,9000}} -S {{192.168.1.1}}##Scan a set of TCP ports on a specific IP address
hping3 --traceroute --verbose --syn --destport {{80}} {{ip_or_hostname}}##Traceroute using a TCP scan to a specific destination port
hping3 --udp -p {{80}} -S {{192.168.1.1}}##Ping an IP address over UDP on port 80
hping3 --verbose --syn --destport {{80}} --baseport {{5090}} {{ip_or_hostname}}##Scan TCP port 80, scanning from the specific local source port 5090
hping3 -p {{80}} -S {{192.168.1.1}}##Ping an IP address over TCP on a specific port
hping3 {{localhost}}##Ping localhost over TCP
hr {{string_a}} {{string_b}} {{string_c}}##Print a multiline horizontal rule
hr {{string}}##Print a horizontal rule with a custom string
hr##Print a horizontal rule
hsd-cli block {{height_or_hash}}##View a block by height or hash
hsd-cli broadcast {{transaction_hex}}##Broadcast a local transaction
hsd-cli coin {{hash_index_or_address}}##View a coin by its hash index or address
hsd-cli info##Retrieve information about the current server
hsd-cli mempool##Retrieve a mempool snapshot
hsd-cli reset {{height_or_hash}}##Reset the chain to the specified block
hsd-cli rpc {{command}} {{args}}##Execute an RPC command
hsd-cli tx {{address_or_hash}}##View a transaction by address or hash
hsw-cli balance##View the current wallet's balance
hsw-cli get##View the current wallet's details
hsw-cli history##View the current wallet's transaction history
hsw-cli lock##Lock the current wallet
hsw-cli pending##View the current wallet's pending transactions
hsw-cli send {{address}} {{1.05}}##Send a transaction with the specified coin amount to an address
hsw-cli tx {{transaction_hash}}##View details about a transaction
hsw-cli unlock {{passphrase}} {{timeout}}##Unlock the current wallet (timeout in seconds)
html5validator --format {{gnu|xml|json|text}} {{path/to/file}}##Output the results in a specific format
html5validator --root {{path/to/directory}} --blacklist "{{node_modules vendor}}"##Ignore specific directory names
html5validator --root {{path/to/directory}} --log {{debug|info|warning}}##Output the log at a specific verbosity level
html5validator --root {{path/to/directory}} --match "{{*.html *.php}}"##Match multiple files using a glob pattern
html5validator --root {{path/to/directory}}##Validate all HTML files in a specific directory
html5validator --show-warnings {{path/to/file}}##Show warnings as well as errors
html5validator {{path/to/file}}##Validate a specific file
htop --help##Display help
htop --sort {{sort_item}}##Sort processes by a specified `sort_item` (use `htop --sort help` for available options)
htop --user {{username}}##Start htop displaying processes owned by a specific user
htop##Start htop
htpasswd -D {{path/to/file}} {{username}}##Delete user from htpasswd file
htpasswd -b {{path/to/file}} {{username}} {{password}}##Add user to htpasswd file in batch mode without an interactive password prompt (for script usage)
htpasswd -c {{path/to/file}} {{username}}##Create/overwrite htpasswd file
htpasswd -nbm {{username}} {{password}}##Display a string with username (plain text) and password (md5)
htpasswd -v {{path/to/file}} {{username}}##Verify user password
htpasswd {{path/to/file}} {{username}}##Add user to htpasswd file or update existing user
http --auth {{username:password}} {{example.org}}##Pass a username and password for server authentication
http --download {{example.org}}##Download a URL to a file
http --form {{example.org}} {{name='bob'}} {{profile_picture@'bob.png'}}##Send form-encoded data
http {{HEAD}} {{example.org}}##Specify an HTTP method
http {{example.org}} {{X-MyHeader:123}}##Include an extra header
http {{example.org}} {{name='bob'}}##Send JSON object
http-server --cors##Start an HTTP server with CORS enabled by including the `Access-Control-Allow-Origin *` header in all responses
http-server --log-ip##Start an HTTP server and include the client's IP address in the output logging
http-server --silent##Start an HTTP server with logging disabled
http-server --ssl --cert {{path/to/cert.pem}} --key {{path/to/key.pem}}##Start an HTTPS server on the default port using the specified certificate
http-server --username {{username}} --password {{password}}##Start an HTTP server using basic authentication
http-server -d {{false}}##Start an HTTP server with directory listings disabled
http-server {{path/to/directory}} --port {{port}}##Start an HTTP server on a specific port to serve a specific directory
http-server##Start an HTTP server listening on the default port to serve the current directory
http-server-upload##Start an HTTP server on the default port to upload files to the current directory
httpflow -i {{any}}##Capture traffic on all interfaces
httpflow -r {{out.cap}}##Read packets from pcap format binary file
httpflow -u '{{regular_expression}}'##Use a regular expression to filter requests by URLs
httpflow -w {{path/to/directory}}##Write the output to a directory
httpflow {{host httpbin.org or host baidu.com}}##Use a bpf-style capture to filter the results
httping -g http://{{host}} -U {{username}} -P {{password}}##Ping the web server on `host` using HTTP basic authentication
httping -g {{url}}##Ping the specified URL
httping -h {{host}} -p {{port}}##Ping the web server on `host` and `port`
httping -l -g https://{{host}}##Ping the web server on `host` using a TLS connection
httprobe --help##Output all available options
httpry -d -o {{path/to/file.log}}##Run as daemon process
httpry -m {{get|post|put|head|options|delete|trace|connect|patch}}##Filter output by a comma-separated list of HTTP verbs
httpry -o {{path/to/file.log}}##Save output to a file
httpry -r {{path/to/file.log}} '{{host 192.168.5.25}}'##Read from an input capture file and filter by IP
httpry {{eth0}} -b {{path/to/file.pcap}}##Listen on a specific interface and save output to a binary pcap format file
hub clone {{username}}/{{repo_name}}##Clone a repository using its slug (owners can omit the username)
hub create##Upload the current (local-only) repository to your GitHub account
hub fork##Create a fork of the current repository (cloned from another user) under your GitHub profile
hub pr checkout {{pr_number}}##Create a new branch with the contents of a pull request and switch to it
hub pull-request --no-edit##Create a PR of the current (already pushed) branch, reusing the message from the first commit
hub push {{remote_name}} && hub pull-request##Push the current local branch to GitHub and create a PR for it in the original repository
hub sync##Fetch Git objects from upstream and update local branches
hugo --buildDrafts##Build a site including pages that are marked as a "draft"
hugo --destination {{path/to/destination}}##Build a site to a given directory
hugo new site {{path/to/site}}##Create a new Hugo site
hugo new theme {{theme_name}}##Create a new Hugo theme (themes may also be downloaded from https//themes.gohugo.io/)
hugo new {{section_name}}/{{filename}}##Create a new page
hugo server##Build a site, start up a webserver to serve it, and automatically reload when pages are edited
hugo##Build a site to the `./public/` directory
hunspell -d {{en_US}} {{path/to/file}}##Check the spelling of a file with the en_US dictionary
hunspell -l {{path/to/file}}##List misspelled words in a file
hunspell {{path/to/file}}##Check the spelling of a file
husky add {{.husky/pre-commit}} "{{command}} {{command_arguments}}"##Add a specific command to the current `pre-commit` hook
husky install {{path/to/directory}}##Install Husky into a specific directory
husky install##Install Husky in the current directory
husky set {{.husky/pre-push}} "{{command}} {{command_arguments}}"##Set a specific command as a `pre-push` hook for Git
husky uninstall##Uninstall Husky hooks from the current directory
husky##Display help
hydra -C {{path/to/username_password_pairs.txt}} {{imap://[host_range_cidr]}}##Guess IMAP credentials on a range of hosts using a list of colon-separated username/password pairs
hydra -L {{path/to/usernames.txt}} -P {{path/to/wordlist.txt}} -M {{path/to/hosts.txt}} -F {{pop3}}##Guess POP3 credentials on a list of hosts using usernames and passwords lists, exiting when a username/password pair is found
hydra -L {{path/to/usernames.txt}} -P {{path/to/wordlist.txt}} -t {{n_tasks}} {{host_ip}} {{ftp}}##Guess FTP credentials using usernames and passwords lists, specifying the number of threads
hydra -L {{path/to/usernames.txt}} -p {{password}} -s {{port}} -6 {{host_ip}} {{telnet}}##Guess Telnet credentials using a list of usernames and a single password, specifying a non-standard port and IPv6
hydra -l {{username}} -P {{path/to/wordlist.txt}} -V {{rdp://host_ip}}##Guess RDP credentials using a username and a passwords list, showing each attempt
hydra -l {{username}} -P {{path/to/wordlist.txt}} -f {{host_ip}} {{mysql}}##Guess MySQL credentials using a username and a passwords list, exiting when a username/password pair is found
hydra -l {{username}} -P {{path/to/wordlist.txt}} {{host_ip}} {{ssh}}##Guess SSH credentials using a given username and a list of passwords
hydra-wizard##Start Hydra's wizard
hyperfine '{{make target1}}' '{{make target2}}'##Run a comparative benchmark
hyperfine '{{make}}'##Run a basic benchmark, performing at least 10 runs
hyperfine --min-runs {{7}} '{{make}}'##Change minimum number of benchmarking runs
hyperfine --prepare '{{make clean}}' '{{make}}'##Run a command before each benchmark run (to clear caches, etc.)
hyperfine --prepare '{{make clean}}' --parameter-scan {{num_threads}} {{1}} {{10}} '{{make -j {num_threads}}}'##Run a benchmark where a single parameter changes for each run
hyperfine --warmup {{5}} '{{make}}'##Perform benchmark with warmup
i##Enter insert mode from normal mode, to write text into the file
i<Enter>{{text}}<C-c>##Insert text
ia configure##Configure `ia` with API keys (some functions won't work without this step)
ia delete {{identifier}} {{file}}##Delete one or more items from `archive.org`
ia download {{item}}##Download one or more items from `archive.org`
ia search '{{subject:"subject" collection:collection}}'##Search on `archive.org`, returning results as JSON
ia upload {{identifier}} {{path/to/file}} --metadata="{{mediatype:data}}" --metadata="{{title:example}}"##Upload one or more items to `archive.org`
ibmcloud cf install##Install the Cloud Foundry module for accessing Cloud Foundry services
ibmcloud help {{subcommand}}##Display help for a subcommand
ibmcloud help##Display help
ibmcloud login --apikey @{{path/to/api_key_file}}##Log in with an API key, passing it as a file
ibmcloud login --apikey {{api_key_string}}##Log in with an API key, passing it as an argument
ibmcloud login --sso##Log in with a federated ID (single sign-on)
ibmcloud login -a {{api_endpoint}}##Log in to a specific API endpoint (default is `cloud.ibm.com`)
ibmcloud login -u {{username}} -p {{password}} -r {{us-south}}##Log in by providing username, password and the targeted region as parameters
ibmcloud login##Log in by using an interactive prompt
ibmcloud regions##List all available IBM Cloud regions
ibmcloud update##Update `ibmcloud` to the latest version
ibmcloud version##Display `ibmcloud` version
ical --gregorian {{yyyymmdd}}##Convert a Gregorian date to a Hijri date
ical --hijri {{yyyymmdd}}##Convert a Hirji date to a Gregorian date
ical##Display the current month's calendar
iconv -f {{from_encoding}} -t {{to_encoding}} {{input_file}}##Convert file to a specific encoding, and print to stdout
iconv -f {{from_encoding}} {{input_file}} > {{output_file}}##Convert file to the current locale's encoding, and output to a file
iconv -l##List supported encodings
id -g##Display the current group identity as a number
id -u##Display the current user identity as a number
id {{username}}##Display an arbitrary user's ID (UID), group ID (GID) and groups to which they belong
id##Display current user's ID (UID), group ID (GID) and groups to which they belong
id3tag --album={{album}} {{*.mp3}}##Set album title of all MP3 files in the current directory
id3tag --artist={{artist}} --title={{title}} {{path/to/file.mp3}}##Set artist and title tag of an MP3 file
id3tag --help##Get more help
identify -format "%f,%w,%h\n" *.{{jpg}} > {{path/to/filelist.csv}}##Collect dimensions of all JPEG files under current directory
identify -verbose {{path/to/image}}##Describe the format and verbose characteristics of an image
identify {{path/to/image}}##Describe the format and basic characteristics of an image
idnits --doctype {{standard|informational|experimental|bcp|ps|ds}} {{path/to/file.txt}}##Assume the document is of the specified status
idnits --nitcount {{path/to/file.txt}}##Count nits without displaying them
idnits --verbose {{path/to/file.txt}}##Show extra information about offending lines
idnits --year {{2021}} {{path/to/file.txt}}##Expect the specified year in the boilerplate instead of the current year
idnits {{path/to/file.txt}}##Check a file for nits
iex --erl "-kernel shell_history enabled"##Start a session that remembers history
iex -S mix##Start and load Mix project files
iex##Start an interactive session
if ! {{condition_command}}; then {{echo "Condition is true"}}; fi##Execute the specified commands if the condition command's exit status is not zero
if [[ -d {{path/to/directory}} ]]; then {{echo "Condition is true"}}; fi##Check whether a [d]irectory exists
if [[ -e {{path/to/file_or_directory}} ]]; then {{echo "Condition is true"}}; fi##Check whether a file or directory [e]xists
if [[ -f {{path/to/file}} ]]; then {{echo "Condition is true"}}; fi##Check whether a [f]ile exists
if [[ -n "${{variable}}" ]]; then {{echo "Condition is true"}}; fi##Check whether a variable is defined
if {{condition_command}}; then {{echo "Condition is true"}}; else {{echo "Condition is false"}}; fi##Execute the first specified commands if the condition command's exit status is zero otherwise execute the second specified commands
if {{condition_command}}; then {{echo "Condition is true"}}; fi##Execute the specified commands if the condition command's exit status is zero
ifconfig -a##Display details of all interfaces, including disabled interfaces
ifconfig eth0 down##Disable eth0 interface
ifconfig eth0 up##Enable eth0 interface
ifconfig eth0 {{ip_address}}##Assign IP address to eth0 interface
ifconfig eth0##View network settings of an Ethernet adapter
ignite add {{plugin_name}}##Add an Ignite plugin to the project
ignite generate {{plugin_name}} {{filename}}##Generate file from a plugin
ignite new {{project_name}}##Create a new React Native project
ignite remove {{plugin_name}}##Remove an Ignite plugin from the project
ikhal##Start khal on interactive mode
imapsync --host1 {{host1}} --user1 {{user1}} --password1 {{secret1}} --host2 {{host2}} --user2 {{user2}} --password2 {{secret2}}##Synchronize IMAP account between host1 and host2
img2pdf {{path/to/file.gif}} --first-frame-only --output {{path/to/file.pdf}}##Convert only the first frame of a multi-frame image to PDF
img2pdf {{path/to/file.jpg}} --auto-orient --pagesize {{A4^T}} --border {{2cm}}:{{5.1cm}} --output {{path/to/file.pdf}}##Auto orient the image, use a page size of A4 in landscape mode, and set a border of 2cm horizontally and 5.1cm vertically
img2pdf {{path/to/file.png}} --title {{title}} --author {{author}} --creationdate {{1970-01-31}} --keywords {{keyword1 keyword2}} --subject {{subject}} --output {{path/to/file.pdf}}##Convert an image to PDF, and specify metadata for the resulting file
img2pdf {{path/to/file.tiff}} --pagesize {{30cm}}x{{20cm}} --imgsize {{10cm}}x{{15cm}} --fit {{shrink}} --output {{path/to/file.pdf}}##Shrink only larger images to a 10cm by 15cm rectangle inside a 30x20cm page
img2pdf {{path/to/image1.jpg}} {{path/to/image2.jpg}} --output {{path/to/file.pdf}}##Convert multiple images to a single PDF, each image being on its own page
import -window root -display {{remote_host}}:{{screen}}.{{display}} {{output.png}}##Capture contents of a remote X server screen in the PNG format
import -window root {{output.postscript}}##Capture the entire X server screen in the PostScript image format
import -window {{window_id}} {{output.jpg}}##Capture a specific window, given its ID as displayed by `xwininfo`, into the JPEG format
in-toto-record start -n {{edit-files}} -k {{path/to/key_file}} -m {{.}}##Start the record (creates a preliminary link file)
in-toto-record stop -n {{edit-files}} -k {{path/to/key_file}} -p {{.}}##Stop the record (expects a preliminary link file)
in-toto-run -n {{package}} -m {{project}} -p {{project.tar.gz}} -- {{tar czf project.tar.gz project}}##Create a tarball, storing files as materials and the tarball as product
in-toto-run -n {{review}} -k {{key_file}} -m {{document.pdf}} -x##Generate signed attestations for review work
in-toto-run -n {{scan}} -k {{key_file}} -p {{report.json}} -- {{/bin/sh -c "trivy -o report.json -f json <IMAGE>"}}##Scan the image using Trivy and generate link file
in-toto-run -n {{tag}} --products {{.}} -k {{key_file}} -- {{git tag v1.0}}##Tag a git repo and signing the resulting link file
in-toto-sign -f {{package.2f89b927.link}} -k {{priv_key}}##Replace signature in link file and write to default filename
in-toto-sign -f {{root.layout}} --gpg##Sign a layout with the default GPG key in default GPG keyring
in-toto-sign -f {{root.layout}} --verify --gpg {{...439F3C2}}##Verify a layout with a GPG key identified by keyid '...439F3C2'
in-toto-sign -f {{root.layout}} -k {{pub_key0}} {{pub_key1}} {{pub_key2}} --verify##Verify a layout signed with 3 keys
in-toto-sign -f {{unsigned.layout}} -k {{priv_key1}} {{priv_key2}} -o {{root.layout}}##Sign 'unsigned.layout' with two keys and write it to 'root.layout'
in2csv --sheet={{sheet_name}} {{data.xlsx}}##Convert a specific sheet from an XLSX file to CSV
in2csv {{data.dbf}} > {{data.csv}}##Convert a DBF file to a CSV file
in2csv {{data.xls}}##Convert an XLS file to CSV
indent --gnu-style {{path/to/source.c}} -o {{path/to/indented_source.c}}##Format C/C++ source according to the GNU style, saving the indented version to a different file
indent --k-and-r-style --indent-level3 --no-tabs --line-length120 {{path/to/source.c}} -o {{path/to/indented_source.c}}##Format C/C++ source according to the style of Kernighan & Ritchie (K&R), no tabs, 3 spaces per indent, and wrap lines at 120 characters
indent --linux-style {{path/to/source.c}} {{path/to/another_source.c}}##Format C/C++ source according to the Linux style guide, automatically back up the original files, and replace with the indented versions
infection --log-verbosity {{default|all|none}}##Specify the log verbosity
infection --min-covered-msi {{percentage}}##Specify a minimum covered code MSI
infection --min-msi {{percentage}}##Specify a minimum Mutation Score Indicator (MSI)
infection --only-covered##Only mutate lines of code that are covered by tests
infection --show-mutations##Display the mutation code that has been applied
infection --test-framework {{phpunit|phpspec}}##Use a specific test framework (defaults to PHPUnit)
infection --threads {{number_of_threads}}##Use a specific number of threads
infection##Analyse code using the configuration file (or create one if it does not exist)
influx -database {{database_name}}##Use a specific database
influx -execute "{{influxql_command}}" -format {{json|csv|column}}##Return output in a specific format
influx -execute "{{influxql_command}}"##Execute a given command
influx -host {{hostname}}##Connect to a specific host
influx -username {{username}} -password ""##Connect with a specific username (will prompt for a password)
influx##Connect to an InfluxDB running on localhost with no credentials
info {{first_menu_item}} {{second_menu_item}}##Start reading at second menu item within first menu item manual
info {{menu_item}}##Start reading at given menu item node from top-level directory
info {{torrent_id}}##Display information about a specific torrent
info##Display information about all torrents
info##Start reading top-level directory menu
initdb -D /usr/local/var/postgres##Create a database at `/usr/local/var/postgres`
inkmake --help##Display help
inkmake --inkscape {{/Applications/Inkscape.app/Contents/Resources/bin/inkscape}} {{path/to/Inkfile}}##Specify a custom Inkscape binary to use as the backend
inkmake --svg {{path/to/file.svg}} --out {{path/to/output_image}} {{path/to/Inkfile}}##Execute an Inkfile, specifying SVG input file(s) and an output file
inkmake --verbose {{path/to/Inkfile}}##Execute an Inkfile and show detailed information
inkmake {{path/to/Inkfile}}##Export an SVG file executing the specified Inkfile
inkscape {{filename.svg}} --select=path123 --verb="{{EditDuplicate;ObjectRotate90;FileSave;FileQuit}}"##Duplicate the object with id="path123", rotate the duplicate 90 degrees, save the file, and quit Inkscape
inkscape {{filename.svg}} -i {{id}} -o {{object.png}}##Export a single object, given its ID, into a bitmap
inkscape {{filename.svg}} -o {{filename.pdf}} --export-text-to-path##Export an SVG document to PDF, converting all texts to paths
inkscape {{filename.svg}} -o {{filename.png}} -D##Export the drawing (bounding box of all objects) of an SVG file into a bitmap
inkscape {{filename.svg}} -o {{filename.png}} -w {{600}} -h {{400}}##Export an SVG file into a bitmap of 600x400 pixels (aspect ratio distortion may occur)
inkscape {{filename.svg}} -o {{filename.png}}##Export an SVG file into a bitmap with the default format (PNG) and the default resolution (96 DPI)
inkscape {{filename.svg}}##Open an SVG file in the Inkscape GUI
inkview {{path/to/file.svg}}##Preview an SVG
inkview {{path/to/file_a.svg}} {{path/to/file_b.svg}} {{path/to/file_c.svg}}##Preview multiple SVGs (use arrow keys to navigate)
install --group {{user}} {{path/to/source_file1 path/to/source_file2 ...}} {{path/to/destination}}##Copy files to the destination, setting their group ownership
install --mode {{+x}} {{path/to/source_file1 path/to/source_file2 ...}} {{path/to/destination}}##Copy files to the destination, setting their `mode`
install --owner {{user}} {{path/to/source_file1 path/to/source_file2 ...}} {{path/to/destination}}##Copy files to the destination, setting their ownership
install --preserve-timestamps {{path/to/source_file1 path/to/source_file2 ...}} {{path/to/destination}}##Copy files and apply access/modification times of source to the destination
install -D {{path/to/source_file1 path/to/source_file2 ...}} {{path/to/destination}}##Copy files and create the directories at the destination if they don't exist
install {{path/to/source_file1 path/to/source_file2 ...}} {{path/to/destination}}##Copy files to the destination
install-tl -gui##Start the GUI installer (default on macOS and Windows, requires Tcl/Tk)
install-tl -help##Show help for `install-tl`
install-tl -init-from-file {{path/to/texlive.profile}}##Start the installer with the settings from a specific profile file
install-tl -no-gui##Start the text-based installer (default on Unix systems)
install-tl -portable##Start the installer for installation on a portable device, like a USB stick
install-tl -profile {{path/to/texlive.profile}}##Install TeX Live as defined in a specific profile file
interdiff -w {{old_file}} {{new_file}}##Compare diff files, ignoring whitespace
interdiff {{old_file}} {{new_file}}##Compare diff files
ionic cordova run {{android|ios}} --device##Run app on an Android/iOS device
ionic doctor {{check}}##Check the health of an Ionic app
ionic g {{page}}##Generate new app component, directive, page, pipe, provider or tabs
ionic info##Show versions of Ionic, Cordova, environment, etc.
ionic serve##Start a local dev server for app dev/testing
ionic start##Create a new project
ionice -c {{scheduling_class}} -n {{priority}} {{command}}##Run a command with custom I/O scheduling class and priority
ionice -c {{scheduling_class}} -p {{pid}}##Set I/O scheduling class of a running process
ionice -p {{pid}}##Print the I/O scheduling class and priority of a running process
ioping -R {{/dev/sdX}}##Measure disk seek rate on `/dev/sdX`
ioping -RL {{/dev/sdX}}##Measure disk sequential speed on `/dev/sdX`
ioping -c 10 -s 1M /tmp##Measure latency on /tmp using 10 requests of 1 megabyte each
ioping .##Show disk I/O latency using the default values and the current directory
ipaggcreate --address-pairs --bytes {{path/to/file.pcap}}##Count the number of bytes sent between each address pair appearing in a pcap file
ipaggcreate --interface {{eth0}} --length##Group and count packets read from a network interface by IP packet length
ipaggcreate --src {{path/to/file.pcap}}##Count the number of packets sent from each source address appearing in a pcap file
ipaggmanip --cut-smaller {{100}} --cull-labels {{5}} {{path/to/file}}##Remove labels with a count smaller than a given number of bytes and output a random sample of such labels
ipaggmanip --posterize {{path/to/file}}##Replace each label's count with 1 if it is non-zero
ipaggmanip --prefix {{16}} {{path/to/file}}##Combine labels equal in their high-order bits
ipcs -a##General information about all the IPC
ipcs -qi 32768##Specific information about the Message Queue which has the ID 32768
iperf -c {{server_address}} -P {{5}}##Run on client with 5 parallel threads
iperf -c {{server_address}} -i {{2}}##Run on client every 2 seconds
iperf -c {{server_address}}##Run on client
iperf -s##Run on server
iperf -u -c {{server_address}} -p {{5001}}##Run on client using UDP mode
iperf -u -s -p {{5001}}##Run on server using UDP mode and set server port to listen on 5001
iperf3 -c {{server}} -P {{streams}}##Run iperf3 in multiple parallel streams
iperf3 -c {{server}} -R##Reverse direction of the test. Server sends data to the client
iperf3 -c {{server}}##Start bandwidth test
iperf3 -s -p {{port}}##Run an iperf3 server on a specific port
iperf3 -s##Run iperf3 as a server
ipfs add -r {{directory}}##Add a directory and its files recursively from local to the filesystem and print the relative hash
ipfs add {{filename}}##Add a file from local to the filesystem, pin it and print the relative hash
ipfs get {{hash}} -o {{filename}}##Save a remote file and give it a name but not pin it
ipfs pin add {{hash}}##Pin a remote file locally
ipfs pin ls##Display pinned files
ipfs pin rm {{hash}}##Unpin a file from the local storage
ipfs repo gc##Remove unpinned files from local storage
ipsumdump --interface {{eth0}} -tsSdDp##Print the timestamps, source address, source port, destination address, destination port and protocol of all packets read from a given network interface
ipsumdump --src --dst --length --anonymize {{path/to/file.pcap}}##Print the anonymised source address, anonymised destination address, and IP packet length of all packets in a pcap file
ipsumdump --src --dst {{path/to/file.pcap}}##Print the source and destination IP addresses of all packets in a pcap file
ipython -i {{script.py}}##Enter an interactive IPython session after running a Python script
ipython history clear##Clear the IPython history database, deleting all entries
ipython locate profile##Print the path to the directory for the default IPython profile
ipython profile create##Create default IPython profile
ipython##Start a REPL (interactive shell)
irb##Start a REPL (interactive shell)
irssi --help##View the help
irssi -c {{irc.example.com}} -p {{port}}##Open Irssi and connect with a specific server on a given port
irssi -n {{nickname}} -c {{irc.example.com}}##Open Irssi and connect to a server with a nickname
is-up {{example.com}}##Check the status of the specified website
iverilog -E {{source.v}}##Preprocess Verilog code without compiling
iverilog -o {{executable}} -tvvp {{source.v}}##Compile and run explicitly using the VVP runtime
iverilog {{source.v}} -Wall -o {{executable}}##Also display all warnings
iverilog {{source.v}} -o {{executable}} -I{{path/to/library_directory}}##Compile using Verilog library files from a different path
iverilog {{source.v}} -o {{executable}}##Compile a source file into an executable
ivpn servers##Print a list of available servers to connect to
ivpn status##Print the current state of IVPN, including the connection and firewall status
j --purge##Remove non-existing directories from the autojump database
j -s##Show the entries in the autojump database
j {{pattern}}##Jump to a directory that contains the given pattern
jadx --output-dir {{path/to/directory}} {{path/to/file}}##Decompile a Dex file into a specific directory
jadx {{path/to/file}}##Decompile a Dex file into a directory
jar -xvf {{file.jar}}##Unzip .jar/.war file to the current directory
jar cf {{file.jar}} *##Recursively archive all files in the current directory into a .jar file
jar tf {{path/to/file.jar}}##List a .jar/.war file content
jar tvf {{path/to/file.jar}}##List a .jar/.war file content with verbose output
jarsigner -sigalg {{algorithm}} {{path/to/file.jar}} {{keystore_alias}}##Sign a JAR file with a specific algorithm
jarsigner -verify {{path/to/file.jar}}##Verify the signature of a JAR file
jarsigner {{path/to/file.jar}} {{keystore_alias}}##Sign a JAR file
java -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005 -jar {{filename.jar}}##Execute a `.jar` program with debug waiting to connect on port 5005
java -classpath {{path/to/classes1}}:{{path/to/classes2}}:. {{classname}}##Execute a java program and use additional third-party or user-defined classes
java -help##Display usage information for the java command
java -jar {{filename.jar}}##Execute a `.jar` program
java -version##Display JDK, JRE and HotSpot versions
java {{classname}}##Execute a java `.class` file that contains a main method by using just the class name
javac -d {{path/to/some/directory}} {{file.java}}##Compile a `.java` file and place the resulting class file in a specific directory
javac {{*.java}}##Compile all `.java` files in current directory
javac {{file.java}}##Compile a `.java` file
javac {{file1.java}} {{file2.java}} {{file3.java}}##Compile several `.java` files
javadoc -d {{path/to/directory/}} {{path/to/java_source_code}}##Generate documentation for Java source code and save the result in a directory
javadoc -docencoding {{UTF-8}} {{path/to/java_source_code}}##Generate documentation with a specific encoding
javadoc -exclude {{package_list}} {{path/to/java_source_code}}##Generate documentation excluding some packages
jc -p {{ifconfig}}##Output pretty JSON via magic syntax
jc {{ifconfig}}##Convert command output to JSON via magic syntax
jc {{pattern}}##Jump to a sub-directory (child) of the current directory that contains the given pattern
jcal -3##Display the previous, current, and next months
jcal {{year}} {{month}}##Display a calendar for a specific month and year
jcal {{year}}##Display a calendar for a specific year (4 digits)
jcal##Display a calendar for the current month
jdupes --delete --recurse {{directory}}##Search directory recursively and let user choose files to preserve
jdupes --recurse {{directory}}##Search all directories recursively
jdupes -O {{directory1}} {{directory2}} {{directory3}}##Search multiple directories and keep the directory order in result
jdupes {{directory1}} --recurse: {{directory2}}##Search multiple directories and follow subdirectores under directory2, not directory1
jdupes {{directory1}} {{directory2}}##Search multiple directories
jdupes {{directory}}##Search a single directory
jekyll build##Generate the current directory into `./_site`
jekyll clean##Clean the site (removes site output and `cache` directory) without building
jekyll serve --incremental##Enable incremental regeneration
jekyll serve --verbose##Enable verbose output
jekyll serve##Generate a development server that will run at http//localhost4000/
jenv add {{path/to/jdk_home}}##Add a Java version to jEnv
jenv enable-plugin {{plugin_name}}##Enable a jEnv plugin
jenv global {{java_version}}##Set the global JDK version
jenv shell {{java_version}}##Set the JDK version for the current shell session
jenv version##Display the current JDK version used
jenv versions##Display all managed JDKs
jest --findRelatedTests {{path/to/source_file.js}}##Run test suites related to a given source file
jest --help##Show help
jest --onlyChanged##Run test suites related to all uncommitted files
jest --testNamePattern {{regular_expression}}##Run the tests whose names match the given regular expression
jest --watch##Watch files for changes and automatically re-run related tests
jest {{path/to/file1}} {{path/to/file2}}##Run the test suites from the given files
jest {{regular_expression1}} {{regular_expression2}}##Run the test suites from files within the current and subdirectories, whose paths match the given regular expression
jest##Run all available tests
jetifier reverse##Migrate project dependencies from the AndroidX format
jetifier##Migrate project dependencies to the AndroidX format
jhat -J-mx8G {{dump_file.bin}}##Analyze a dump letting `jhat` use up to 8 GB RAM (2-4x dump size recommended)
jhat -p {{port}} {{dump_file.bin}}##Analyze a heap dump, specifying an alternate port for the http server
jhat {{dump_file.bin}}##Analyze a heap dump (from `jmap`), view via HTTP on port 7000
jhipster --skip-client##Generate a simple backend project
jhipster --skip-server##Generate a simple frontend project
jhipster ci-cd##Generate a CI/CD pipeline for your application
jhipster entity {{entity_name}}##Add a new entity to a generated project
jhipster import-jdl {{first_file.jh second_file.jh ... n_file.jh}}##Import a JDL file to configure your application (see https//start.jhipster.tech/jdl-studio/)
jhipster kubernetes##Generate a Kubernetes configuration for your application
jhipster upgrade##Apply latest JHipster updates to the project
jhipster##Generate a simple full-stack project (monolithic or microservices)
jhsdb clhsdb --core {{path/to/core_dump}} --exe {{path/to/jdk/bin/java}}##Open a core dump in interactive debug mode
jhsdb clhsdb --pid {{pid}}##Connect to a process in interactive debug mode
jhsdb debugd --pid {{pid}} --serverid {{optional_unique_id}}##Start a remote debug server
jhsdb jstack --pid {{pid}}##Print stack and locks information of a Java process
jigsaw build production##Build the site for production
jigsaw build##Build the site for development
jigsaw init {{template_name}}##Initialise a project using a starter template
jigsaw init##Initialise a project
jigsaw serve {{build_production}}##Preview the site from the "build_production" directory
jigsaw serve##Preview the site from the "build_local" directory
jmap -dump:format=b,file={{filename}} {{java_pid}}##Dump contents of the heap into a binary file for analysis with jhat
jmap -heap {{filename.jar}} {{java_pid}}##Print heap summary information
jmap -histo {{java_pid}}##Print histogram of heap usage by type
jmap {{java_pid}}##Print shared object mappings for a Java process (output like pmap)
jmtpfs --listDevices##List available MTP devices
jmtpfs -device={{bus_id}},{{device_id}} {{path/to/directory}}##If multiple devices are present, mount a specific device
jmtpfs -o {{allow_other,auto_unmount}} {{path/to/directory}}##Set mount options
jmtpfs {{path/to/directory}}##Mount an MTP device to a directory
jo {{pattern}}##Open a directory that contains the given pattern in the operating system file manager
jobs %{{job_id}}##Show status of a particular job
jobs -l##Show status and process IDs of all jobs
jobs -p##Show process IDs of all jobs
jobs##Show status of all jobs
joe +{{line}} {{path/to/file}}##Open a specific file, positioning the cursor at the specified line
joe -rdonly {{path/to/file}}##Open a specific file in read-only mode
joe {{path/to/file}}##Open a specific file
joe##Open a new file in JOE
john --format={{md5crypt}} {{path/to/hashes.txt}}##Crack password hashes, using a specific hash format
john --list=formats##List available hash formats
john --restore={{path/to/mycrack.rec}}##Restore an interrupted cracking session from a state file, e.g. `mycrack.rec`
john --rules {{path/to/hashes.txt}}##Crack password hashes, enabling word mangling rules
john --show --users={{user_ids}} {{path/to/hashes*}} {{path/to/other/hashes*}}##Display users' cracked passwords by user identifier from multiple files
john --show {{path/to/hashes.txt}}##Show passwords cracked
john --wordlist={{path/to/wordlist.txt}} {{path/to/hashes.txt}}##Crack password hashes, using a custom wordlist
john {{path/to/hashes.txt}}##Crack password hashes
join -1 {{3}} -2 {{1}} {{file1}} {{file2}}##Join field3 of file1 with field1 of file2
join -a {{1}} {{file1}} {{file2}}##Produce a line for each unpairable line for file1
join -t {{','}} {{file1}} {{file2}}##Join two files using a comma (instead of a space) as the field separator
join {{file1}} {{file2}}##Join two files on the first (default) field
josm --download {{minlat,minlon,maxlat,maxlon}}##Launch JOSM and download a specific bounding box
josm --downloadgps {{minlat,minlon,maxlat,maxlon}}##Launch JOSM and download a specific bounding box as raw GPS
josm --language {{de}}##Launch JOSM and set a specific language
josm --maximize##Launch JOSM in maximized mode
josm --reset-preferences##Launch JOSM and reset all preferences to their default values
josm --skip-plugins##Launch JOSM without plugins
josm##Launch JOSM
jp2a --chars='{{..-ooxx@@}}' {{path/to/image.jpeg}}##Specify characters to be used for the ASCII output
jp2a --colors {{path/to/image.jpeg}}##Colorize the ASCII output
jp2a --html --output={{path/to/output_file.html}} {{path/to/image.jpeg}}##Write the ASCII output in HTML file format, suitable for viewing in web browsers
jp2a --output={{path/to/output_file.txt}} {{path/to/image.jpeg}}##Write the ASCII output into a file
jp2a {{path/to/image.jpeg}}##Read JPEG image from a file and print in ASCII
jp2a {{www.example.com/image.jpeg}}##Read JPEG image from a URL and print in ASCII
jpegoptim --all-progressive {{image1.jpeg}} {{image2.jpeg}} {{imageN.jpeg}}##Force the output images to be progressive
jpegoptim --size={{250k}} {{image1.jpeg}} {{image2.jpeg}} {{imageN.jpeg}}##Force the output images to have a fixed maximum filesize
jpegoptim --strip-all {{image1.jpeg}} {{image2.jpeg}} {{imageN.jpeg}}##Optimise JPEG images, stripping all non-essential data
jpegoptim {{image1.jpeg}} {{image2.jpeg}} {{imageN.jpeg}}##Optimise a set of JPEG images, retaining all associated data
jps -l##Display the full package name of all processes
jps -m##Display the arguments passed to the processes
jps -q##List all JVM processes with only PID
jps -v##Display the arguments passed to the JVM
jps##List all JVM processes
jrnl -from "{{last year}}" -until {{march}}##View everything that happened from the start of last year to the start of last march
jrnl -n {{10}}##View the last ten entries
jrnl {{@texas}} -and {{@history}} --edit##Edit all entries tagged with "texas" and "history"
jrnl {{today at 3am}}: {{title}}. {{content}}##Quickly insert a new entry
jrnl##Insert a new entry with your editor
json5 --help##View available options
json5 --space {{indent_amount}}##Specify the number of spaces to indent by (or "t" for tabs)
json5 {{path/to/input_file.json5}} --out-file {{path/to/output_file.json}}##Convert a JSON5 file to the specified JSON file
json5 {{path/to/input_file.json5}} --validate##Validate a JSON5 file
json5 {{path/to/input_file.json5}}##Convert a JSON5 file to JSON and output to stdout
jstack -m {{java_pid}}##Print mixed mode (Java/C++) stack traces for all threads in a Java process
jstack {{/usr/bin/java}} {{file.core}}##Print stack traces from Java core dump
jstack {{java_pid}}##Print Java stack traces for all threads in a Java process
julia -E '{{(1 - cos(pi/4))/2}}'##Evaluate an expression and print the result
julia -e '{{for x in ARGS; println(x); end}}' {{arguments}}##Evaluate a string of Julia code, passing arguments to it
julia -e '{{julia_code}}'##Evaluate a string containing Julia code
julia -p {{N}}##Start Julia in parallel mode, using N worker processes
julia {{program.jl}} {{arguments}}##Execute a Julia program that takes arguments
julia {{program.jl}}##Execute a Julia program and exit
julia##Start a REPL (interactive shell)
jupyter lab##Start JupyterLab, if installed, in the current directory
jupyter nbconvert --to {{html|markdown|pdf|script}} {{example.ipynb}}##Export a specific Jupyter notebook into another format
jupyter notebook --port={{port}}##Start a server on a specific port
jupyter notebook list##List currently running notebook servers
jupyter notebook stop##Stop the currently running server
jupyter notebook {{example.ipynb}}##Open a specific Jupyter notebook
jupyter notebook##Start a Jupyter notebook server in the current directory
jupytext --set-formats ipynb,py {{notebook.ipynb}}##Turn a notebook into a paired `.ipynb`/`.py` notebook
jupytext --sync {{notebook.ipynb}}##Update all paired representations of a notebook
jupytext --to notebook --execute {{notebook.md}}##Convert a `.md` file to a notebook and run it
jupytext --to notebook {{notebook.py}}##Convert a `.py` file to a notebook with no outputs
jupytext --to py {{notebook.ipynb}}##Convert a notebook to a `.py` file
jupytext --update --to notebook {{notebook.py}}##Update the input cells in a notebook and preserve outputs and metadata
jwt decode -j {{jwt_string}}##Decode a JWT as a JSON string
jwt decode {{jwt_string}}##Decode a JWT
jwt encode --alg {{HS256}} --secret {{1234567890}} '{{json_string}}'##Encode a JSON string to a JWT
jwt encode --alg {{HS256}} --secret {{1234567890}} -P key=value##Encode key pair payload to JWT
k6 cloud {{script.js}}##Run load test on cloud infrastructure
k6 login cloud --token {{secret}}##Log in to cloud service using secret token
k6 run --compatibility-mode=base {{script.js}}##Run load test locally using the base JavaScript compatibility mode (significantly faster)
k6 run --discard-response-bodies {{script.js}}##Run load test locally and discard response bodies (significantly faster)
k6 run --out influxdb={{http://localhost:8086/k6db}} {{script.js}}##Run load test locally using InfluxDB to store results
k6 run --vus {{10}} --duration {{30s}} {{script.js}}##Run load test locally with a given number of virtual users and duration
k6 run -e {{HOSTNAME=example.com}} {{script.js}}##Run load test locally with a given environment variable
k6 run {{script.js}}##Run load test locally
k8s-unused-secret-detector -n {{namespace}} | kubectl delete secret -n {{namespace}}##Delete unused secrets in a specific namespace
k8s-unused-secret-detector -n {{namespace}}##Detect unused secrets in a specific namespace
k8s-unused-secret-detector##Detect unused secrets
k8sec dump -f {{path/to/file}} {{secret_name}}##Dump secrets to a file
k8sec list {{secret_name}} --base64##List a specific secret as a base64-encoded string
k8sec list##List all secrets
k8sec load -f {{path/to/file}} {{secret_name}}##Load secrets from a file
k8sec set --base64 {{secret_name}} {{key=encoded_value}}##Set a base64-encoded value
k8sec set {{secret_name}} {{key=value}}##Set a secret's value
k8sec unset {{secret_name}}##Unset a secret
kafkacat -C -t {{topic}} -b {{brokers}} -o beginning -e##Consume messages starting with the oldest offset and exit after the last message is received
kafkacat -C -t {{topic}} -b {{brokers}}##Consume messages starting with the newest offset
kafkacat -G {{group_id}} {{topic}} -b {{brokers}}##Consume messages as a Kafka consumer group
kafkacat -L -b {{brokers}}##List metadata for all topics and brokers
kafkacat -L -t {{topic}} -b {{brokers}}##List metadata for a specific topic
kafkacat -P -t {{topic}} -b {{brokers}} {{path/to/file}}##Publish messages by reading from a file
kafkacat -Q -t {{topic}}:{{partition}}:{{unix_timestamp}} -b {{brokers}}##Get offset for a topic/partition for a specific point in time
kaggle competitions download {{competition}} -f {{filename}}##Download a specific file from a competition dataset
kaggle config view##View current configuration values
kahlan --config={{path/to/configuration_file}}##Run specifications using a specific configuration file
kahlan --coverage={{detail_level}}##Run specifications with code coverage (detail can be between 0 and 4)
kahlan --reporter={{dot|bar|json|tap|verbose}}##Run specifications and output using a reporter
kahlan##Run all specifications in the "spec" directory
kak {{path/to/file}}##Open a file and enter normal mode, to execute commands
kate --help##Display help
kate --line {{line_number}} --column {{column_number}} {{path/to/file}}##Open a file in Kate with the cursor at the specific line and column
kate --line {{line_number}} {{path/to/file}}##Open a file in Kate with the cursor at the specific line
kate --new##Launch Kate, creating a new instance even if one is already open
kate {{https://example.com/path/to/file}}##Open a remote document in Kate
kate {{path/to/file1}} {{path/to/file2}}##Launch Kate and open specific files
kdeconnect-cli --list-available##List available (paired and reachable) devices
kdeconnect-cli --list-devices##List all devices
kdeconnect-cli --name {{device_name}} --send-keys {{key}}##Simulate a key press on a specific device
kdeconnect-cli --name {{device_name}} --send-sms {{message}} --destination {{phone_number}} --attachment {{path/to/file}}##Send an SMS with an optional attachment to a specific number
kdeconnect-cli --name {{device_name}} --unlock##Unlock a specific device
kdeconnect-cli --pair --device {{device_id}}##Request pairing with a specific device, specifying its ID
kdeconnect-cli --ring --name {{device_name}}##Ring a device, specifying its name
kdeconnect-cli --share {{URL|path/to/file}} --device {{device_id}}##Share an URL or file with a paired device, specifying its ID
kdig -d @{{1.1.1.1}} +https +tls-hostname={{1dot1dot1dot1.cloudflare-dns.com}} {{example.com}}##Lookup the IP(s) associated with a hostname (A records) using DNS over HTTPS (DoH)
kdig -d @{{8.8.8.8}} +tls-ca +tls-host={{dns.google}} {{example.com}}##Lookup the IP(s) associated with a hostname (A records) using DNS over TLS (DoT)
kdig {{example.com}} @{{8.8.8.8}}##Specify a specific DNS server to query (e.g. Google DNS)
kdig {{example.com}} {{A|AAAA|NS|SOA|DNSKEY|ANY}}##Query a specific DNS record type associated with a given domain name
kdig {{example.com}}##Lookup the IP(s) associated with a hostname (A records)
keepass2 {{path/to/database.kbdx}} -keyfile:{{path/to/key/file.key}}##Use a specific key file to open a password database
keepass2 {{path/to/database.kbdx}}##Start KeePass 2, opening a specific password database
keepass2##Start KeePass 2, opening the most recently opened password database
keepassxc-cli add --generate {{path/to/database_file}} {{entry_name}}##Add an entry with an auto-generated password
keepassxc-cli clip --totp {{path/to/database_file}} {{entry_name}}##Copy a TOTP code to the clipboard
keepassxc-cli clip {{path/to/database_file}} {{entry_name}}##Copy an entry's password to the clipboard
keepassxc-cli diceware --words {{7}}##Generate a passphrase with 7 words
keepassxc-cli generate --lower --upper --numeric --special --length {{16}}##Generate a password with 16 printable ASCII characters
keepassxc-cli lookup {{path/to/database_file}} {{name}}##Search entries
keepassxc-cli ls {{path/to/database_file}} {{/path/to/directory}}##List the contents of a folder
keepassxc-cli rm {{path/to/database_file}} {{entry_name}}##Delete an entry
keybase decrypt --infile {{input_file}} --outfile {{output_file}}##Decrypt a file
keybase deprovision##Revoke current device, log out, and delete local data
keybase encrypt --infile {{input_file}} --outfile {{output_file}} {{receiver}}##Encrypt a file
keybase follow {{username}}##Follow another user
keybase prove {{service}} {{service_username}}##Add a new proof
keybase sign --infile {{input_file}} --outfile {{output_file}}##Sign a file
keybase verify --infile {{input_file}} --outfile {{output_file}}##Verify a signed file
keychain --agents "{{gpg,ssh}}"##Also check for gpg-agent
keychain --list##List signatures of all active keys
keychain --list-fp##List fingerprints of all active keys
keychain --timeout {{minutes}}##Add a timeout for identities added to the agent, in minutes
keychain##Check for a running ssh-agent, and start one if needed
khal at -d {{personal}} {{tomorrow}} {{10:00}}##Print all events scheduled not in personal calendar for tomorrow at 1000
khal calendar##Print a calendar with a list of events for the next three months
khal list -a {{personal}} {{today}} {{7d}}##Print all events scheduled in personal calendar for the next seven days
khal new -a {{personal}} {{2020-09-08}} {{18:00}} {{18:30}} "{{Dentist appointment}}"##Add new event to personal calendar
kill %{{job_id}}##Terminate a background job
kill --CONT {{runit_pid}}##Shut down runit
kill -USR1 $(pgrep ^dd)##Check progress of an ongoing dd operation (Run this command from another shell)
kill -l##List available signal names (to be used without the `SIG` prefix)
kill -{{17|STOP}} {{process_id}}##Signal the operating system to pause a program until a SIGCONT ("continue") signal is received
kill -{{1|HUP}} {{process_id}}##Terminate a program using the SIGHUP (hang up) signal. Many daemons will reload instead of terminating
kill -{{2|INT}} {{process_id}}##Terminate a program using the SIGINT (interrupt) signal. This is typically initiated by the user pressing `Ctrl + C`
kill -{{9|KILL}} {{process_id}}##Signal the operating system to immediately terminate a program (which gets no chance to capture the signal)
kill -{{SIGUSR1}} -{{group_id}}##Send a `SIGUSR1` signal to all processes with the given GID (group id)
kill {{instance_id}};##Kill an instance
kill {{process_id}}##Terminate a program using the default SIGTERM (terminate) signal
killall --list##List available signal names (to be used without the 'SIG' prefix)
killall -INT {{process_name}}##Terminate a process using the SIGINT (interrupt) signal, which is the same signal sent by pressing `Ctrl + C`
killall -KILL {{process_name}}##Force kill a process
killall -SIGINT openconnect##Terminate the connection that is running in the background
killall -i {{process_name}}##Interactively ask for confirmation before termination
killall {{process_name}}##Terminate a process using the default SIGTERM (terminate) signal
kind create cluster --name {{cluster_name}}##Create a local Kubernetes cluster
kind delete clusters {{cluster_name}}##Delete one or more clusters
kind export {{kubeconfig|logs}}##Export the kubeconfig or the logs
kind get {{clusters|nodes|kubeconfig}}##Get details about clusters, nodes, or the kubeconfig
kitex -module {{github.com/xx-org/xx-name}} {{path/to/IDL_file.thrift}}##Generate client codes when a project is not in `$GOPATH`
kitex -service {{svc_name}} {{path/to/IDL_file.thrift}}##Generate server codes
kitex -type protobuf {{path/to/IDL_file.proto}}##Generate client codes with protobuf IDL
kitex {{path/to/IDL_file.thrift}}##Generate client codes when a project is in `$GOPATH`
kitty +kitten icat {{path/to/image}}##Display an image in the terminal
kitty +kitten themes##Start the theme-chooser builtin
kitty --title "{{title}}"##Open a terminal with the specified title for the window
kitty##Open a new terminal
kiwi-ng -v##Display version
kiwi-ng help##Display help
kiwi-ng result list --target-dir={{path/to/directory}}##Show build result of built appliance
kiwi-ng system build --description={{path/to/directory}} --target-dir={{path/to/directory}}##Build an appliance
knife bootstrap {{fqdn_or_ip}}##Bootstrap a new node
knife cookbook upload {{cookbook_name}}##Upload a local cookbook to the Chef server
knife data bag show {{data_bag_name}} {{data_bag_item}}##View a data bag
knife node edit {{node_name}}##Edit a node
knife node list##List all registered nodes
knife node show {{node_name}}##Show a node
knife role edit {{role_name}}##Edit a role
kompose convert -f {{docker-compose.yml}}##Convert a docker-compose file into Kubernetes resources file
kompose down -f {{docker-compose.yml}}##Delete instantiated services/deployments from Kubernetes
kompose up -f {{docker-compose.yml}}##Deploy a dockerized application to Kubernetes
kops create cluster -f {{cluster_name.yaml}}##Create a cluster from the configuration specification
kops create secret sshpublickey {{key_name}} -i {{~/.ssh/id_rsa.pub}}##Create a new ssh public key
kops delete cluster {{cluster_name}} --yes##Delete a cluster
kops export kubecfg {{cluster_name}}##Export the cluster configuration to the `~/.kube/config` file
kops get cluster {{cluster_name}} -o yaml##Get the cluster configuration as YAML
kosmorro --format={{pdf}} --output={{path/to/file.pdf}}##Generate a PDF (note TeXLive must be installed)
kosmorro --latitude={{48.7996}} --longitude={{2.3511}} --date={{2020-06-09}}##Get ephemerides for Paris, France, on June 9th, 2020
kosmorro --latitude={{48.7996}} --longitude={{2.3511}} --timezone={{2}}##Get ephemerides for Paris, France, in the UTC+2 timezone
kosmorro --latitude={{48.7996}} --longitude={{2.3511}}##Get ephemerides for Paris, France
kotlin -version##Display Kotlin and JVM version
kotlin {{filename.jar}}##Run a jar file
kotlinc -script {{path/to/file.kts}}##Execute a specific Kotlin Script file
kotlinc {{path/to/file.kt}} -include-runtime -d {{path/to/file.jar}}##Compile a Kotlin file into a self contained jar file with the Kotlin runtime library included
kotlinc {{path/to/file.kt}}##Compile a Kotlin file
kotlinc {{path/to/file1.kt path/to/file2.kt ...}}##Compile several Kotlin files
kotlinc##Start a REPL (interactive shell)
ksh -c "{{command}}"##Execute a command and then exit
ksh -x {{path/to/script.ksh}}##Execute a script, printing each command before executing it
ksh {{path/to/script.ksh}}##Execute a script
ksh##Start an interactive shell session
kube-capacity -p##Include pods
kube-capacity -u##Include utilization
kube-capacity##Output a list of nodes with the total CPU and Memory resource requests and limits
kubeadm config view##View the kubeadm ConfigMap containing the cluster's configuration
kubeadm init##Create a Kubernetes master node
kubeadm join --token {{token}}##Bootstrap a Kubernetes worker node and join it to a cluster
kubeadm reset##Revert changes made to the host by 'kubeadm init' or 'kubeadm join'
kubeadm token create --ttl {{12h0m0s}}##Create a new bootstrap token with a TTL of 12 hours
kubeadm upgrade apply {{version}}##Upgrade Kubernetes cluster to a specified version
kubeadm upgrade plan##Check if the Kubernetes cluster is upgradeable and which versions are available
kubectl cluster-info##Print the address of the master and cluster services
kubectl delete --filename {{path/to/manifest.yaml}}##Delete resources defined in a YAML manifest
kubectl delete deployment {{deployment_name}}##Delete a specific deployment
kubectl delete deployments,services --all --namespace {{namespace}}##Delete all deployments and services in a specified namespace
kubectl delete node {{node_name}}##Delete a specific node
kubectl delete nodes --all##Delete all nodes
kubectl delete pod {{pod_name}}##Delete a specific pod
kubectl delete pods --all --namespace {{namespace}}##Delete all pods in a specified namespace
kubectl describe -f {{path/to/manifest}}.yaml##Show details of Kubernetes objects defined in a YAML manifest
kubectl describe nodes -n {{namespace}}##Show details of nodes in a namespace
kubectl describe nodes {{node_name}} -n {{namespace}}##Show the details of a specific node in a namespace
kubectl describe pods -n {{namespace}}##Show details of pods in a namespace
kubectl describe pods {{pod_name}} -n {{namespace}}##Show the details of a specific pod in a namespace
kubectl exec {{pod_name}} -- {{ls /}}##Run command in an existing pod
kubectl explain {{pods.spec.containers}}##Display an explanation of a specific field
kubectl get -f {{path/to/manifest}}.yaml##Get Kubernetes objects defined in a YAML manifest
kubectl get all -n {{namespace}}##Get all resources in a specified namespace
kubectl get all##List all resources with different types
kubectl get deployments -n {{namespace}}##Get deployments in a specified namespace
kubectl get namespaces##Get all namespaces in the current cluster
kubectl get nodes -n {{namespace}}##Get nodes in a specified namespace
kubectl get pods -n {{namespace}}##Get pods in a specified namespace
kubectl get services -n {{namespace}}##Get services in a specified namespace
kubectl get {{pod|service|deployment|ingress|...}} -o wide##List information about a resource with more details
kubectl label pods {{name}} unhealthy=true##Update specified pod with the label 'unhealthy' and the value 'true'
kubectl logs --all-containers={{true}} {{pod_name}}##Show logs for all containers in a pod
kubectl logs --container {{container_name}} {{pod_name}}##Show logs for a specified container in a pod
kubectl logs --follow --container {{container_name}} {{pod_name}}##Stream logs for a specified container in a pod
kubectl logs --follow {{pod_name}}##Stream pod logs
kubectl logs --since={{relative_time}} {{pod_name}}##Show pod logs newer than a relative time like `10s`, `5m`, or `1h`
kubectl logs --tail={{10}} {{pod_name}}##Show the 10 most recent logs in a pod
kubectl logs {{pod_name}}##Print the logs for a container in a pod or specified resource
kubectl logs {{pod_name}}##Show logs for a single-container pod
kubectl rollout history {{resource_type}}/{{resource_name}}##View the rollout history of a resource
kubectl rollout restart {{resource_type}}/{{resource_name}}##Start a rolling restart of a resource
kubectl rollout status {{resource_type}}/{{resource_name}}##Watch the rolling update status of a resource
kubectl rollout undo {{resource_type}}/{{resource_name}}##Roll back a resource to the previous revision
kubectl run --generator=run-pod/v1 -it temp-ubuntu --image=ubuntu:20.04 --restart=Never --rm -- /bin/bash##Run an Ubuntu pod interactively, never restart it, and remove it when it exits
kubectl run --generator=run-pod/v1 nginx --image=nginx --dry-run##Show API calls that would be made to create an nginx container
kubectl run --generator=run-pod/v1 nginx --image=nginx --env="TEST_VAR=testing"##Run an nginx pod, setting the TEST_VAR environment variable
kubectl run --generator=run-pod/v1 nginx --image=nginx --port 80##Run an nginx pod and expose port 80
kubectl run --generator=run-pod/v1 temp-ubuntu --image=ubuntu:20.04 --command -- echo arg1 arg2 arg3##Run an Ubuntu pod, overriding the default command with echo, and specifying custom arguments
kubectl top {{pod|node}}##Display resource (CPU/Memory/Storage) usage of nodes or pods
kubectx -##Switch to the previous context
kubectx -d {{name}}##Delete a named context
kubectx {{name}}##Switch to a named context
kubectx##List the contexts
kubens -##Switch to the previous namespace
kubens {{name}}##Change the active namespace
kubens##List the namespaces
kubetail {{my_app_1}},{{my_app_2}}##To tail multiple applications at the same time separate them by comma
kubetail {{my_app}} -c {{my_container_1}} -c {{my_container_2}}##To tail multiple containers from multiple pods
kubetail {{my_app}} -c {{my_container}}##Tail only a specific container from multiple pods
kubetail {{my_app}}##Tail the logs of multiple pods (whose name starts with "my_app") in one go
kustomize build . | kubectl apply -f -##Build kustomization file and deploy it with `kubectl`
kustomize create --autodetect##Search for Kubernetes resources in the current directory to be added to the kustomization file
kustomize create --resources {{deployment.yaml,service.yaml}} --namespace {{staging}}##Create kustomization file with resources and namespace
kustomize edit set image {{busybox=alpine:3.6}}##Set an image in the kustomization file
l##List available bookmarks
lambo edit-after##Open the configuration file that is run after new applications have been scaffolded
lambo edit-config --editor="{{path/to/editor}}"##Open the configuration in a specific editor
lambo edit-config##Open the configuration in your default editor
lambo new --auth {{app_name}}##Include authentication scaffolding
lambo new --create-db --dbuser={{user}} --dbpassword={{password}} {{app_name}}##Create a new MySQL database with the same name as the project
lambo new --editor="{{editor}}" {{app_name}}##Open a specific editor after the project has been created
lambo new --link {{app_name}}##Create a Valet site after the project has been created
lambo new --node {{app_name}}##Install npm dependencies after the project has been created
lambo new --path={{path/to/directory}} {{app_name}}##Install the application in a specific path
lambo new --{{vue|bootstrap|react}} {{app_name}}##Include a specific frontend
lambo new {{app_name}}##Create a new Laravel application
lambo new {{app_name}}##Create a new Laravel application
laravel list##List the available installer commands
laravel new {{name}} --dev##Use the latest development release
laravel new {{name}} --force##Overwrite if the directory already exists
laravel new {{name}} --jet --stack {{livewire|inertia}}##Install the Laravel Jetstream scaffolding with a specific stack
laravel new {{name}} --jet --teams##Install the Laravel Jetstream scaffolding with support for teams
laravel new {{name}} --jet##Install the Laravel Jetstream scaffolding
laravel new {{name}}##Create a new Laravel application
laravel-zero list##List the available installer commands
laravel-zero new {{name}}##Create a new Laravel Zero application
laravel-zero self-update##Update the installer to the latest version
last -F -a##Print the full date and time for entries and then display the hostname column last to prevent truncation
last -n {{login_count}}##Specify how many of the last logins to show
last reboot##View all recorded reboots (i.e., the last logins of the pseudo user "reboot")
last shutdown##View all recorded shutdowns (i.e., the last logins of the pseudo user "shutdown")
last {{username}} -i##View all logins by a specific user and show the IP address instead of the hostname
last##View last logins, their duration and other information as read from `/var/log/wtmp`
latex -halt-on-error {{source.tex}}##Compile a DVI document, exiting on each error
latex -output-directory={{path/to/directory}} {{source.tex}}##Compile a DVI document, specifying an output directory
latex {{source.tex}}##Compile a DVI document
latexmk -c {{source.tex}}##Clean up temporary TEX files created for a specific TEX file
latexmk -c##Clean up all temporary TEX files in the current directory
latexmk -f {{source.tex}}##Force the generation of a document even if there are errors
latexmk -pdf {{source.tex}}##Compile a PDF document
latexmk {{source.tex}}##Compile a DVI document from a specific source file
latexmk##Compile a DVI (Device Independent file) document from every source
lb delete##Delete a published post
lb edit##Edit a draft
lb new##Make a new draft
lb publish##Publish a draft
lb revise##Unpublish a published post to edit it as a draft again
lb trash##Delete a draft
ldapsearch -D '{{admin_DN}}' -w '{{password}}' -h {{ldap_host}} '(&({{memberOf=group1}})({{memberOf=group2}})(!({{memberOf=group3}})))' displayName##Combine multiple boolean logic filters
ldapsearch -D '{{admin_DN}}' -w '{{password}}' -h {{ldap_host}} '(&({{memberOf=group1}})({{memberOf=group2}})({{memberOf=group3}}))' "displayName"##Return all items that are part of multiple groups, returning the display name for each item
ldapsearch -D '{{admin_DN}}' -w '{{password}}' -h {{ldap_host}} '(|({{memberOf=group1}})({{memberOf=group1}})({{memberOf=group3}}))' displayName##Return all items that are members of at least 1 of the specified groups
ldapsearch -D '{{admin_DN}}' -w '{{password}}' -h {{ldap_host}} -b {{base_ou}} '(!(memberOf={{group1}}))' displayName##Invert the filter
ldapsearch -D '{{admin_DN}}' -w '{{password}}' -h {{ldap_host}} -b {{base_ou}} '{{memberOf=group1}}' -l 7 displayName##Wait up to 7 seconds for a response
ldapsearch -D '{{admin_DN}}' -w '{{password}}' -h {{ldap_host}} -b {{base_ou}} '{{memberOf=group1}}' -z 5 displayName##Return 5 items that match the given filter
ldapsearch -D '{{admin_DN}}' -w '{{password}}' -h {{ldap_host}} -b {{base_ou}} '{{memberOf=group1}}' displayName##Query an LDAP server for all items that are a member of the given group and return the object's displayName value
ldapsearch -D '{{admin_DN}}' -y '{{password_file}}' -h {{ldap_host}} -b {{base_ou}} '{{memberOf=group1}}' displayName##Query an LDAP server with a no-newline password file for all items that are a member of the given group and return the object's displayName value
leave +{{0404}}##Set a reminder to leave in 4 hours and 4 minutes
leave +{{amount_of_time}}##Set a reminder in a specific amount of time
leave {{1200}}##Set a reminder to leave at noon
leave {{time_to_leave}}##Set a reminder at a given time
lebab --help##Display a list of the available transformations
lebab --replace {{directory|glob|file}}##Replace all `.js` files in-place in the specified directory, glob or file
lebab --transform {{transformation}}##Transpile using one or more comma-separated transformations
lebab {{path/to/input_file}} --out-file {{path/to/output_file}}##Transpile a file to the specified output file
lebab {{path/to/input_file}}##Transpile a file to stdout
ledger balance --file {{path/to/ledger.journal}}##Print a balance report showing totals
ledger balance {{Expenses}} and not ({{Drinks}} or {{Food}})##Print total Expenses other than Drinks and Food
ledger budget##Print a budget report
ledger register {{expenses}} --sorted {{amount}}##List all postings in Expenses ordered by amount
ledger stats##Print summary information about all the postings
lein new {{template_name}} {{project_name}}##Generate scaffolding for a new project based on a template
lein repl##Start a REPL session either with the project or standalone
lein run {{args}}##Run the project's `-main` function with optional args
lein test##Run the project's tests
lein uberjar##Package up the project files and all its dependencies into a jar file
lerna bootstrap##Install all external dependencies of each package and symlink together local dependencies
lerna exec -- {{ls}}##Execute an arbitrary shell command in every package
lerna init##Initialize project files (`lerna.json`, `package.json`, `.git`, etc.)
lerna publish##Publish all packages that have changed since the last release
lerna run {{script}}##Run a specific script for every package that contains it in its `package.json`
less {{source_file}}##Open a file
lex {{analyser.l}} --outfile {{analyser.c}}##Specify the output file
lex {{analyser.l}}##Generate an analyser from a Lex file
license --name {{author}} --year {{release_year}} {{license_name}}##Generate a license with custom author name and year
license -o {{filename}} {{license_name}}##Generate a license and save it to a file
license ls##List all available licenses
license {{license_name}}##Print a license to stdout, using the defaults (auto-detected author name, and current year)
light-arionum-cli balance {{address}}##Display the balance of the specified address
light-arionum-cli balance##Display the balance of the current address
light-arionum-cli block##Display information about the current block
light-arionum-cli export##Export the current wallet information
light-arionum-cli send {{address}} {{value}} {{optional_message}}##Send a transaction with an optional message
light-arionum-cli transaction {{transaction_id}}##Display information about a specific transaction
light-arionum-cli transactions##Display information about the current address' transactions
light-arionum-cli##Generate a new public/private key pair
lighthouse --extra-headers={{path/to/file.json}} {{https://example.com}}##Generate a report, using the HTTP header key/value pairs in the specified JSON file for all requests
lighthouse --help##Display help
lighthouse --only-categories={{performance,accessibility,best-practices,seo,pwa}} {{https://example.com}}##Generate a report for specific categories only
lighthouse --output {{json}} --output-path {{path/to/file.json}} {{https://example.com}}##Generate a JSON report and save it to a specific file
lighthouse --output {{json}} {{https://example.com}}##Generate a JSON report and print it
lighthouse --quiet --chrome-flags="{{--headless}}" {{https://example.com}}##Generate a report using the browser in headless mode without logging to stdout
lighthouse --screenEmulation.disabled --throttling-method={{provided}} --no-emulatedUserAgent {{https://example.com}}##Generate a report with device emulation and all throttling disabled
lighthouse {{https://example.com}}##Generate an HTML report for a specific website and save it to a file in the current directory
lilypond --formats={{format_dump}} {{path/to/file}}##Compile into the specified format
lilypond --output={{path/to/output_file}} {{path/to/input_file}}##Compile the specified file, and also specify the output filename
lilypond --version##Show the current version of lilypond
lilypond -s {{path/to/file}}##Compile the specified file, suppressing progress updates
lilypond {{path/to/file}}##Compile a lilypond file into a PDF
link {{path/to/existing_file}} {{path/to/new_file}}##Create a hard link from a new file to an existing file
linkchecker --check-extern {{https://example.com/}}##Also check URLs that point to external domains
linkchecker --file-output {{csv}}/{{path/to/file}} {{https://example.com/}}##Output results to a CSV file
linkchecker --ignore-url {{regular_expression}} {{https://example.com/}}##Ignore URLs that match a specific regular expression
linkchecker {{https://example.com/}}##Find broken links on https//example.com/
list functions;##Show functions in the current project
list resources;##Show resources in the current project
live-server --open={{about.html}}##Specify a given file to serve
live-server --port={{8081}}##Specify a port (default is 8080) from which to serve a file
live-server --proxy={{/}}:{{http:localhost:3000}}##Proxy all requests for ROUTE to URL
live-server##Serve an `index.html` file and reload on changes
llc --output {{path/to/output.s}}##Output assembly to a specific file
llc -O3 {{path/to/input.ll}}##Enable all optimizations
llc -relocation-model=pic {{path/to/input.ll}}##Emit fully relocateable, position independent code
llc {{path/to/file.ll}}##Compile a bitcode or IR file to an assembly file with the same base name
lldb -p {{pid}}##Attach `lldb` to a running process with a given PID
lldb -w -n {{process_name}}##Wait for a new process to launch with a given name, and attach to it
lldb {{executable}}##Debug an executable
lli --dlopen={{path/to/library.dll}} {{path/to/file.ll}}##Load a dynamic library before linking
lli -O3 {{path/to/file.ll}}##Enable all optimizations
lli {{path/to/file.ll}} {{argument1 argument2 ...}}##Execute with command line arguments
lli {{path/to/file.ll}}##Execute a bitcode or IR file
lls##Get list of files on local machine
llvm-as --module-hash -o {{path/to/out.bc}} {{path/to/source.ll}}##Assemble an IR file and include a module hash in the produced Bitcode file
llvm-as -o {{path/to/out.bc}} {{path/to/source.ll}}##Assemble an IR file
llvm-bcanalyzer -dump {{path/to/file.bc}}##Print an SGML representation and statistics about a Bitcode file
llvm-bcanalyzer {{path/to/file.bc}}##Print statistics about a Bitcode file
llvm-cat {{path/to/file1.bc}} {{path/to/file2.bc}} -o {{path/to/out.bc}}##Concatenate Bitcode files
llvm-config --prefix##Print the `PREFIX` of your LLVM installation
llvm-config --targets-built##Print all targets supported by your LLVM build
llvm-dis {{path/to/file.bc}}##Convert a bitcode file to an LLVM IR file with the same filename
llvm-dis {{path/to/input.bc}} -o -##Convert a bitcode file as LLVM IR and write the result to stdout
llvm-dis {{path/to/input.bc}} -o {{path/to/output.ll}}##Convert a bitcode file to LLVM IR, writing the result to the specified file
lmms --config {{path/to/config.xml}}##Start the GUI and load external config
lmms --geometry {{x_size}}x{{y_size}}+{{x_offset}}+{{y_offset}}##Start the GUI with a specified window size
lmms --import {{path/to/midi/or/hydrogen/file}}##Start the GUI and import MIDI or Hydrogen file
lmms dump {{path/to/mmpz/file.mmpz}}##Dump a `.mmpz` file
lmms render --samplerate {{88200}} --format {{ogg}} --loop --output {{path/to/output/file.ogg}}##Render with custom samplerate, format, and as a loop
lmms render {{path/to/mmpz_or_mmp/file}}##Render a project file
lmms rendertracks {{path/to/mmpz_or_mmp/file}} {{path/to/dump/directory}}##Render the individual tracks of a project file
lmms##Start the GUI
ln -s {{/path/to/file_or_directory}} {{path/to/symlink}}##Create a symbolic link to a file or directory
ln -sf {{/path/to/new_file}} {{path/to/symlink}}##Overwrite an existing symbolic link to point to a different file
ln {{/path/to/file}} {{path/to/hardlink}}##Create a hard link to a file
loadtest --concurrency {{10}} --rps {{200}} {{https://example.com}}##Run with concurrent users and a specified amount of requests per second
loadtest --headers "{{accept:text/plain;text-html}}" {{https://example.com}}##Run with a custom HTTP header
loadtest --method {{GET}} {{https://example.com}}##Run with a specific HTTP method
loc --files##Print lines of code with stats for individual files
loc -u##Print lines of code without .gitignore (etc.) files (e.g. two -u flags will additionally count hidden files and dirs)
loc {{path/to/directory}}##Print lines of code in the target directory
loc##Print lines of code in the current directory
local -A {{variable}}=({{[key_a]=item_a [key_b]=item_b [key_c]=item_c}})##Declare an associative array variable with the specified value
local -i {{variable}}="{{value}}"##Declare an integer variable with the specified value
local -r {{variable}}="{{value}}"##Declare a readonly variable with the specified value
local {{variable}}="{{value}}"##Declare a string variable with the specified value
local {{variable}}=({{item_a item_b item_c}})##Declare an array variable with the specified value
locust --host={{http://example.com}}##Load-test "example.com" with web interface using locustfile.py
locust --locustfile={{test_file.py}} --host={{http://example.com}}##Use a different test file
locust --master --host={{http://example.com}}##Start locust in master mode
locust --no-web --clients={{100}} --hatch-rate={{1}} --host={{http://example.com}}##Run test without web interface, spawning 1 user a second until there are 100 users
locust --slave --host={{http://example.com}}##Connect locust slave to master
locust --slave --master-host={{master_hostname}} --host={{http://example.com}}##Connect locust slave to master on a different machine
logger {{message}}##Log a message to syslog
logname##Display the currently logged in user's name
logstash --configtest --config {{logstash_config.conf}}##Check validity of a Logstash configuration
lolcat -a {{path/to/file}}##Print a file to the console with animated rainbow colors
lolcat -t {{path/to/file}}##Print a file to the console with 24-bit (truecolor) rainbow colors
lolcat {{path/to/file}}##Print a file to the console in rainbow colors
lorem --randomize -c {{40}} --decamerone##Print 40 random characters from Boccaccio's Decameron
lorem -l {{10}} --faust##Print 10 lines of Goethe's Faust
lorem -n {{20}}##Print the specified number of words
lorem -s {{5}} --raven##Print 5 sentences of Poe's Raven
lp -P 1,3-5,16 {{path/to/filename}}##Print only certain pages to the default printer (print pages 1, 3-5, and 16)
lp -d {{printer_name}} {{path/to/filename}}##Print a file to a named printer (see `lpstat` command)
lp -i {{job_id}} -H resume##Resume printing a job
lp -n {{N}} {{path/to/filename}}##Print N copies of file to default printer (replace N with desired number of copies)
lp {{path/to/filename}}##Print a file to the default printer
lpass generate --username {{username}} --url {{gmail.com}} {{myinbox}} {{password_length}}##Generate a new password for gmail.com with the identifier `myinbox` and add to LastPass
lpass login {{username}}##Log in to your LastPass account, by entering your master password when prompted
lpass ls##List all sites grouped by category
lpass show {{myinbox}} --password##Show password for a specified entry
lpass status##Show login status
lpinfo --make-and-model "{{printer_model}}" -m##Search installed printer drivers by make and model
lpinfo -m##List all the currently installed printer drivers
lpinfo -v##List all the currently connected printers
lpr -# {{2}} {{path/to/file}}##Print 2 copies
lpr -P {{printer}} {{path/to/file}}##Print to a named printer
lpr -o media={{a4|letter|legal}} {{path/to/file}}##Set page size (more options may be available depending on setup)
lpr -o number-up={{2|4|6|9|16}} {{path/to/file}}##Print multiple pages per sheet
lpr -o page-ranges={{2|2-16}} {{path/to/file}}##Print either a single page (e.g. 2) or a range of pages (e.g. 2–16)
lpr -o sides={{two_sided_long_edge|two_sided_short_edge}} {{path/to/file}}##Print double-sided either in portrait (long) or in landscape (short)
lpr {{path/to/file}}##Print a file to the default printer
lpstat -d##Show the default printer
lpstat -p##List printers present on the machine and whether they are enabled for printing
lpstat -t##Display all available status information
lpstat -u {{user}}##Show a list of print jobs queued by the specified user
ls *.txt | parallel -j4 gzip##Read arguments from stdin, run 4 jobs at once
ls -1##List files one per line
ls -F##List all files, with trailing `/` added to directory names
ls -a##List all files, including hidden files
ls -d */##Only list directories
ls -l | numfmt --header={{1}} --field={{5}} --to={{iec}}##Convert 5th field (1-indexed) to IEC Units without converting header
ls -lS##Long format list sorted by size (descending)
ls -la##Long format list (permissions, ownership, size, and modification date) of all files
ls -lh##Long format list with size displayed using human-readable units (KiB, MiB, GiB)
ls -ltr##Long format list of all files, sorted by modification date (oldest first)
ls | git column --mode=column --padding={{30}}##Format the standard input as multiple columns with a maximum padding of `30`
ls | git column --mode=column --width={{100}}##Format the standard input as multiple columns with a maximum width of `100`
ls | git column --mode={{column}}##Format the standard input as multiple columns
ls##Get list of files on remote machine
lsd -1##List files and directories, one per line
lsd -F##List all files and directories with trailing `/` added to directory names
lsd -a##List all files and directories, including hidden ones, in the current directory
lsd -d {{*/}}##Only list directories
lsd -lS##List all files and directories in long format, sorted by size (descending)
lsd -la##List all files and directories in long format (permissions, ownership, size, and modification date)
lsd -lh##List all files and directories in long format with size displayed using human-readable units (KiB, MiB, GiB)
lsd -ltr##List all files and directories in long format, sorted by modification date (oldest first)
lsof +D {{path/to/directory}}##List open files in a directory
lsof -c {{process_or_command_name}}##List files opened by the given command or process
lsof -i :{{port}}##Find the process that opened a local internet port
lsof -i6TCP:{{port}} -sTCP:LISTEN -n -P##Find the process that is listening on a local IPv6 TCP port and don't convert network or port numbers
lsof -p {{PID}}##List files opened by a specific process, given its PID
lsof -t {{path/to/file}}##Only output the process ID (PID)
lsof -u {{username}}##List files opened by the given user
lsof {{path/to/file}}##Find the processes that have a given file open
lsvirtualenv##List all virtual environments
lt --port {{8000}} --host {{host}}##Specify the upstream server doing the forwarding
lt --port {{8000}} --open##Open the tunnel URL in the default web browser
lt --port {{8000}} --print-requests##Print basic request info
lt --port {{8000}} --subdomain {{subdomain}}##Request a specific subdomain
lt --port {{8000}}##Start tunnel from a specific port
lua -e '{{print( "Hello World" )}}'##Execute a Lua expression
lua {{script_name.lua}} {{--optional-argument}}##Execute a Lua script
lua##Start an interactive Lua shell
luac -o {{byte_code.luac}} {{source.lua}}##Compile a Lua source file to Lua bytecode
luac -s -o {{byte_code.luac}} {{source.lua}}##Do not include debug symbols in the output
lumen list##List the available installer commands
lumen new {{application_name}}##Create a new Lumen application
lwp-request -C {{username}}:{{password}} -m {{METHOD}} {{http://example.com/some/path}}##Make a request with HTTP authentication
lwp-request -E -m {{METHOD}} {{http://example.com/some/path}}##Make a request and print response headers and status chain
lwp-request -H 'User-Agent: {{user_agent}} -m {{METHOD}} {{http://example.com/some/path}}##Make a request with a custom user agent
lwp-request -U -m {{METHOD}} {{http://example.com/some/path}}##Make a request and print request headers
lwp-request -m GET {{http://example.com/some/path}}##Make a simple GET request
lwp-request -m POST {{http://example.com/some/path}} < {{path/to/file}}##Upload a file with a POST request
lynx -anonymous {{example.com}}##Apply restrictions for anonymous account
lynx -color {{example.com}}##Force color mode on, if available
lynx -cookie_file={{path/to/file}} {{example.com}}##Open a link, using a specific file to read and write cookies
lynx -use_mouse {{example.com}}##Turn on mouse support, if available
lynx {{example.com}}##Visit a website
lz4 -9 {{file}}##Compress a file using the best compression
lz4 -d {{dir.tar.lz4}} | tar -xv##Decompress and unpack a directory and its contents
lz4 -d {{file.lz4}}##Decompress a file
lz4 -dc {{file.lz4}}##Decompress a file and write to stdout
lz4 {{file}}##Compress a file
lzop -d {{file}}.lzo##Decompress a file
lzop -{{level}} {{file}}##Compress a file, while specifying the compression level. 0 = Worst, 9 = Best (Default level is 3)
lzop {{file}}##Compress a file into a new file with the `.lzo` suffix
m##Sort by memory usage
m4 -D{{macro_name}}={{macro_value}} {{path/to/file}}##Define a macro before processing files
m4 {{path/to/file}}##Process macros in a file
maestral filestatus {{path/to/file_or_directory}}##Print sync status of a specific file or folder
maestral gui##Start the GUI
maestral pause##Pause syncing
maestral resume##Resume syncing
maestral status##Print current status of Maestral
magento list##List all available commands
magento maintenance:disable##Disable maintenance mode
magento maintenance:enable##Enable maintenance mode
magento module:disable {{module(s)}}##Disable one or more space-separated modules
magento module:enable {{module(s)}}##Enable one or more space-separated modules
magento setup:di:compile##Update code and dependency injection configuration
magento setup:static-content:deploy##Deploy static assets
magento setup:upgrade##Update the database after enabling modules
magick -size {{640x480}} pattern:checkerboard {{checkerboard.png}}##Create checkerboard pattern
magick convert -resize {{100x100}} {{image.jpg}} {{image.jpg}}##Resize an image, making a new copy
magick {{*.jpg}} +adjoin {{page-%d.pdf}}##Convert images to individual PDF pages
magick {{*.jpg}} {{images.gif}}##Create a GIF using images
magick {{image.png}} {{image.jpg}}##Convert file type
mail --subject="{{$HOSTNAME filename.txt}}" {{to_user@example.com}} < {{path/to/filename.txt}}##Send an email that contains file content
mail --subject="{{subject line}}" {{to_user@example.com}}##Send a typed email message. The command-line below continues after pressing Enter key. Input CC email-id (optional) press Enter key. Input message text (can be multiline). Press Ctrl-D key to complete the message text
mailx -a {{file}} -s "{{subject}}" {{to_addr}}##Send mail with an attachment
mailx -s "{{subject}}" -c {{cc_addr}} {{to_addr}}##Send mail to a recipient and CC to another address
mailx -s "{{subject}}" -r {{from_addr}} {{to_addr}}##Send mail specifying the sender address
mailx -s "{{subject}}" {{to_addr}} < {{content.txt}}##Send mail with content read from a file
mailx -s "{{subject}}" {{to_addr}}##Send mail (the content should be typed after the command, and ended with `Ctrl+D`)
make --always-make {{target}}##Force making of a target, even if source files are unchanged
make --directory {{directory}}##Execute make from another directory
make --environment-overrides {{target}}##Override variables defined in the Makefile by the environment
make --file {{file}}##Use a specific Makefile
make -j{{4}} {{target}}##Call a specific target, executing 4 jobs at a time in parallel
make {{target}}##Call a specific target
make##Call the first target specified in the Makefile (usually named "all")
makebuildserver --clean##Force creating a fresh virtual machine
makebuildserver##Create a new virtual machine or update an existing one (if available)
makensis -CMDHELP {{command}}##Print help for a specific command
makensis -WX {{path/to/file.nsi}}##Compile a NSIS script in strict mode (treat warnings as errors)
makensis {{path/to/file.nsi}}##Compile a NSIS script
makepasswd --chars {{10}}##Generate a 10 characters long password
makepasswd --minchars {{5}} --maxchars {{10}}##Generate a 5 to 10 characters long password
makepasswd --string {{bar}}##Generate a password containing only the characters "b", "a" or "r"
makepasswd##Generate a random password (8 to 10 characters long, containing letters and numbers)
man --path##Display the path searched for manpages
man -k "{{search_string}}"##Search for manpages containing a search string
man -w {{command}}##Display the location of a manpage rather than the manpage itself
man [##List all possible conditions (`test` is an alias to `[`; both are commonly used with `if`)
man {{7}} {{command}}##Display the man page for a command from section 7
man {{command}} --locale={{locale}}##Display the man page using a specific locale
man {{command}}##Display the man page for a command
masscan {{0.0.0.0/0}} --ports {{0-65535}} -output-format {{binary|grepable|json|list|xml}} --output-filename {{path/to/file}}##Scan the Internet for a specific port range and export to a file
masscan {{0.0.0.0/0}} --ports {{443}} --rate {{10000000}}##Scan the Internet for port 443
masscan {{10.0.0.0/16}} --top-ports {{100}} --excludefile {{path/to/file}}##Scan a class B subnet avoiding ranges from a specific exclude file
masscan {{10.0.0.0/16}} --top-ports {{100}} --rate {{100000}}##Scan a class B subnet for the top 100 ports at 100,000 packets per second
masscan {{ip_address|network_prefix}} --ports {{80}}##Scan an IP or network subnet for port 80
mat2 --lightweight {{path/to/file}}##Partially remove metadata from a file
mat2 --list##List supported file formats
mat2 --show {{path/to/file}}##Show metadata in a file without removing it
mat2 --verbose {{path/to/file}}##Remove metadata from a file and print detailed output to the console
mat2 {{path/to/file}}##Remove metadata from a file
mate-dictionary --match '{{word}}'##Show similar words for a specific one in a new window
mate-dictionary --no-window --look-up '{{word}}'##Print a specific word definition
matlab -nosplash##Run without splash screen during startup
matlab -r "run({{path/to/script.m}})"##Run a MATLAB script
matlab -r "{{matlab_statement}}"##Execute a MATLAB statement
maza status##Show the status of Maza
maza update##Update the Maza database
mc -b##Start `mc` in black and white
mc##Start `mc`
mcs -out:{{path/to/file.exe}} {{path/to/input_file1.cs path/to/input_file2.cs ...}}##Specify the output program name
mcs -target:{{exe|winexe|library|module}} {{path/to/input_file1.cs path/to/input_file2.cs ...}}##Specify the output program type
mcs {{path/to/input_file1.cs path/to/input_file2.cs ...}}##Compile the specified files
md5sum --check --quiet {{path/to/file.md5}}##Only show a message for missing files or when verification fails
md5sum --check {{path/to/file.md5}}##Read a file of MD5SUMs and verify all files have matching checksums
md5sum --ignore-missing --check --quiet {{path/to/file.md5}}##Only show a message for files for which verification fails, ignoring missing files
md5sum {{path/to/file1}} {{path/to/filen2}}##Calculate MD5 checksums for multiple files
md5sum {{path/to/file}}##Calculate the MD5 checksum for a file
mdelete {{*.txt}}##Delete multiple files on the remote server
mdp --invert {{presentation.md}}##Invert font colors to use in terminals with light background
mdp --nofade {{presentation.md}}##Disable fading transitions
mdp --notrans {{presentation.md}}##Disable transparency in transparent terminals
mdp {{presentation.md}}##Launch a presentation in the terminal from a Markdown file
mediainfo --Info-Parameters##Display the list of metadata attributes that can be extracted
mediainfo --Logfile={{out.txt}} {{file}}##Store the output to a given file along with displaying in the console
mediainfo {{file}}##Display metadata for a given file in the console
meld --diff {{path/to/file_1}} {{path/to/file_2}} --diff {{path/to/file_3}} {{path/to/file_4}}##Compare multiple sets of files
meld --newtab {{path/to/file_1}} {{path/to/file_2}}##Open a comparison as a new tab in a pre-existing meld instance
meld {{path/to/directory_1}} {{path/to/directory_2}}##Compare 2 directories
meld {{path/to/file_1}} {{path/to/file_2}} {{path/to/file_3}}##Compare 3 files
meld {{path/to/file_1}} {{path/to/file_2}}##Compare 2 files
meld##Start meld
mesg n##Disable receiving messages from the write command
mesg y##Enable receiving messages from the write command
mesg##Check terminal's openness to write messages
meshlabserver -d {{filename}}##Dump a list of all the available processing filters into a file
meshlabserver -i {{input.ply}} -o {{output.ply}} -s {{filter_script.mlx}}##Process a 3D file using a filter script created in the MeshLab GUI (Filters > Show current filter script > Save Script)
meshlabserver -i {{input.stl}} -o {{output.obj}}##Convert an STL file to an OBJ file
meshlabserver -i {{input.wrl}} -o {{output.off}} -om vn fn##Convert a WRL file to a OFF file, including the vertex and face normals in the output mesh
meshlabserver -i {{input.x3d}} -o {{output.x3d}} -s {{filter_script.mlx}} -l {{logfile}}##Process a 3D file using a filter script, writing the output of the filters into a log file
meson --help##Show the help
meson --version##Show version info
meson compile -C {{path/to/build_dir}}##Build the project
meson init --language={{c}} --name={{myproject}} --version={{0.1}}##Generate a C project with a given name and version
meson setup {{build_dir}}##Configure the `builddir` with default values
meson test##Run all tests in the project
meteor add {{package_name}}##Add a package to the project
meteor build {{path/to/directory}}##Create a production build of the project as a tarball under the given directory
meteor create {{path/to/directory}}##Create a project under the given directory
meteor list##Display the list of packages the project is currently using
meteor remove {{package_name}}##Remove a package from the project
meteor##Run a meteor project from its root directory in development mode
mget {{*.png}}##Download multiple files (glob expression)
mh_copyright --primary-entity="{{entity}}" --update-year {{path/to/file_or_directory1.m path/to/file_or_director2.m ...}}##Update the year (range) to include the current year for the specified files
mh_copyright --primary-entity="{{entity}}" --update-year##Update the year (range) to include the current year for all files
mh_lint --octave {{path/to/file.m}}##Check an Octave file
mh_lint {{path/to/directory}}##Check a specific directory recursively
mh_lint {{path/to/file.m}}##Check a MATLAB file
mh_lint##Check the current directory
mh_metric --octave {{path/to/file1.m path/to/file2.m ...}}##Print the code metrics for the specified Octave files
mh_metric --{{html|json}} {{path/to/output_file}}##Print the code metrics report in HTML or JSON format
mh_metric {{path/to/directory}}##Print the code metrics for the specified directory recursively
mh_metric {{path/to/file1.m path/to/file2.m ...}}##Print the code metrics for the specified files
mh_metric##Print the code metrics for the current directory
micro {{file}}##Open a file
middleman deploy##Deploy the Middleman project in the current directory
middleman init "{{project_name}}"##Create a new Middleman project
middleman server -p "{{port}}"##Start local server for current project on a specified port
middleman server##Start local server for current project on port 4567
minetest --logfile {{path/to/file}}##Write logs to a specific file
minetest --quiet##Only write errors to the console
minetest --server --world {{name}}##Start Minetest in server mode by hosting a specific world
minetest##Start Minetest in client mode
minetestserver --gameid list##List the available game IDs
minetestserver --gameid {{game_id}}##Specify a game to use
minetestserver --migrate {{sqlite3|leveldb|redis}}##Migrate to a different data backend
minetestserver --port {{34567}}##Listen on a specific port
minetestserver --terminal##Start an interactive terminal after starting the server
minetestserver --world list##List available worlds
minetestserver --world {{world_name}}##Specify the world name to load
minetestserver##Start the server
mingle -?##Display help for `mingle`
mingle {{path/to/layout1.gv}} {{path/to/layout2.gv ...}} > {{path/to/output.gv}}##Bundle the edges of one or more graph layouts (that already have layout information)
minifab approve,commit,initialize,discover##Initialize the chaincode after installation/upgrade
minifab apprun -l {{app_programming_langauge}}##Quickly run an application
minifab blockquery {{block_number}}##Make a query on the ledger
minifab down##Bring down the Hyperledger Fabric network
minifab install -n {{chaincode_name}} -v {{chaincode_version}}##Install a specific chaincode version onto a channel
minifab install -n {{chaincode_name}}##Install chaincode onto a specified channel
minifab invoke -n {{chaincode_name}} -p '"{{method_name}}", "{{arg0}}", "{{arg1}}", ...'##Invoke a chaincode method with the specified arguments
minifab up -i {{minifab_version}}##Bring up the default Hyperledger Fabric network
minikube dashboard##Open the Kubernetes dashboard in a browser
minikube delete##Delete the cluster
minikube ip##Get the IP address of the cluster
minikube service {{my_service}} --url##Access a service named my_service exposed via a node port and get the URL
minikube start##Start the cluster
minikube stop##Stop the running cluster
miniserve --auth {{username}}:{{password}} {{path/to/directory}}##Serve a directory using HTTP basic authentication
miniserve {{path/to/directory}}##Serve a directory
miniserve {{path/to/file}}##Serve a single file
minisign -G##Generate a new keypair at the default location
minisign -Sm {{path/to/file}} -c "{{Untrusted comment}}" -t "{{Trusted comment}}"##Sign a file, adding a trusted (signed) and an untrusted (unsigned) comment in the signature
minisign -Sm {{path/to/file}}##Sign a file
minisign -Vm {{path/to/file}} -P "{{public_key_base64}}"##Verify a file and the trusted comments in its signature, specifying a public key as a Base64 encoded literal
minisign -Vm {{path/to/file}} -p {{path/to/publickey.pub}}##Verify a file and the trusted comments in its signature using the specified public key file
mitmdump -nc {{filename}}##Replay a saved traffic file
mitmdump -nr {{input_filename}} -w {{output_filename}} "{{~m post}}"##Filter a saved traffic file to just POST requests
mitmdump -w {{filename}}##Start a proxy and save all output to a file
mitmproxy -b {{ip_address}} -p {{port}}##Start mitmproxy bound to custom address and port
mitmproxy##Start mitmproxy with default settings
mix compile##Compile project
mix help##List all mix commands
mix new {{project_name}}##Create a new project
mix run {{my_script.exs}}##Execute a particular file
mix test##Run project tests
mixxx --controllerDebug --resourcePath {{path/to/mapping-directory}}##Debug a custom controller mapping
mixxx --debugAssertBreak --developer --loglevel trace##Debug a malfunction
mixxx --developer --safeMode##Start in safe developer mode to debug a crash
mixxx --fullScreen##Start the Mixxx GUI in fullscreen
mixxx --help##Show command-line help
mixxx --resourcePath {{mixxx/res/controllers}} --settingsPath {{path/to/settings-file}}##Start Mixxx using the specified settings file
mk -a {{target}}##Assume all targets to be out of date. Thus, update `target` and all of its dependencies
mk -k##Keep going as far as possible on error
mk -w{{target}} {{target}}##Force mking of a target, even if source files are unchanged
mk {{target}}##Call a specific target
mk##Call the first target specified in the Mkfile (usually named "all")
mkcert "{{*.example.it}}"##Generate wildcard certificate and private key for a given domain and its subdomains
mkcert -install##Install the local CA in the system trust store
mkcert -uninstall##Uninstall the local CA
mkcert {{example.org}} {{myapp.dev}} {{127.0.0.1}}##Generate certificate and private key for multiple domains
mkcert {{example.org}}##Generate certificate and private key for a given domain
mkdir -p {{path/to/directory}}##Create directories recursively (useful for creating nested dirs)
mkdir {{directory_1 directory_2 ...}}##Create multiple directories in the current directory
mkdir {{directory}}##Create a directory in current directory or given path
mkfifo {{path/to/pipe}}##Create a named pipe at a given path
mktemp --suffix "{{.ext}}"##Create an empty temporary file with a given suffix and print the absolute path to file
mktemp -d##Create a temporary directory and print the absolute path to it
mktemp##Create an empty temporary file and print the absolute path to it
mktorrent -a {{tracker_announce_url,tracker_announce_url_2}} -l {{21}} -o {{path/to/example.torrent}} {{path/to/file_or_directory}}##Create a torrent with multiple trackers
mktorrent -a {{tracker_announce_url}} -l {{21}} -o {{path/to/example.torrent}} {{path/to/file_or_directory}}##Create a torrent with 2^21 KB as the piece size
mktorrent -a {{tracker_announce_url}} -w {{web_seed_url}} -l {{21}} -o {{path/to/example.torrent}} {{path/to/file_or_directory}}##Create a torrent with web seed URLs
mktorrent -c "{{comment}}" -a {{tracker_announce_url}} -l {{21}} -o {{path/to/example.torrent}} {{path/to/file_or_directory}}##Create a torrent with a comment
mktorrent -p -a {{tracker_announce_url}} -l {{21}} -o {{path/to/example.torrent}} {{path/to/file_or_directory}}##Create a private torrent with a 2^21 KB piece size
mkvextract tracks {{path/to/file.mkv}} {{1}}:{{path/to/output.webm}}##Extract the audio from track 1 of a specific file
mkvextract tracks {{path/to/file.mkv}} {{3}}:{{path/to/subs.srt}}##Extract the subtitle from track 3 of a specific file
mkvirtualenv --python {{/usr/local/bin/python3.8}} {{virtualenv_name}}##Create a `virtualenv` for a specific Python version
mkvirtualenv {{virtualenv_name}}##Create a new Python `virtualenv` in `$WORKON_HOME`
mkvmerge --identify {{path/to/file.mkv}}##Display information about a Matroska file
mlr --icsv --ojson put '${{newField1}} = ${{oldFieldA}}/${{oldFieldB}}' {{example.csv}}##Convert CSV to JSON, performing calculations and display those calculations
mlr --icsv --opprint cat {{example.csv}}##Pretty-print a CSV file in a tabular format
mlr --icsv --opprint sort -f {{field}} {{example.csv}}##Sort alphabetically on a field
mlr --icsv --opprint sort -nr {{field}} {{example.csv}}##Sort in descending numerical order on a field
mlr --prepipe 'gunzip' --csv filter -S '${{fieldName}} =~ "{{regular_expression}}"' {{example.csv.gz}}##Filter lines of a compressed CSV file treating numbers as strings
mm2gv -?##Display help
mm2gv -o {{output.gv}} {{input.mm}}##Convert a graph from `mm` to `gv` format
mmdc --input {{input.mmd}} --output {{output.svg}} --backgroundColor {{color}}##Specify the background color of the chart (e.g. `lime`, `"#D8064F"`, or `transparent`)
mmdc --input {{input.mmd}} --output {{output.svg}} --theme {{forest|dark|neutral|default}}##Specify the theme of the chart
mmdc --input {{input.mmd}} --output {{output.svg}}##Convert a file to the specified format (automatically determined from the file extension)
mmls -B -i {{path/to/image_file}}##Display the partition table with an additional column for the partition size
mmls -i ewf {{image.e01}} {{image.e02}}##Display the partition table in a split EWF image
mmls -t {{nested_table_type}} -o {{offset}} {{path/to/image_file}}##Display nested partition tables
mmls {{path/to/image_file}}##Display the partition table stored in an image file
mmv "*{{.old_extension}}" "#1{{.new_extension}}"##Rename all files with a certain extension to a different extension
mmv "{{[0-1][0-9]-[0-3][0-9]-[0-9][0-9][0-9][0-9].txt}}" "{{#3#4-#1#2-#5#6#7#8.txt}}"##Convert dates in filenames from "M-D-Y" format to "D-M-Y" format
mmv -a "{{*.txt}}" "{{all.txt}}"##Append all `.txt` files into one file
mmv -c "{{report*part*.txt}}" "{{./french/rapport#1partie#2.txt}}"##Copy `report6part4.txt` to `./french/rapport6partie4.txt` along with all similarly named files
mocha --grep {{regular_expression}}##Run tests that match a specific grep pattern
mocha --reporter {{reporter}}##Run tests with a specific reporter
mocha --watch##Run tests on changes to JavaScript files in the current directory and once initially
mocha {{directory/with/tests}}##Run tests contained at a specific location
mocha##Run tests with default configuration or as configured in `mocha.opts`
moe --ignore-case {{path/to/file}}##Edit a file ignoring case in searches
moe --no-backup {{path/to/file}}##Edit a file without creating backups
moe --read-only {{path/to/file}}##Open a file as read-only
moe {{path/to/file}}##Open moe and create a backup file (file~) when saving edits
mogrify -format {{jpg}} {{*.png}}##Convert all PNGs in the directory to JPEG
mogrify -modulate {{100,50}} {{*}}##Halve the saturation of all image files in the current directory
mogrify -modulate {{200}} {{*}}##Double the brightness of all image files in the current directory
mogrify -resize {{50%}} {{*.jpg}}##Resize all JPEG images in the directory to 50% of their initial size
mogrify -resize {{800x600}} {{DSC*}}##Resize all images starting with "DSC" to 800x600
molecule converge##Configure the instance
molecule create##Start the instance
molecule init role --role-name {{role_name}}##Create a new Ansible role
molecule login##Log in into the instance
molecule test##Run tests
mongo --eval '{{JSON.stringify(db.foo.findOne())}}' {{database}}##Evaluate a JavaScript expression on the database
mongo --host {{host}} --port {{port}} {{database}}##Connect to a database running on a given host on a given port
mongo --username {{username}} {{database}} --password##Connect to a database with a given username; user will be prompted for password
mongo {{database}}##Connect to a database
mongod --config {{filename}}##Specify a config file
mongod --port {{port}}##Specify the port to listen on
mongod --profile {{0|1|2}}##Specify database profiling level. 0 is off, 1 is only slow operations, 2 is all
mongodump --collection {{collection_name}} --db {{database_name}}##Create a dump of a given collection within a given database
mongodump --db {{database_name}}##Create a dump of a given database
mongodump --host {{host}} --port {{port}}##Connect to a given host running on a given port, and create a dump
mongodump --out {{path/to/directory}}##Specify an output location for the dump
mongodump --uri {{connection_string}}##Create a dump from a specific instance; host, user, password and database will be defined in the connection string
mongodump --username {{username}} {{database}} --password##Create a dump of a given database with a given username; user will be prompted for password
mongodump##Create a dump of all databases (this will place the files inside a directory called "dump")
mongoexport --collection={{collection_name}} --jsonArray##Export documents as a JSON array instead of one object per line
mongoexport --collection={{collection_name}} --type={{csv}} --fields="{{field1,field2,...}}" --out={{path/to/file.csv}}##Export documents to a CSV file
mongoexport --collection={{collection_name}} --type={{csv}} --fields="{{field1,field2,...}}" --queryFile={{path/to/file}} --noHeaderLine --out={{path/to/file.csv}}##Export documents that match the query in the specified file to a CSV file, omitting the list of field names on the first line
mongoexport --db={{database_name}} --collection={{collection_name}} --query="{{query_object}}" --out={{path/to/file.json}}##Export the documents in the specified collection that match a query to a JSON file
mongoexport --help##Display help
mongoexport --uri={{connection_string}} --collection={{collection_name}}##Export a collection to stdout, formatted as JSON
mongoexport --uri={{mongodb_uri}} --collection={{collection_name}} --pretty##Export documents to stdout, formatted as human-readable JSON
mongoimport --file={{path/to/file.json}} --mode={{delete|merge|upsert}} --upsertFields="{{field1,field2,...}}"##Import a JSON file using a specific mode and a query to match existing documents
mongoimport --file={{path/to/file.json}} --uri={{mongodb_uri}} --collection={{collection_name}}##Import a JSON file into a specific collection
mongoimport --help##Display help
mongoimport --jsonArray --file={{path/to/file.json}}##Import a JSON array, using each element as a separate document
mongoimport --type={{csv}} --file={{path/to/file.csv}} --db={{database_name}} --collection={{collection_name}}##Import a CSV file, using the first line of the file to determine field names
mongoimport --type={{csv}} --file={{path/to/file.csv}} --fieldFile={{path/to/field_file.csv}} --ignoreBlanks##Import a CSV file, reading field names from a separate CSV file and ignoring fields with empty values
mongorestore --db {{database_name}} {{path/to/directory}}##Import a BSON data dump from a directory to a MongoDB database
mongorestore --db {{database_name}} {{path/to/file}}##Import a collection from a BSON file to a MongoDB database
mongorestore --host {{database_host:port}} --db {{database_name}} --username {{username}} {{path/to/directory}} --password##Import a BSON data dump from a directory to a given database in a MongoDB server host, running at a given port, with user authentication (user will be prompted for password)
mongorestore --host {{database_host:port}} --db {{database_name}} --username {{username}} {{path/to/file}} --password##Import a collection from a BSON file to a given database in a MongoDB server host, running at a given port, with user authentication (user will be prompted for password)
monodevelop --new-window##Force opening a new window instead of switching to an existing one
monodevelop --no-redirect##Disable redirection of stdout and stderr to a log file
monodevelop --perf-log##Enable performance monitoring
monodevelop {{path/to/file}}##Open a specific file
monodevelop {{path/to/file}};{{line_number}};{{column_number}}##Open a specific file with the caret at a specific position
monodevelop##Start MonoDevelop
monodis --assembly {{path/to/assembly.dll}}##Show information about an assembly
monodis --assemblyref {{path/to/assembly.exe}}##List the references of an assembly
monodis --manifest {{path/to/assembly.dll}}##Show a list of resources embedded within an assembly
monodis --method {{path/to/assembly.exe}}##List all the methods in an assembly
monodis --mresources {{path/to/assembly.dll}}##Extract all the embedded resources to the current directory
monodis --output={{path/to/output.il}} {{path/to/assembly.exe}}##Save the output to a file
monodis {{path/to/assembly.exe}}##Disassemble an assembly to textual CIL
monop -r:{{path/to/assembly.dll}} --filter-obsolete {{Namespace.Path.To.Type}}##Hide obsolete members
monop -r:{{path/to/assembly.dll}} --only-declared {{Namespace.Path.To.Type}}##Only show members defined in the specified Type
monop -r:{{path/to/assembly.dll}} --private {{Namespace.Path.To.Type}}##Show private members
monop -r:{{path/to/assembly.dll}} --refs##List the other assemblies that a specified assembly references
monop -r:{{path/to/assembly.dll}} {{Namespace.Path.To.Type}}##Show the structure of a Type in a specific assembly
monop -r:{{path/to/assembly.exe}}##List the types in an assembly
monop {{System.String}}##Show the structure of a Type built-in of the .NET Framework
montage {{image1.png}} {{image2.jpg}} {{imageN.png}} -geometry +0+0 -resize 640x480^ -gravity center -crop 640x480+0+0 montage.jpg##Resize and crop images to fill their grid cells before tiling
montage {{image1.png}} {{image2.jpg}} {{imageN.png}} -geometry +0+0 -tile 2x3 montage_%d.jpg##Limit the number of rows and columns in the grid, causing input images to overflow into multiple output montages
montage {{image1.png}} {{image2.jpg}} {{imageN.png}} -geometry +0+0 montage.jpg##Tile images into a grid, automatically calculating the grid cell size from the largest image
montage {{image1.png}} {{image2.jpg}} {{imageN.png}} -geometry 640x480+0+0 montage.jpg##Set the grid cell size and resize images to fit it before tiling
montage {{image1.png}} {{image2.jpg}} {{imageN.png}} montage.jpg##Tile images into a grid, automatically resizing images larger than the grid cell size
more +{{line_number}} {{path/to/file}}##Open a file displaying from a specific line
more --help##Display help
more {{path/to/file}}##Open a file
moro bye {{17:30}}##Specify a custom time for the end of the working day
moro hi {{09:30}}##Specify a custom time for the start of the working day
moro note {{3 hours on project Foo}}##Add a note on the current working day
moro report --all##Show a report of time logs and notes for all working days on record
moro report##Show a report of time logs and notes for the current working day
moro##Invoke `moro` without parameters a second time, to set the current time at the end of the working day
moro##Invoke `moro` without parameters, to set the current time as the start of the working day
mosh --server={{path/to/bin/}}mosh-server {{remote_host}}##Usage when `mosh-server` binary is outside standard path
mosh --ssh="ssh -i {{path/to/key_file}}" {{username}}@{{remote_host}}##Connect to a remote server with a specific identity (private key)
mosh --ssh="ssh -p {{2222}}" {{username}}@{{remote_host}}##Connect to a remote server using a specific port
mosh -p {{124}} {{username}}@{{remote_host}}##Select Mosh UDP port (useful when `{{remote_host}}` is behind a NAT)
mosh {{remote_host}} -- {{command -with -flags}}##Run a command on a remote server
mosh {{username}}@{{remote_host}}##Connect to a remote server
mosquitto --config-file {{path/to/file.conf}}##Specify a configuration file to use
mosquitto --daemon##Daemonize by forking into the background
mosquitto --port {{8883}}##Listen on a specific port
mosquitto##Start mosquitto
mosquitto_passwd -D {{path/to/password_file}} {{username}}##Delete the specified username instead
mosquitto_passwd -U {{path/to/password_file}}##Upgrade an old plain-text password file to a hashed password file
mosquitto_passwd -c {{path/to/password_file}} {{username}}##Create the password file if it doesn't already exist
mosquitto_passwd {{path/to/password_file}} {{username}}##Add a new user to a password file (will prompt to enter the password)
mosquitto_pub -h {{192.168.1.1}} -p {{1885}} -t {{sensors/temperature}} -m "{{1266193804 32}}"##Publish timestamp and temperature data on the topic `sensors/temperature` to a remote host on a non-standard port
mosquitto_pub -h {{192.168.1.1}} -t {{sensors/temperature}} -m {{32}} -q {{1}}##Publish a temperature value of 32 on the topic `sensors/temperature` to 192.168.1.1 (defaults to `localhost`) with Quality of Service (`QoS`) set to 1
mosquitto_pub -r -h "{{iot.eclipse.org}}" -t {{switches/kitchen_lights/status}} -m "{{on}}"##Publish light switch status and retain the message on the topic `switches/kitchen_lights/status` to a remote host because there may be a long period of time between light switch events
mosquitto_pub -t {{sensors/temperature}} -f {{data.txt}}##Send the contents of a file (`data.txt`) as a message and publish it to `sensors/temperature` topic
mosquitto_pub -t {{sensors/temperature}} -s < {{data.txt}}##Send the contents of a file (`data.txt`), by reading from stdin and send the entire input as a message and publish it to `sensors/temperature` topic
mosquitto_sub -t {{sensors/machines/+/temperature/+}}##Subscribe to multiple topics matching a given pattern. (+ takes any metric name)
mosquitto_sub -t {{sensors/temperature}} -q {{1}}##Subscribe to the topic `sensors/temperature` information with Quality of Service (`QoS`) set to 1. (The default hostname is `localhost` and port 1883)
mosquitto_sub -v -h "iot.eclipse.org" -p 1885 -t {{\$SYS/#}}##Subscribe to all broker status messages publishing on `iot.eclipse.org` port 1885 and print published messages verbosely
most {{file}} +/{{string}}##Open a file at the first occurrence of "string"
most {{path/to/file1}} {{path/to/file2}}##Open several files
most {{path/to/file}}##Open a file
mount --bind {{path/to/old_dir}} {{path/to/new_dir}}##Mount a directory to another directory
mount -a##Mount all the filesystem defined in `/etc/fstab`
mount -t {{filesystem_type}} {{path/to/device_file}} {{path/to/target_directory}}##Mount a device to a directory
mount -t {{iso9660}} -o ro {{/dev/cdrom}} {{/cdrom}}##Mount a CD-ROM device (with the filetype ISO9660) to `/cdrom` (readonly)
mount {{/my_drive}}##Mount a specific filesystem described in `/etc/fstab` (e.g. `/dev/sda1 /my_drive ext2 defaults 0 2`)
mount##Show all mounted filesystems
mozillavpn activate##Connect to Mozilla VPN
mozillavpn deactivate##Disconnect from Mozilla VPN
mozillavpn login##Log in with an interactive prompt
mozillavpn logout##Log out
mozillavpn select {{server_name}}##Select a specific server
mozillavpn servers##List available servers
mozillavpn status##Display the connection status
mozillavpn {{subcommand}} --help##Display help for a subcommand
mp3info -G##Print a list of valid genres and their numeric codes
mp3info -a "{{artist_name}}" -t "{{song_title}}" -l "{{album_title}}" -y {{year}} -c "{{comment_text}}" {{path/to/file.mp3}}##Set values for ID3v1 tags in a specific MP3 file
mp3info -g {{genre_number}} {{path/to/file.mp3}}##Set the music genre for a specific MP3 file
mp3info -i {{path/to/file.mp3}}##Edit ID3v1 tags interactively
mp3info -n {{track_number}} {{path/to/file.mp3}}##Set the number of the track in the album for a specific MP3 file
mp3info {{path/to/file.mp3}}##Show all ID3v1 tags of a specific MP3 file
mp4box -add {{input1.mp4}}#audio -add {{input2.mp4}}#video {{output.mp4}}##Combine audio from one file and video from another
mp4box -add {{input_subs.srt}}:lang=eng -add {{input.mp4}} {{output.mp4}}##Add an SRT subtitle file into an MP4 file
mp4box -info {{filename}}##Display information about an existing MP4 file
mpc [+-]{{seconds}}##Forward or rewind the currently playing song
mpc next##Play next song
mpc prev##Play previous song
mpc status##Show information about the currently playing song
mpc stop##Stop playing
mpc toggle##Toggle play/pause
mpd --kill##Kill the currently running MPD session
mpd --no-config##Start MPD but don't read from the configuration file
mpd --no-daemon##Start MPD and don't detach it from the console
mpd##Start MPD
mpg321 -B -Z -K .##Play all files in the current directory and subdirectories, randomly (until interrupted), with Basic Keys enabled
mpg321 -B {{path/to/directory}}##Play a directory recursively
mpg321 -K {{path/to/file_a|URL}} {{path/to/file_b|URL}} {{...}}##Enable Basic Keys ( `*` or `/` Increase or decrease volume, `n` Skip song, `m` Mute/unmute.) while playing
mpg321 -Z {{path/to/file_a|URL}} {{path/to/file_b|URL}} {{...}}##Play files randomly until interrupted
mpg321 -l {{N}} {{path/to/file_a|URL}} {{path/to/file_b|URL}} {{...}}##Play an audio source exactly N times (N=0 means forever)
mpg321 -z {{path/to/file_a|URL}} {{path/to/file_b|URL}} {{...}}##Shuffle the files before playing them once
mplayer -loop {{0}} {{path/to/file}}##Play a specific file repeatedly
mplayer {{path/to/file1 path/to/file2 ...}}##Play multiple files
mplayer {{path/to/file|url}}##Play the specified file or URL
mput {{*.zip}}##Upload multiple files (glob expression)
mpv '{{https://www.youtube.com/watch?v=dQw4w9WgXcQ}}'##Play a video or audio file from a URL
mpv --profile {{profile_name}} {{file}}##Play a file using a profile defined in the `mpv.conf` file
mpv --speed {{speed}} {{file}}##Play a file at a specified speed (0.01 to 100, default 1)
mpv /dev/{{video0}}##Display the output of webcam or other video input device
mpv {{file}}##Play a video or audio file
mr -j{{5}} update##Update repositories in 5 concurrent jobs
mr checkout##Checkout all repositories to the latest version
mr register##Register a repository
mr status##Print the status of all repositories
msbuild /help##Display detailed help information
msbuild {{path/to/project_file}} /detailedsummary##Display detailed information at the end of the log about how the project was configured
msbuild {{path/to/project_file}} /property:{{name=value}}##Set one or more semicolon-separated properties
msbuild {{path/to/project_file}} /target:{{targets}}##Set one or more semicolon-separated targets to build
msbuild {{path/to/project_file}} /toolsversion:{{version}}##Set the build tools version to use
msbuild {{path/to/project_file}}##Build a specific project file
msbuild##Build the first project file in the current directory
msfvenom -l formats##List formats
msfvenom -l payloads##List payloads
msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST={{local_ip}} LPORT={{local_port}} -f elf > {{path/to/binary}}##Create an ELF binary with a reverse TCP handler
msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST={{local_ip}} LPORT={{local_port}} -f exe > {{path/to/binary.exe}}##Create an EXE binary with a reverse TCP handler
msfvenom -p {{payload}} --list-options##Show payload options
mtr --aslookup {{hostname}}##Display the Autonomous System Number (ASN) for each hop
mtr -4 {{host}}##Force IP IPv4 or IPV6
mtr -i {{seconds}} {{host}}##Wait for a given time (in seconds) before sending another packet to the same hop
mtr -n {{host}}##Disable IP address and host name mapping
mtr -w {{host}}##Generate output after pinging each hop 10 times
mtr {{host}}##Traceroute to a host and continuously ping all intermediary hops
mu cfind {{Bob}}##List contacts with `Bob` in either name or email address
mu find 'mime:{{image/*}} size:{{2k..2m}} date:{{20210101..20211231}} from:{{sam}}##Find messages from Sam with attached images, between 2 KiB and 2 MiB, written in 2021
mu find 'subject:{{soc}}*' flag:{{unread}} maildir:'/{{Sent Items}}'##Find unread messages about words starting with `soc` (the `*` only works at the end of the search term) in the Sent Items folder
mu find to:{{alice}} subject:{{jellyfish}} {{apples}} OR {{oranges}}##Find messages to Alice with subject `jellyfish` containing the words `apples` or `oranges`
mu find {{keyword}}##Find messages using a specific keyword (in message body, subject, sender, ...)
mu index##Index new emails
mu init --maildir={{path/to/directory}} --my-address={{name@example.com}}##Initialize the email database, optionally specifying the Maildir directory and email addresses
mullvad account set {{account_number}}##Link your mullvad account with the specified account number
mullvad connect##Establish the VPN tunnel
mullvad lan set allow##Enable LAN access while VPN is on
mullvad status##Check status of VPN tunnel
multipass delete {{instance_name}}##Delete an instance by name
multipass find##List the aliases that can be used to launch an instance
multipass info {{instance_name}}##Show the properties of an instance
multipass launch -n {{instance_name}} --cloud-init {{configuration_file}}##Launch a new instance, set its name and use a cloud-init configuration file
multipass list##List all the created instances and some of their properties
multipass mount {{path/to/local/directory}} {{instance_name}}:{{path/to/target/directory}}##Mount a directory into a specific instance
multipass shell {{instance_name}}##Open a shell prompt on a specific instance by name
multipass start {{instance_name}}##Start a specific instance by name
multitail -Q 1 '{{directory}}/*'##Tail all files in a directory in a single stream
multitail -Q 1 '{{pattern}}'##Tail all files matching a pattern in a single stream
multitail -Q {{pattern}}##Automatically add new files to a window
multitail -s 2 -sn 1,3 {{mergefile}} -I {{file1}} {{file2}} {{file3}} {{file4}}##Show 5 logfiles while merging 2 and put them in 2 columns with only one in the left column
mupdf -A {{0}}##Open a PDF without anti-aliasing (0 = off, 8 = best)
mupdf -C {{FF0000}}##Open a PDF tinted red #FF0000 (hexadecimal color syntax RRGGBB)
mupdf -I {{filename}}##Open a PDF with inverted color
mupdf -p {{password}} {{filename}}##Open a password secured PDF
mupdf -r {{72}} {{filename}}##Open a PDF with an initial zoom level, specified as DPI, of 72
mupdf {{filename}} {{3}}##Open a PDF on page 3
mupdf {{filename}}##Open a PDF on the first page
musescore --audio-driver {{jack|alsa|portaudio|pulse}}##Use a specific audio driver
musescore --bitrate {{bitrate}}##Set the MP3 output bitrate in kbit/s
musescore --debug##Start MuseScore in debug mode
musescore --diff {{path/to/file1}} {{path/to/file2}}##Print a diff between the given scores
musescore --experimental##Enable experimental features, such as layers
musescore --export-to {{output_file}} {{input_file}}##Export the given file to the specified output file. The file type depends on the given extension
musescore --midi-operations {{path/to/file}}##Specify a MIDI import operations file
mutagen project list##List running sessions for the current project
mutagen project start##Start a project
mutagen project terminate##Stop a project
mutagen sync create --name={{session_name}} {{/path/to/local/directory/}} docker://{{user}}@{{container_name}}{{/path/to/remote/directory/}}##Start a synchronization session between a local directory and a Docker container
mutagen sync create --name={{session_name}} {{/path/to/local/directory/}} {{user}}@{{host}}:{{/path/to/remote/directory/}}##Start a synchronization session between a local directory and a remote host
mutagen sync terminate {{session_name}}##Stop a running session
mutool convert -o {{image%d.png}} {{file.pdf}} {{1-10}}##Convert pages 1-10 into 10 PNGs
mutool draw -F {{txt}} {{file.pdf}} {{2,3,5}}##Convert pages 2, 3 and 5 of a PDF into text in the standard output
mutool extract {{input.pdf}}##Extract all images, fonts and resources embedded in a PDF out into the current directory
mutool info {{input.pdf}}##Query information about all content embedded in a PDF
mutool merge -o {{output.pdf}} {{input1.pdf}} {{input2.pdf}}##Concatenate two PDFs
mutool show {{input.pdf}} outline##Print the outline (table of contents) of a PDF
mutt -H {{file}} {{recipient@example.com}}##Specify a draft file containing the header and the body of the message, in RFC 5322 format
mutt -a {{file1}} {{file2}} -- {{recipient@example.com}}##Send an email with files attached
mutt -f {{mailbox}}##Open the specified mailbox
mutt -i {{file}} {{recipient@example.com}}##Specify a file to include as the message body
mutt -s {{subject}} -c {{cc@example.com}} {{recipient@example.com}}##Send an email and specify a subject and a cc recipient
mv -f {{source}} {{target}}##Do not prompt for confirmation before overwriting existing files
mv -i {{source}} {{target}}##Prompt for confirmation before overwriting existing files, regardless of file permissions
mv -n {{source}} {{target}}##Do not overwrite existing files at the target
mv -v {{source}} {{target}}##Move files in verbose mode, showing files after they are moved
mv {{source1}} {{source2}} {{source3}} {{target_directory}}##Move files into another directory, keeping the filenames
mv {{source}} {{target}}##Move a file to an arbitrary location
mvn clean -P{{profile}} package##Clean and then package the code with a given build profile
mvn clean package##Do a clean and then invoke the package phase
mvn clean##Delete build artifacts from the target directory
mvn compile##Compile a project
mvn exec:java -Dexec.mainClass="{{com.example.Main}}" -Dexec.args="{{arg1 arg2}}"##Run a class with a main method
mvn install##Install the built package in local maven repository. (This will invoke the compile and package commands too)
mvn package -DskipTests##Compile and package, skipping unit tests
mvn package##Compile and package the compiled code in its distributable format, such as a `jar`
mycli -h {{database_host}} -P {{port}} -u {{username}} {{database_name}}##Connect to a database on another host
mycli -u {{username}} {{database_name}}##Connect to a database (user will be prompted for a password)
mycli {{database_name}}##Connect to a local database on port 3306, using the current user's username
mysql --socket {{path/to/socket.sock}}##Connect to a database through a Unix socket
mysql --user {{user}} --password < {{path/to/backup.sql}}##Restore all databases from a backup (user will be prompted for a password)
mysql --user {{user}} --password {{database_name}} < {{path/to/backup.sql}}##Restore a database from a backup created with `mysqldump` (user will be prompted for a password)
mysql -e "source {{filename.sql}}" {{database_name}}##Execute SQL statements in a script file (batch file)
mysql -h {{database_host}} {{database_name}}##Connect to a database on another host
mysql -u {{user}} --password {{database_name}}##Connect to a database, user will be prompted for a password
mysql {{database_name}}##Connect to a database
mysqld --console##Start the server, printing error messages to the console
mysqld --defaults-file={{path/to/file}}##Start the server, reading arguments and values from a file
mysqld --log={{path/to/file.log}}##Start the server, saving logging output to a custom log file
mysqld --port={{port}}##Start the server and listen on a custom port
mysqld --print-defaults##Print the default arguments and their values and exit
mysqld --verbose --help##Show all help options and exit
mysqld##Start the MySQL database server
mysqldump --host={(ip_or_hostname)} --user {{user}} --password --all-databases > ({path/to/file.sql}}##Backup all databases from a remote host, redirecting the output to a file (user will be prompted for a password)
mysqldump --user {{user}} --password --all-databases > {{path/to/file.sql}}##Backup all databases redirecting the output to a file (user will be prompted for a password)
mysqldump --user {{user}} --password {{database_name}} --result-file={{path/to/file.sql}}##Create a backup (user will be prompted for a password)
mysqldump --user {{user}} --password {{database_name}} {{table_name}} > {{path/to/file.sql}}##Backup a specific table redirecting the output to a file (user will be prompted for a password)
mytop -u {{user}} --prompt##Connect with a specified username (the user will be prompted for a password)
mytop -u {{user}} -p {{password}} --noidle##Do not show any idle (sleeping) threads
mytop -u {{user}} -p {{password}}##Connect with a specified username and password
mytop##Start mytop
n bin {{version}}##Output binary path for a version
n file dir/##Create a new file and a new directory
n rm {{version}}##Remove a version
n use {{version}} {{file.js}}##Execute a file with a given version
n {{version}}##Install a given version of node. If the version is already installed, it will be activated
n##Display installed versions and interactively activate one of them
nano +{{line}},{{column}} {{path/to/file}}##Open a specific file, positioning the cursor at the specified line and column
nano --autoindent {{path/to/file}}##Open a specific file and indent new lines to the previous lines' indentation
nano --backup {{path/to/file}}##Open nano and create a backup file (`file~`) when saving edits
nano --softwrap {{path/to/file}}##Open a specific file and enable soft wrapping
nano {{path/to/file}}##Open a specific file
nano##Open a new file in nano
nasm -f {{format}} {{source.asm}} -o {{output_file}}##Assemble `source.asm` into a binary file `output_file`, in the specified format
nasm -hf##List valid output formats (along with basic nasm help)
nasm -i {{path/to/include_dir/}} {{source.asm}}##Add a directory (must be written with trailing slash) to the include file search path before assembling
nasm -l {{list_file}} {{source.asm}}##Assemble and generate an assembly listing file
nasm {{source.asm}}##Assemble `source.asm` into a binary file `source`, in the (default) raw binary format
nativefier --icon {{path/to/icon.png}} {{url}}##Use a custom icon, should be a PNG
nativefier --name {{name}} {{url}}##Create a desktop app with a custom name
nativefier {{url}}##Make a desktop app for a website
nbtscan -e {{192.168.0.1/24}}##Display output in `/etc/hosts` format
nbtscan -f {{path/to/file.txt}}##Read IP addresses / networks to scan from a file
nbtscan -v {{192.168.0.1/24}}##Display verbose output
nbtscan {{192.168.0.1/24}}##Scan a network for NetBIOS names
nbtscan {{192.168.0.1}}##Scan a single IP address
nc -k -l {{port}}##Keep the server up after the client detaches
nc -l {{local_port}} | nc {{hostname}} {{remote_port}}##Act as proxy and forward data from a local TCP port to the given remote host
nc -l {{port}}##Listen on a specified port and print any data received
nc -q {{timeout}} {{ip_address}}##Keep the client up even after EOF
nc -v -z {{ip_address}} {{port}}##Scan the open ports of a specified host
nc -w {{timeout_in_seconds}} {{ipaddress}} {{port}}##Set a timeout
nc {{ip_address}} {{port}}##Connect to a certain port
ncc build --minify {{path/to/file.js}}##Bundle and minify a Node.js application
ncc build --source-map {{path/to/file.js}}##Bundle and minify a Node.js application and generate source maps
ncc build --watch {{path/to/file.js}}##Automatically recompile on changes to source files
ncc build {{path/to/file.js}}##Bundle a Node.js application
ncc clean cache##Clean the `ncc` cache
ncc run {{path/to/file.js}}##Bundle a Node.js application into a temporary directory and run it for testing
ncdu --color {{dark|off}}##Colorize output
ncdu --exclude '{{*.txt}}'##Exclude files that match a pattern, argument can be given multiple times to add more patterns
ncdu -o {{path/to/file}}##Save results to a file
ncdu {{path/to/directory}}##Analyze a given directory
ncdu##Analyze the current working directory
ncmpcpp --bindings {{file}}##Use a different set of key bindings from a file
ncmpcpp --config {{file}}##Use a specified configuration file
ncmpcpp --current-song##Display metadata of the current song to console
ncmpcpp --host {{ip}} --port {{port}}##Connect to a music player daemon on a given host and port
neato -?##Display help
neato -T {{format}} -O {{path/to/input.gv}}##Render the output in `ps`, `pdf`, `svg`, `fig`, `png`, `gif`, `jpg`, `json`, or `dot` format
neato -T {{png}} -O {{path/to/input.gv}}##Render a `png` image with a filename based on the input filename and output format (uppercase -O)
neato -T {{svg}} -o {{path/to/image.svg}} {{path/to/input.gv}}##Render a `svg` image with the specified output filename (lowercase -o)
ned '{{([a-z]+) dog}}' --case-replacements --replace '{{\U$1\E! dog}}' --stdout {{.}}##Replace changing case
ned '{{^[sb]ad}}' --replace '{{happy}}' --stdout {{.}}##Preview results of a find and replace without updating the target files
ned '{{dog}}' --replace '{{cat}}' {{.}}##Simple replace
ned '{{the ([a-z]+) dog and the ([a-z]+) dog}}' --replace '{{the $2 dog and the $1 dog}}' {{.}}##Replace using numbered group references
ned --colors '{{^[dl]og}}' {{.}}##Search always showing colored output
ned --colors=never '{{^[dl]og}}' {{.}}##Search never showing colored output
ned --ignore-case --recursive '{{^[dl]og}}' {{.}}##Recursively search starting in the current directory, ignoring case
ned --recursive --exclude '{{*.htm}}' '{{^[dl]og}}' {{.}}##Search ignoring certain files
neofetch --cpu_brand {{on|off}}##Enable/Disable CPU brand in output
neofetch --os_arch {{on|off}}##Hide/Show OS architecture
neofetch --{{enable|disable}} {{infoname}}##Trigger an info line from appearing in the output, where 'infoname' is the function name in the config file, e.g. memory
neofetch##Return the default config, and create it if it's the first time the program runs
neomutt -H {{path/to/file}} {{recipient@example.com}}##Specify a draft file containing the header and the body of the message, in RFC 5322 format
neomutt -a {{path/to/file1 path/to/file2 ...}} -- {{recipient@example.com}}##Send an email with files attached
neomutt -f {{path/to/mailbox}}##Open the specified mailbox
neomutt -i {{path/to/file}} {{recipient@example.com}}##Specify a file to include as the message body
neomutt -s "{{subject}}" -c {{cc@example.com}} {{recipient@example.com}}##Start writing an email and specify a subject and a `cc` recipient
netlify deploy##Deploy the contents of a directory to Netlify
netlify dev##Start a local dev server
netlify init##Configure continuous deployment for a new or an existing site
netlify login##Log in to the Netlify account
netstat --all##List all ports
netstat --continuous##List information continuously
netstat --listening --program --numeric --tcp --udp --extend##List listening TCP and UDP ports (+ user and process if you're root)
netstat --listening##List all listening ports
netstat --program##Display PID and program names
netstat --route --numeric##List routes and do not resolve IP addresses to hostnames
netstat --tcp##List listening TCP ports
newman run {{https://www.getpostman.com/collections/631643-f695cab7-6878-eb55-7943-ad88e1ccfd65-JsLv}}##Run a collection (from a URL)
newman run {{path/to/collection.json}}##Run a collection (from a file)
newsboat -i {{my-feeds.xml}}##First import feed URLs from an OPML file
newsboat -r##Start newsboat and refresh all feeds on startup
newsboat -x {{reload print-unread ...}}##Execute a space-separated list of commands in non-interactive mode
next build##Build the current application optimized for production
next dev --port {{port}}##Start the current application and listen on a specific port
next dev##Start the current application in development mode
next export##Export the current application to static HTML pages
next start --port {{port}}##Start the compiled application and listen on a specific port
next start##Start the compiled application in production mode
next telemetry##Display the Next.js telemetry status
next {{build|dev|export|start|telemetry}} --help##Display help for a subcommand
nextflow clean -force {{run_name}}##Remove cache and intermediate files for a specific run
nextflow list##List all downloaded projects
nextflow log##Show details of previous runs in current directory
nextflow pull {{user/repo}} -hub bitbucket##Pull the latest version of a remote workflow from Bitbucket
nextflow run {{main.nf}} -resume##Run a pipeline, use cached results from previous runs
nextflow run {{user/repo}} -revision {{release_tag}}##Run a specific release of a remote workflow from GitHub
nextflow run {{workflow}} -work-dir {{path/to/directory}} -with-report {{report.html}}##Run with a given work directory for intermediate files, save execution report
nextflow self-update##Update Nextflow
nf-core bump-version {{path/to/directory}} {{new_version}}##Bump software versions in pipeline recipe
nf-core create##Create a new pipeline skeleton
nf-core download {{pipeline_name}}##Download an nf-core pipeline for offline use
nf-core launch {{pipeline_name}}##Launch an nf-core pipeline
nf-core lint {{path/to/directory}}##Lint the pipeline code
nf-core list##List existing pipelines on nf-core
ng build##Build the application
ng generate class {{class_name}}##Add a new class to one's application
ng generate component {{component_name}}##Add a new component to one's application
ng generate directive {{directive_name}}##Add a new directive to one's application
ng new {{project_name}}##Create a new Angular application inside a directory
ng serve##Run the application with the following command in its root directory
ng test##Run unit tests
ng version##Check the version of your current Angular installation
nginx -c {{config_file}} -p {{prefix/for/relative/paths}}##Start server with a prefix for all relative paths in the config file
nginx -c {{config_file}}##Start server with a custom config file
nginx -s reload##Reload the configuration by sending a signal with no downtime
nginx -t##Test the configuration without affecting the running server
nginx##Start server with the default config file
ngrep -d any##Capture traffic of all interfaces
ngrep -d {{eth0}} '{{User-Agent:}}'##Filter keyword 'User-Agent' of interface eth0
ngrep -d {{eth0}} port {{22}}##Capture traffic crossing port 22 of interface eth0
ngrep -d {{eth0}}##Capture traffic of a specific interface
ngrep host {{www.example.com}}##Capture traffic from or to a host
ngrok http https://localhost##Expose a local HTTPS server
ngrok http {{80}}##Expose a local HTTP service on a given port
ngrok http {{foo.dev}}:{{80}}##Expose a local HTTP service on a specific host
ngrok tcp {{22}}##Expose TCP traffic on a given port
ngrok tls -hostname={{foo.com}} {{443}}##Expose TLS traffic for a specific host and port
ngs --version##Print the version
ngs -e "{{echo('ngs is executed')}}"##Execute a code snippet
ngs {{path/to/script.ngs}}##Execute a script
nice -n {{niceness_value}} {{command}}##Launch a program with altered priority
nim compile -d:release --opt:size {{file.nim}}##Build a release binary optimized for low file size
nim compile -d:release {{file.nim}}##Compile a source file with release optimizations enabled
nim compile -r {{file.nim}}##Compile and run a source file
nim compile {{file.nim}}##Compile a source file
nim doc {{file.nim}}##Generate HTML documentation for a module (output will be placed in the current directory)
nimble build##Build a Nimble package
nimble init##Create a new Nimble package in the current directory
nimble install {{package_name}}##Install a package
nimble install##Install a Nimble package
nimble list -i##List installed packages
nimble search {{search_string}}##Search for packages
ninja -C {{path/to/directory}}##Build a program in a given directory
ninja -h##Show help
ninja -t targets##Show targets (e.g. `install` and `uninstall`)
ninja##Build in the current directory
nix optimise-store##Optimise Nix store disk usage by combining duplicate files
nix repl##Start an interactive environment for evaluating Nix expressions
nix run {{nixpkgs.pkg1 nixpkgs.pkg2 nixpkgs.pkg3...}}##Start a Nix shell with the specified packages available
nix search {{search_term}}##Search for a package via its name or description
nix store optimise##Optimise Nix store disk usage by combining duplicate files
nix upgrade-nix##Upgrade Nix to the latest stable version
nix-build --attr {{expression_name}} --option sandbox true##Build a sandboxed Nix expression (on non-NixOS)
nix-build --attr {{expression_name}}##Build a Nix expression
nix-env -e {{pkg_name}}##Uninstall package
nix-env -i {{pkg_name}} --file {{example.com}}##Install a package from a URL
nix-env -iA nixpkgs.{{pkg_name}}##Install package
nix-env -q {{search_term}}##Query installed packages
nix-env -q##List all installed packages
nix-env -qa {{search_term}}##Query available packages
nix-env -u {{pkg_name}}##Upgrade one package
nix-env -u##Upgrade all packages
nix-shell --packages {{package_name_1}} {{package_name_2}}##Start with packages loaded from nixpkgs
nix-shell --packages {{package_names}} -I nixpkgs={{https://github.com/NixOS/nixpkgs/archive/nixpkgs_revision.tar.gz}}##Start with packages loaded from specific nixpkgs revision
nix-shell --run "{{command}} {{command_arguments}}"##Run shell command in non-interactive shell and exit
nix-shell -i {{interpreter}} --packages {{package_names}}##Evaluate rest of file in specific interpreter, for use in `#!-scripts` (see <https//nixos.org/manual/nix/stable/#use-as-a-interpreter>)
nix-shell {{default.nix}}##Start with expression in `default.nix` in the current directory
nix-shell##Start with nix expression in `shell.nix` or `default.nix` in the current directory
nkf -c --overwrite {{path/to/file.txt}}##Set new line code to CRLF and overwrite (windows type)
nkf -d --overwrite {{path/to/file.txt}}##Set new line code to LF and overwrite (UNIX type)
nkf -m --overwrite {{path/to/file.txt}}##Decrypt mime file and overwrite
nkf -s {{path/to/file.txt}}##Convert to SHIFT_JIS encoding
nkf -w --overwrite {{path/to/file.txt}}##Convert to UTF-8 encoding and overwrite the file
nkf -w {{path/to/file.txt}}##Convert to UTF-8 encoding
nl -b a {{file}}##Number all lines including blank lines
nl -b p'FooBar[0-9]' {{file}}##Number only the body lines that match a basic regular expression (BRE) pattern
nl -t {{file}}##Number only the lines with printable text
nl {{file}}##Number non-blank lines in a file
nload device {{interface_one}} {{interface_two}}##View network traffic on specific interfaces (use the arrow keys to switch interfaces)
nload##View all network traffic (use the arrow keys to switch interfaces)
nm --demangle {{path/to/file.o}}##Demangle C++ symbols (make them readable)
nm -a {{path/to/file.o}}##List all symbols, even debugging symbols
nm -g {{path/to/file.o}}##List global (extern) functions in a file (prefixed with T)
nm -u {{path/to/file.o}}##List only undefined symbols in a file
nmap -A {{address_or_addresses}}##Also enable scripts, service detection, OS fingerprinting and traceroute
nmap -O {{ip_or_hostname}}##Check if an IP address is up, and guess the remote host's operating system
nmap -T4 {{address_or_addresses}}##Assume good network connection and speed up execution
nmap -p {{port1,port2,…,portN}} {{address_or_addresses}}##Scan a specific list of ports (use `-p-` for all ports `1-65535`)
nmap -sC -sV {{address_or_addresses}}##Perform full port, service, version detection scan with all default NSE scripts active against a host to determine weaknesses and info
nmap -sSU {{address_or_addresses}}##Perform TCP and UDP scanning (use `-sU` for UDP only, `-sZ` for SCTP, `-sO` for IP)
nmap -sn {{ip_or_hostname}} {{optional_another_address}}##Try to determine whether the specified hosts are up and what their names are
nmap {{ip_or_hostname}} {{optional_another_address}}##Like above, but also run a default 1000-port TCP scan if host seems up
node --no-lazy --inspect-brk {{path/to/file}}##Activate inspector, pausing execution until a debugger is connected once source code is fully parsed
node -e "{{code}}"##Evaluate JavaScript code by passing it as an argument
node -p "{{process.versions}}"##Evaluate and print result, useful to see node's dependencies versions
node {{path/to/file}}##Run a JavaScript file
node##Start a REPL (interactive shell)
nodemon --exec "python {{options}}" {{path/to/file.py}}##Run a Python script
nodemon --exec "{{command_to_run_script}} {{options}}" {{path/to/script}}##Run an arbitrary non-node script
nodemon --ignore {{path/to/file_or_directory}}##Ignore specific files
nodemon {{arguments}} {{path/to/file.js}}##Pass arguments to node itself if they're not nodemon arguments already (e.g. `--inspect`)
nodemon {{path/to/file.js}} {{arguments}}##Pass arguments to the node application
nodemon {{path/to/file.js}}##Execute the specified file and watch a specific file for changes
nodenv global {{version}}##Use a specific version of Node.js across the whole system
nodenv install --list##Display a list of available versions
nodenv install {{version}}##Install a specific version of Node.js
nodenv local {{version}}##Use a specific version of Node.js with a directory
nodenv version##Display the Node.js version for the current directory
nodenv which {{command}}##Display the location of a Node.js installed command (e.g. `npm`)
nohup {{command}} {{command_arguments}} &##Launch nohup in background mode
nohup {{command}} {{command_arguments}} > {{path/to/output_file}} &##Run a process and write the output to a specific file
nohup {{command}} {{command_arguments}}##Run a process that can live beyond the terminal
nohup {{path/to/script.sh}} &##Run a shell script that can live beyond the terminal
nokogiri {{url|path/to/file}} --encoding {{encoding}}##Parse using a specific encoding
nokogiri {{url|path/to/file}} --rng {{url|path/to/file}}##Validate using a RELAX NG file
nokogiri {{url|path/to/file}} --type {{xml|html}}##Parse as a specific type
nokogiri {{url|path/to/file}} -C {{path/to/config_file}}##Load a specific initialisation file before parsing
nokogiri {{url|path/to/file}}##Parse the contents of a URL or file
nomad alloc logs {{alloc_id}}##Follow the logs of a specific allocation
nomad job plan {{path/to/file.nomad}}##Plan a job for execution on the cluster
nomad job run {{path/to/file.nomad}}##Run a job on the cluster
nomad job status {{job_name}}##Show the detailed status information about a specific job
nomad job status##Show the status of jobs currently running on the cluster
nomad job validate {{path/to/file.nomad}}##Validate a job file
nomad node status##Show the status of nodes in the cluster
nomad volume status##Show the status of storage volumes
nop -?##Display help for `nop`
nop -p {{path/to/input1.gv}} {{path/to/input2.gv ...}}##Check one or more graphs for validity, producing no output graph
nop {{path/to/input1.gv}} {{path/to/input2.gv ...}} > {{path/to/output.gv}}##Pretty-print one or more graphs in canonical format
noti -w {{process_id}}##Monitor a process by PID and trigger a notification when the PID disappears
noti {{tar -cjf example.tar.bz2 example/}}##Display a notification when tar finishes compressing files
notmuch count --output={{messages|threads}} "{{search_term}}"##Count messages matching the given search term
notmuch reply --format={{default|headers-only}} --reply-to={{sender|all}} "{{search_term}}"##Create a reply template for a set of messages
notmuch search --format={{json|text}} --output={{summary|threads|messages|files|tags}} "{{search_term}}"##Search for messages matching the given search term
notmuch search --format={{json|text}} --output={{summary|threads|messages|files|tags}} --limit={{X}} "{{search_term}}"##Limit the number of search results to X
notmuch setup##Configure for first use
notmuch tag +{{custom_tag}} "{{search_term}}"##Add a tag for all messages matching a search term
notmuch tag -{{custom_tag}} "{{search_term}}"##Remove a tag for all messages matching a search term
now init##Initialize an example project (a new directory will be created)
now inspect {{deployment_url}}##Display information related to a deployment
now list##Display a list of deployments
now login##Log in into an account or create a new one
now remove {{deployment_id}}##Remove a deployment
now##Deploy the current directory
npm init##Interactively create a `package.json` file
npm install --global {{module_name}}##Download a package and install it globally
npm install {{module_name}} --save-dev##Download a package and add it to the list of dev dependencies in `package.json`
npm install {{module_name}}@{{version}}##Download a specific version of a package and add it to the list of dependencies in `package.json`
npm install##Download all the packages listed as dependencies in package.json
npm list --global --depth={{0}}##List top-level globally installed modules
npm list##Print a tree of locally installed dependencies
npm uninstall {{module_name}}##Uninstall a package and remove it from the list of dependencies in `package.json`
npm-check --skip-unused##Don't check for unused packages
npm-check --update##Interactively update out-of-date packages
npm-check --update-all##Update everything without prompting
npm-check##Display a report of outdated, incorrect, and unused dependencies
npm-home -g {{package}}##Open the GitHub repository of a specific package in the web browser
npm-home -y {{package}}##Open the Yarn page of a specific package in the web browser
npm-home {{package}}##Open the npm page of a specific package in the web browser
npm-name --similar {{package}}##Find similar package names in the npm registry
npm-name {{package}}##Check if a specific package name is available in the npm registry
npm-why {{package_name}}##Show why an npm package is installed
nproc --all##Display the number of installed processing units, including any inactive ones
nproc --ignore {{count}}##If possible, subtract a given number of units from the returned value
nproc##Display the number of available processing units
npx --help##Display help
npx --no-install {{command}} {{command_arguments}}##Run a command if existis in the current path or in `node_modules/.bin`
npx --package {{package_name}} {{module_name}}##In case a package has multiple binaries, specify the package name along with the binary
npx --quiet {{module_name}} {{command_arguments}}##Execute the binary from a given npm module suppressing any output from `npx` itself
npx {{module_name}} {{command_arguments}}##Execute the binary from a given npm module
nrm add {{registry}} {{url}}##Add a custom registry
nrm del {{registry}}##Delete a registry
nrm ls##List all registries
nrm test##Show the response time for all registries
nrm use {{registry}}##Change to a particular registry
nslookup -port={{port_number}} -type=TXT {{example.com}} {{name_server}}##Query a given name server on a specific port number for a TXT record of the domain
nslookup -type=MX -debug {{example.com}}##Query for a mail server (MX record) of the domain, showing details of the transaction
nslookup -type=NS {{example.com}} {{8.8.8.8}}##Query a given name server for a NS record of the domain
nslookup -type=PTR {{54.240.162.118}}##Query for a reverse lookup (PTR record) of an IP address
nslookup -vc -type=ANY {{example.com}} ##Query for ANY available records using TCP protocol
nslookup -vc -type=AXFR {{example.com}} {{name_server}}##Query a given name server for the whole zone file (zone transfer) of the domain using TCP protocol
nslookup {{example.com}}##Query your system's default name server for an IP address (A record) of the domain
nth -f {{path/to/hashes}}##Name hashes in a file
nth -t {{5f4dcc3b5aa765d61d8327deb882cf99}} -g##Output in json format
nth -t {{5f4dcc3b5aa765d61d8327deb882cf99}}##Name a hash
nth -t {{NWY0ZGNjM2I1YWE3NjVkNjFkODMyN2RlYjg4MmNmOTkK}} -b64##Decode hash in Base64 before naming it
nu --commands "{{echo 'nu is executed'}}"##Execute specific commands
nu --loglevel {{error|warn|info|debug|trace}} {{path/to/script.nu}}##Execute a specific script with logging
nu {{path/to/script.nu}}##Execute a specific script
nu##Start an interactive shell session
nudoku -d {{easy|normal|hard}}##Choose the difficulty of the game
nudoku##Start a sudoku game
numfmt --from={{si}} {{1.5K}}##Convert 1.5K (SI Units) to 1500
nvidia-smi --query##Display more detailed GPU information
nvidia-smi dmon##Monitor overall GPU usage with 1-second update interval
nvidia-smi##Display information on all available GPUs and processes using them
nvim {{file}}##Open a file
nvm alias default {{node_version}}##Set the default Node.js version
nvm exec {{node_version}} node {{app.js}}##Execute a script in a specific version of Node.js
nvm install {{node_version}}##Install a specific version of Node.js
nvm install {{node_version}}##Install a specific version of Node.js
nvm list##List all available Node.js versions and highlight the default one
nvm list##List all available Node.js versions and highlight the default one
nvm run {{node_version}} --version##Launch the REPL of a specific version of Node.js
nvm uninstall {{node_version}}##Uninstall a given Node.js version
nvm uninstall {{node_version}}##Uninstall a given Node.js version
nvm use {{node_version}}##Use a specific version of Node.js in the current shell
nvm use {{node_version}}##Use a specific version of Node.js in the current shell
nx affected --target {{target}}##Execute a target only on projects that have been changed
nx build {{project}}##Build a specific project
nx run {{project}}:{{target}}##Execute a target on a specific project
nx run-many --target {{target}} --all##Execute a target on all projects in the workspace
nx run-many --target {{target}} --projects {{project1}},{{project2}}##Execute a target on multiple projects
nx test {{project}}##Test a specific project
o##Open a link
o##Open link
oathtool --totp --base32 "{{secret}}" "{{token}}"##Validate a TOTP token
oathtool --totp --base32 "{{secret}}"##Generate TOTP token (behaves like Google Authenticator)
oathtool --totp --now "{{2004-02-29 16:21:42}}" --base32 "{{secret}}"##Generate a TOTP token for a specific time
objdump -d {{binary}}##Display the dis-assembled output of executable sections
objdump -f {{binary}}##Display the file header information
objdump -s {{binary}}##Display a complete binary hex dump of all sections
obs --minimize-to-tray##Minimise to the system tray on launch
obs --portable##Launch OBS in portable mode
obs --startrecording##Automatically start recording a video on launch
obs --startreplaybuffer##Automatically start the replay buffer on launch
obs --startstreaming##Automatically start streaming on launch
obs --verbose##Make the log more verbose (for debugging)
obs##Launch OBS
oc get pods##List pods in a project
oc login##Log in to the OpenShift Container Platform server
oc logout##Log out from the current session
oc new-app {{repo_url}} --name {{application}}##Add a new application to a project
oc new-project {{project_name}}##Create a new project
oc project {{project_name}}##Switch to an existing project
oc rsh {{pod_name}}##Open a remote shell session to a container
ocaml {{module1}} {{module2}} {{path/to/file.ml}}##Run OCaml script with modules
ocaml {{path/to/file.ml}}##Read OCaml commands from a file and execute them
ocaml##Read OCaml commands from the user and execute them
ocamlc -i {{path/to/source_file.ml}}##Automatically generate a module signature (interface) file
ocamlc -o {{path/to/binary}} {{path/to/source_file.ml}}##Create a named binary from a source file
ocamlc {{path/to/source_file.ml}}##Create a binary from a source file
ocamlfind -toolchain {{cross-toolchain}} ocamlopt -o {{executable}} {{source_file.ml}}##Cross-compile for a different platform
ocamlfind ocamlc -package {{package1}},{{package2}} -linkpkg -o {{executable}} {{source_file.ml}}##Compile a source file to a bytecode binary and link with packages
ocamlfind ocamlopt -package {{package1}},{{package2}} -linkpkg -o {{executable}} {{source_file.ml}}##Compile a source file to a native binary and link with packages
ocamlopt -g -o {{path/to/binary}} {{path/to/source_file.ml}}##Compile with debugging enabled
ocamlopt -o {{path/to/binary}} {{path/to/source_file.ml}}##Compile a source file
ocrmypdf --clean --deskew --rotate-pages {{path/to/input_file}} {{path/to/output.pdf}}##Clean, de-skew, and rotate pages of a poor scan
ocrmypdf --help##Display help
ocrmypdf --skip-text {{path/to/input.pdf}} {{path/to/output.pdf}}##Skip pages of a mixed-format input PDF file that already contain text
ocrmypdf --title "{{title}}" --author "{{author}}" --subject "{{subject}}" --keywords "{{keyword; key phrase; ...}}" {{path/to/input_file}} {{path/to/output.pdf}}##Set the metadata of the searchable PDF file
ocrmypdf {{path/to/file.pdf}} {{path/to/file.pdf}}##Replace a scanned PDF file with a searchable PDF file
ocrmypdf {{path/to/input_file}} {{path/to/output.pdf}}##Create a new searchable PDF/A file from a scanned PDF or image file
od --format={{x1}} --width={{4}} -v {{path/to/file}}##Display file in hexadecimal format (1-byte units), and 4 bytes per line
od --format={{xz}} --address-radix={{n}} -v {{path/to/file}}##Display file in hexadecimal format along with its character representation, and do not print byte offsets
od --format={{x}} --address-radix={{d}} -v {{path/to/file}}##Display file in hexadecimal format (2-byte units), with byte offsets in decimal format
od --read-bytes {{100}} --skip-bytes={{500}} -v {{path/to/file}}##Read only 100 bytes of a file starting from the 500th byte
od -v {{path/to/file}}##Display file in verbose mode, i.e. without replacing duplicate lines with `*`
od {{path/to/file}}##Display file using default settings octal format, 8 bytes per line, byte offsets in octal, and duplicate lines replaced with `*`
odpscmd --config={{odps_config.ini}}##Start the command-line with a custom configuration file
offlineimap -a {{account}}##Synchronize a specific account
offlineimap -f {{folder}}##Synchronize a specific folder
offlineimap -o##Synchronize once, without enabling autorefresh
ogr2ogr -f GPKG {{path/to/output}}.gpkg {{path/to/input}}.csv -oo X_POSSIBLE_NAMES={{longitude}} -oo Y_POSSIBLE_NAMES={{latitude}} -a_srs {{EPSG:4326}}##Convert a CSV file into a GeoPackage, specifying the names of the coordinate columns and assigning a coordinate reference system
ogr2ogr -f GPKG {{path/to/output}}.gpkg {{path/to/input}}.shp##Convert a Shapefile into a GeoPackage
ogr2ogr -f PostgreSQL PG:dbname="{{database_name}}" {{path/to/input}}.gpkg##Load a GeoPackage into a PostGIS database
ogr2ogr -s_srs {{EPSG:4326}} -t_srs {{EPSG:3857}} -f GPKG {{path/to/output}}.gpkg {{path/to/input}}.gpkg##Change coordinate reference system of a GeoPackage from `EPSG4326` to `EPSG3857`
ogr2ogr -spat {{min_x}} {{min_y}} {{max_x}} {{max_y}} -f GPKG {{path/to/output}}.gpkg {{path/to/input}}.gpkg##Clip layers of a GeoPackage file to the given bounding box
ogr2ogr -where '{{myProperty > 42}}' -f {{GeoJSON}} {{path/to/output.geojson}} {{path/to/input.geojson}}##Reduce a GeoJSON to features matching a condition
ogrinfo --formats##List supported formats
ogrinfo -so -al {{path/to/input.gpkg}}##Show summary of all layers of the data source
ogrinfo -so {{path/to/input.gpkg}} {{layer_name}}##Show summary information about a specific layer of a data source
ogrinfo -where '{{attribute_name > 42}}' {{path/to/input.gpkg}} {{layer_name}}##Show detailed information of features matching a condition
ogrinfo {{path/to/input.geojson}} -dialect SQLite -sql "{{UPDATE input SET attribute_name = 'foo'}}"##Update a layer in the data source with SQL
ogrinfo {{path/to/input.gpkg}} {{layer_name}}##Get detailed information about a specific layer of a data source
ogrinfo {{path/to/input.gpkg}}##List layers of a data source
ogrmerge.py -f {{GPKG}} -o {{path/to/output.gpkg}} {{path/to/input1.shp path/to/input2.shp ...}}##Create a GeoPackage with a layer for each input Shapefile
ogrmerge.py -f {{VRT}} -o {{path/to/output.vrt}} {{path/to/input1.geojson path/to/input2.geojson ...}}##Create a virtual datasource (VRT) with a layer for each input GeoJSON
ogrmerge.py -single -f {{GeoJSON}} -o {{path/to/output.geojson}} -src_layer_field_name country {{source_name}} {{path/to/input1.shp path/to/input2.shp ...}}##Concatenate two vector datasets and store source name of dataset in attribute 'source_name'
ohdear-cli me##Display details about the currently authenticated user
ohdear-cli sites:add {{url}}##Add a new site to Oh Dear
ohdear-cli sites:list##Display a list of sites and their current status
ohdear-cli sites:show {{site_id}}##Display details about a specific site
okular --find {{search_string}} {{path/to/file}}##Open a document and search for a specific string
okular --page {{page_number}} {{path/to/file}}##Open a document at a specific page
okular --presentation {{path/to/file}}##Open a document in presentation mode
okular --print {{path/to/file}}##Open a document and start the print dialog
okular {{path/to/file1 path/to/file2 ...}}##Open specific documents in Okular
okular##Launch Okular
omf destroy##Uninstall Oh My Fish
omf install {{name}}##Install one or more packages
omf list##List installed packages
omf remove {{name}}##Remove a theme or package
omf theme {{name}}##Apply a theme
omf theme##List available themes
omz changelog##Print the changes from the latest update of Oh My Zsh
omz plugin list##List all available plugins
omz plugin {{enable|disable}} {{plugin}}##Enable/Disable an Oh My Zsh plugin
omz reload##Restart the current Zsh session and Oh My Zsh
omz theme list##List all available themes
omz theme set {{theme}}##Set an Oh My Zsh theme in `~/.zshrc`
omz update##Update Oh My Zsh
opam help##Display all commands
opam init##Initialize opam for first use
opam install {{package_name}}##Install a package and all of its dependencies
opam list##List all installed packages
opam search {{package_name}}##Search for packages
opam show {{package_name}}##Display detailed information about a package
opam update##Update the local package database
opam upgrade##Upgrade all installed packages
openconnect --background {{vpn.example.org}}##Connect to a server, forking into the background
openconnect --certificate={{path/to/file}} {{vpn.example.org}}##Connect to a server and authenticate with a specific SSL client certificate
openconnect --config={{path/to/file}} {{vpn.example.org}}##Connect to a server, reading options from a config file
openconnect {{vpn.example.org}}##Connect to a server
openscad -o {{path/to/button.png}} --colorscheme {{Sunset}} {{path/to/button.scad}}##Render a file to PNG in a specific colorscheme
openscad -o {{path/to/button.stl}} {{path/to/button.scad}}##Convert a file to STL
openscad {{path/to/button.scad}}##Open a file
openssl dgst -sha256 -binary -out {{output_file}} {{input_file}}##Calculate the SHA256 digest for a file, saving the result to a specific file
openssl dgst -sign {{private_key_file}} -sha256 -out {{output_file}} {{input_file}}##Sign a file using and ECDSA key
openssl dgst -sign {{private_key_file}} -sha256 -sigopt rsa_padding_mode:pss -out {{output_file}} {{input_file}}##Sign a file using an RSA key, saving the result to a specific file
openssl dgst -verify {{public_key_file}} -signature {{signature_file}} -sigopt rsa_padding_mode:pss {{signature_message_file}}##Verify an RSA signature
openssl dgst -verify {{public_key_file}} -signature {{signature_file}} {{signature_message_file}}##Verify an ECDSA signature
openssl genpkey -algorithm EC -pkeyopt ec_paramgen_curve:{{prime256v1}} -out {{filename.key}}##Generate an elliptic curve private key using the curve `prime256v1`, saving it to a specific file
openssl genpkey -algorithm rsa -pkeyopt rsa_keygen_bits:{{2048}} -out {{filename.key}}##Generate an RSA private key of 2048 bits, saving it to a specific file
openssl genpkey -algorithm {{ED25519}} -out {{filename.key}}##Generate an `ED25519` elliptic curve private key, saving it to a specific file
openssl genrsa -out {{output_file.key}} {{1234}}##Save an RSA private key of an arbitrary number of bits to the output file
openssl genrsa {{-aes256}}##Generate an RSA private key and encrypt it with AES256 (you will be prompted for a passphrase)
openssl genrsa##Generate an RSA private key of 2048 bits to stdout
openssl help {{x509}}##Print options for a specific subcommand
openssl help##Print a list of available subcommands
openssl prime -generate -bits 2048 -hex##Generate a 2048bit prime number and display it in hexadecimal
openssl prime {{number}}##Check if a given number is prime
openssl req -new -sha256 -key {{filename.key}} -out {{filename.csr}}##Generate a certificate signing request to be sent to a certificate authority
openssl req -new -x509 -newkey {{rsa}}:{{4096}} -keyout {{filename.key}} -out {{filename.cert}} -subj "{{/C=XX/CN=foobar}}" -days {{365}}##Generate a self-signed certificate and a corresponding key-pair, storing both in a file
openssl s_client -connect {{host}}:443 -showcerts </dev/null##Display the complete certificate chain of an HTTPS server
openssl s_client -connect {{host}}:{{port}} -servername {{hostname}}##Set the Server Name Indicator (SNI) when connecting to the SSL/TLS server
openssl s_client -connect {{host}}:{{port}} 2>/dev/null | openssl x509 -noout -dates##Display the start and expiry dates for a domain's certificate
openssl s_client -connect {{host}}:{{port}} </dev/null##Display the certificate presented by an SSL/TLS server
openssl ts -query -data {{path/to/file}} -sha512 -out {{path/to/file.tsq}}##Generate a SHA-512 timestamp request of a specific file and output to `file.tsq`
openssl ts -reply -in {{path/to/file.tsr}} -text##Check the date and metadata of a specific timestamp response file
openssl ts -reply -queryfile {{path/to/file.tsq}} -inkey {{path/to/tsakey.pem}} -signer tsacert.pem -out {{path/to/file.tsr}}##Create a timestamp response for request using key and signing certificate and output it to `file.tsr`
openssl ts -verify -in {{path/to/file.tsr}} -queryfile {{path/to/file.tsq}} -partial_chain -CAfile {{path/to/cert.pem}}##Verify a timestamp request file and a timestamp response file from the server with an SSL certificate file
openssl version##Print the version of OpenSSL
openssl x509 -enddate -noout -in {{filename.pem}}##Display a certificate's expiration date
openssl x509 -in {{certificate_file}} -noout -pubkey -out {{output_file}}##Store a certificate's public key in a file
openssl x509 -in {{filename.crt}} -noout -text##Display certificate information
openssl x509 -inform {{der}} -outform {{pem}} -in {{original_certificate_file}} -out {{converted_certificate_file}}##Convert a certificate between binary DER encoding and textual PEM encoding
openttd -c {{path/to/file}}##Start with a custom configuration file
openttd -f -D {{host}}:{{port}}##Start a dedicated server, forked in the background
openttd -g {{path/to/file}}##Load save game at start
openttd -g##Start a new game
openttd -n {{host}}:{{port}}#{{player_name}} -p {{password}}##Join a server with a password
openttd -r {{1920x1080}}##Start with the specified window resolution
openttd -v {{video_driver}} -s {{sound_driver}} -m {{music_driver}}##Start with selected video, sound, and music drivers
openvpn --genkey --secret {{path/to/key}}##Create a cryptographic key and save it to file
opt -O2 {{path/to/file.bc}} -S -o {{path/to/output_file.bc}}##Optimize the program at level 2 and output the result to another file
opt -{{passname}} {{path/to/file.bc}} -S -o {{file_opt.bc}}##Run an optimization or analysis on a bitcode file
opt {{-dot-cfg}} -S {{path/to/file.bc}} -disable-output##Output the Control Flow Graph of a function to a `.dot` file
optipng -i {{1}} {{path/to/file.png}}##Compress a PNG and add interlacing
optipng -o{{0}} {{path/to/file.png}}##Compress a PNG with the fastest compression
optipng -o{{7}} {{path/to/file.png}}##Compress a PNG with the best compression
optipng -preserve {{path/to/file.png}}##Compress a PNG and preserve all metadata (including file timestamps)
optipng -strip all {{path/to/file.png}}##Compress a PNG and remove all metadata
optipng {{path/to/file.png}}##Compress a PNG with default settings
opusenc --bitrate {{1536}} {{path/to/input.flac}} {{path/to/output}}.opus##Convert 5.1 surround sound audio at the highest quality level
opusenc --bitrate {{512}} {{path/to/input.wav}} {{path/to/output}}.opus##Convert stereo audio at the highest quality level
opusenc {{path/to/input.wav}} --downmix-mono --bitrate {{6}} {{path/to/out}}.opus##Convert speech audio at the lowest quality level
opusenc {{path/to/input.wav}} {{path/to/output}}.opus##Convert WAV to Opus using default options
orca-c --bpm {{beats_per_minute}}##Start ORCA and set a specific tempo (defaults to 120)
orca-c --initial-size {{columns}}x{{rows}}##Start ORCA and set the size of the grid
orca-c --undo-limit {{limit}}##Start ORCA and set the maximum number of undo steps (defaults to 100)
orca-c {{path/to/file.orca}}##Start ORCA and open a specific file
orca-c##Start ORCA with an empty workspace
osage -?##Display help
osage -T {{format}} -O {{path/to/input.gv}}##Render the output in `ps`, `pdf`, `svg`, `fig`, `png`, `gif`, `jpg`, `json`, or `dot` format
osage -T {{png}} -O {{path/to/input.gv}}##Render a `png` image with a filename based on the input filename and output format (uppercase -O)
osage -T {{svg}} -o {{path/to/image.svg}} {{path/to/input.gv}}##Render a `svg` image with the specified output filename (lowercase -o)
p {{bookmark_name}}##Print a bookmarked directory's contents
p##Pause the game
p##Pause/unpause the game
p10k configure##Configure powerlevel10k interactively
p10k help##Display help
p10k reload##Reload powerlevel10k
p4 add##Open a new file to add it to the depot
p4 change##Create or edit changelist description
p4 client##Create a client
p4 describe -c {{changelist_number}}##Display list of files modified by changelist
p4 edit -c {{changelist_number}} {{filename}}##Open a file to edit
p4 login -a##Log in to the Perforce service
p4 submit -c {{changelist_number}}##Submit a changelist to the depot
p4 sync##Copy files from depot into the client workspace
p5 generate {{project_name}}##Generate a new p5 project (should be run from collection directory)
p5 new {{collection_name}}##Create a new p5 collection
p5 server##Run the p5 manager server
p5 update##Update libraries to their latest versions
p7zip -d -k {{compressed.ext}}.7z##Decompress a file keeping the input file
p7zip -d {{compressed.ext}}.7z##Decompress a file, replacing it with the original uncompressed version
p7zip -f {{path/to/file}}##Skip some checks and force compression or decompression
p7zip -k {{path/to/file}}##Archive a file keeping the input file
p7zip {{path/to/file}}##Archive a file, replacing it with a 7zipped compressed version
paci configure##Configure its behaviour
paci install {{package}}##Install a package
paci refresh##Update the list of available packages and versions (it's recommended to run this before other `paci` commands)
paci search {{package}}##Search for a given package
paci update {{package}}##Update a package
packer build {{path/to/config.json}}##Build an image
packer validate {{path/to/config.json}}##Check the syntax of a Packer image config
packtpub download --dir {{path/to/directory}}##Download the daily offer book into the specified directory
packtpub download --type {{pdf|ebup|mobi}}##Download the daily offer book into the current directory with the specified book format (defaults to `pdf`)
packtpub login##Start an interactive login to packtpub.com
packtpub logout##Log out from packtpub.com
packtpub view-offer##Display the daily offer
packtpub view-offer##Open the daily offer in the default web browser
packtpub whoami##Display the currently logged-in user
pactl list {{sinks}} short##List all sinks (or other types sinks are outputs and sink-inputs are active audio streams)
pactl move-sink-input {{627}} {{1}}##Move sink-input 627 to sink 1
pactl set-default-sink {{1}}##Change the default sink (output) to 1 (the number can be retrieved via the `list` subcommand)
pactl set-sink-mute {{@DEFAULT_SINK@}} toggle##Toggle mute on the default sink (using the special name `@DEFAULT_SINK@`)
pactl set-sink-volume {{1}} {{0.75}}##Set the volume of sink 1 to 75%
pageres [{{https://example.com/}} {{1366x768}} --no-crop] [{{https://example2.com/}} {{1024x768}}] --crop##Provide specific options for a URL, overriding global options
pageres {{https://example.com/}} {{1024x768}} --filename={{'<%= date %> - <%= url %>'}}##Provide a custom filename template
pageres {{https://example.com/}} {{1366x768}} --hide='{{.page-header}}'##Hide a specific element
pageres {{https://example.com/}} {{1366x768}} --selector='{{.page-header}}'##Capture a specific element on a page
pageres {{https://example.com/}} {{https://example2.com/}} {{1366x768}} {{1600x900}}##Take multiple screenshots of multiple URLs at different resolutions
pageres {{local_file_path.html}} {{1366x768}}##Capture a screenshot of a local file
pamixer --decrease {{5}} --source {{ID}}##Decrease the volume on a source by 5%
pamixer --increase {{5}}##Increase the volume on default sink by 5%
pamixer --list-sinks --list-sources##List all sinks and sources with their corresponding IDs
pamixer --mute##Mute the default sink (use `--unmute` instead to unmute)
pamixer --set-volume {{105}} --allow-boost##Use the allow boost option to increase, decrease, or set the volume above 100%
pamixer --set-volume {{75}}##Set the volume to 75% on the default sink
pamixer --toggle-mute --sink {{ID}}##Toggle mute on a sink other than the default
pandoc --list-input-formats##List all supported input formats
pandoc --list-output-formats##List all supported output formats
pandoc {{input.docx}} --to {{gfm}} -o {{output.md}}##Force conversion to use a specific format
pandoc {{input.md}} -o {{output.pdf}}##Convert file to PDF (the output format is determined by file extension)
pandoc {{input.md}} -s -o {{output.tex}}##Convert to a standalone file with the appropriate headers/footers (for LaTeX, HTML, etc.)
paperkey --pubring {{path/to/public_key.gpg}} --secrets {{path/to/secret_data.txt}} --output {{secret_key.gpg}}##Take the secret key data in `secret_data.txt` and combine it with the public key to reconstruct the secret key
paperkey --secret-key {{path/to/secret_key.gpg}} --output {{path/to/secret_data.txt}}##Take a specific secret key and generate a text file with the secret data
parallel -S {{machine1}},{{machine2}} {{command}} ::: {{arg1}} {{arg2}}##Run on multiple machines via SSH
parallel convert {} {.}.png ::: *.jpg##Convert JPG images to PNG using replacement strings
parallel gzip ::: {{file1}} {{file2}} {{file3}}##Gzip several files at once, using all cores
parallel-lint --blame {{path/to/directory}}##Lint a directory and show Git Blame results for rows containing errors
parallel-lint --exclude {{path/to/excluded_directory}} {{path/to/directory}}##Lint a directory, excluding the specified directory
parallel-lint --json {{path/to/directory}}##Lint a directory and output the results as JSON
parallel-lint -e {{php,html,phpt}} {{path/to/directory}}##Lint a directory of files using a comma-separated list of extension(s)
parallel-lint -j {{processes}} {{path/to/directory}}##Lint a directory using the specified number of parallel processes
parallel-lint {{path/to/directory}}##Lint a specific directory
parquet-tools cat {{path/to/parquet}}##Display the content of a Parquet file
parquet-tools column-index {{path/to/parquet}}##Print the column and offset indexes of a Parquet file
parquet-tools dump {{path/to/parquet}}##Print the content and metadata of a Parquet file
parquet-tools head {{path/to/parquet}}##Display the first few lines of a Parquet file
parquet-tools merge {{path/to/parquet1}} {{path/to/parquet2}} {{path/to/target_parquet}}##Concatenate several Parquet files into the target one
parquet-tools meta {{path/to/parquet}}##Print the metadata of a Parquet file
parquet-tools rowcount {{path/to/parquet}}##Print the count of rows in a Parquet file
parquet-tools schema {{path/to/parquet}}##Print the schema of a Parquet file
particle call {{device_name}} {{function_name}} {{function_arguments}}##Execute a function on a device
particle compile {{device_type}} {{path/to/source_code.ino}}##Compile a Particle project
particle flash --serial {{path/to/firmware.bin}}##Update a device to use the latest firmware via serial
particle flash {{device_name}} {{path/to/program.bin}}##Update a device to use a specific app remotely
particle list##Display a list of devices
particle project create##Create a new Particle project interactively
particle setup##Log in or create an account for the Particle CLI
pass -c {{path/to/data}}##Copy a password (first line of the data file) to the clipboard
pass edit {{path/to/data}}##Edit an entry
pass generate -c {{path/to/data}} {{num}}##Generate a new random password with a given length, and copy it to the clipboard
pass git init##Initialize a new Git repository (any changes done by pass will be committed automatically)
pass git {{command}}##Run a Git command on behalf of the password storage
pass init {{gpg_id_1}} {{gpg_id_2}}##Initialize (or re-encrypt) the storage using one or more GPG IDs
pass insert --multiline {{path/to/data}}##Save a new password and additional information (press Ctrl + D on a new line to complete)
pass otp --clip {{path/to/pass}}##Copy and don't print a 2FA code using the OTP token in a pass file
pass otp append --secret --issuer {{issuer_name}} --account {{account_name}} {{path/to/pass}}##Prompt for an OTP secret value specifying issuer and account (at least one must be specified) and append to existing pass file
pass otp append {{path/to/pass}}##Prompt for an otpauth URI token and append to an existing pass file
pass otp insert {{path/to/pass}}##Prompt for an otpauth URI token and create a new pass file
pass otp uri --qrcode {{path/to/pass}}##Display a QR code using the OTP token stored in a pass file
pass otp {{path/to/pass}}##Print a 2FA code using the OTP token in a pass file
pass##List the whole store tree
passwd -S##Get the current status of the user
passwd -d##Make the password of the account blank (it will set the named account passwordless)
passwd {{username}}##Change the password of a specific user
passwd##Change the password of the current user interactively
paste -d '\n' {{file1}} {{file2}}##Merge two files, with lines added alternatively
paste -d {{delimiter}} {{file1}} {{file2}}##Merge two files side by side, each in its column, using the specified delimiter
paste -s -d {{delimiter}} {{file}}##Join all the lines into a single line, using the specified delimiter
paste -s {{file}}##Join all the lines into a single line, using TAB as delimiter
paste {{file1}} {{file2}}##Merge two files side by side, each in its column, using TAB as delimiter
pastel color "{{rgb(255,50,127)}}"##Show and analyze colors on the terminal
pastel distinct {{8}}##Generate a set of N visually distinct colors
pastel format {{hsl}} {{ff8000}}##Convert colors from one format to another. Here from RGB to HSL
pastel list##Get a list of all X11 / CSS color names
pastel pick##Pick a color from somewhere on the screen
patch -R < {{patch.diff}}##Apply the reverse of a patch
patch -p1 < {{patch.diff}}##Apply a patch to the current directory
patch < {{patch.diff}}##Apply a patch using a diff file (filenames must be included in the diff file)
patch {{path/to/file}} < {{patch.diff}}##Apply a patch to a specific file
patch {{path/to/input_file}} -o {{path/to/output_file}} < {{patch.diff}}##Patch a file writing the result to a different file
patchwork -?##Display help
patchwork -T {{format}} -O {{path/to/input.gv}}##Render the output in `ps`, `pdf`, `svg`, `fig`, `png`, `gif`, `jpg`, `json`, or `dot` format
patchwork -T {{png}} -O {{path/to/input.gv}}##Render a `png` image with a filename based on the input filename and output format (uppercase -O)
patchwork -T {{svg}} -o {{path/to/image.svg}} {{path/to/input.gv}}##Render a `svg` image with the specified output filename (lowercase -o)
pathchk --portability {{path1 path2 …}}##Check pathnames for validity on all POSIX compliant systems
pathchk -P {{path1 path2 …}}##Only check for empty pathnames or leading dashes (-)
pathchk -p {{path1 path2 …}}##Check pathnames for validity on a wider range of POSIX compliant systems
pathchk {{path1 path2 …}}##Check pathnames for validity in the current system
pause {{torrent_id}}##Pause a torrent
pax -f {{archive.tar}}##List the contents of an archive
pax -rf {{source.tar}}##Extract an archive into the current directory
pax -rw {{path/to/file1}} {{path/to/directory1}} {{path/to/directory2}} {{target/}}##Copy to a directory, while keeping the original metadata; `target/` must exist
pax -w {{path/to/file1}} {{path/to/file2}} {{path/to/file3}} > {{target.tar}}##Create an archive from files, using output redirection
pax -wf {{target.tar}} {{path/to/file1}} {{path/to/file2}} {{path/to/file3}}##Create an archive from files
pax -zf {{archive.tar.gz}}##List the contents of a gzipped archive
pdf-parser --search={{search_string}} {{path/to/file.pdf}}##Search for strings in indirect objects
pdf-parser --stats {{path/to/file.pdf}}##Display statistics for a PDF file
pdf-parser --type={{/Font}} {{path/to/file.pdf}}##Display objects of type `/Font` in a PDF file
pdffonts -loc {{path/to/file.pdf}}##Print additional information on location of the font that will be used when the PDF file is rasterized
pdffonts -locPS {{path/to/file.pdf}}##Print additional information on location of the font that will be used when the PDF file is converted to PostScript
pdffonts -opw {{password}} {{path/to/file.pdf}}##Specify owner password for PDF file to bypass security restrictions
pdffonts -upw {{password}} {{path/to/file.pdf}}##Specify user password for PDF file to bypass security restrictions
pdffonts {{path/to/file.pdf}}##Print PDF file fonts information
pdfgrep --max-count {{3}} --ignore-case {{'^foo'}} {{file.pdf}}##Do a case-insensitive search for lines that begin with "foo" and return the first 3 matches
pdfgrep --recursive --include {{'*book.pdf'}} {{pattern}}##Find pattern on files that match a specific glob in the current directory recursively
pdfgrep --recursive {{pattern}}##Find pattern in files with a `.pdf` extension in the current directory recursively
pdfgrep --with-filename --page-number {{pattern}} {{file.pdf}}##Include file name and page number for each matched line
pdfgrep {{pattern}} {{file.pdf}}##Find lines that match pattern in a PDF
pdfimages -f {{3}} -l {{5}} {{path/to/file.pdf}} {{filename_prefix}}##Extract images from pages 3 to 5
pdfimages -list {{path/to/file.pdf}}##List information about all the images in a PDF file
pdfimages -p {{path/to/file.pdf}} {{filename_prefix}}##Extract images from a PDF file and include the page number in the output filenames
pdfimages -png {{path/to/file.pdf}} {{filename_prefix}}##Extract all images from a PDF file and save them as PNGs
pdfinfo -opw {{password}} {{path/to/file.pdf}}##Specify owner password for PDF file to bypass security restrictions
pdfinfo -upw {{password}} {{path/to/file.pdf}}##Specify user password for PDF file to bypass security restrictions
pdfinfo {{path/to/file.pdf}}##Print PDF file information
pdfjam {{files...}} 1 --outfile {{path/to/output_file.pdf}}##Merge the first page of each file together
pdfjam {{files...}} {{last-1}} --suffix {{reversed}}##Reverse the order of pages within each given file and concatenate them
pdfjam {{path/to/file.pdf}} --nup {{2x2}} --suffix {{4up}} --preamble '{{\usepackage{fancyhdr} \pagestyle{fancy}}}'##Arrange the pages from the input file into a fancy 2x2 grid
pdfjam {{path/to/file.pdf}} {{path/to/signature}} --fitpaper true --outfile {{path/to/signed.pdf}} --nup "{{1x2}}" --delta "{{0 -842pt}}"##Sign an A4 page (adjust delta to height for other formats) with a scanned signature by overlaying them
pdfjam {{path/to/file1.pdf 3-5,1}} {{path/to/file2.pdf 4-6}} --outfile {{path/to/output_file.pdf}}##Merge subranges from two PDFs
pdfjam {{path/to/file1.pdf}} {{path/to/file2.pdf}} --outfile {{path/to/output_file.pdf}}##Merge two (or more) PDFs
pdfjoin {/path/to/file1.pdf}} {{2-}} {{file2}} {{last-3}} --outfile {{output_file}}##Merge page subranges from two PDFs
pdfjoin {{path/to/file.pdf}} {{3-5,1}} --suffix {{rearranged}}##Save pages 3 to 5 followed by page 1 to a new PDF with custom suffix
pdfjoin {{path/to/file1.pdf path/to/file2.pdf ...}} {{1}} --outfile {{output_file}}##Merge the first page of each given file together
pdfjoin {{path/to/file1.pdf}} {{path/to/file2.pdf}}##Merge two PDFs into one with the default suffix "joined"
pdflatex -halt-on-error {{source.tex}}##Compile a PDF document, exiting on each error
pdflatex -output-directory={{path/to/directory}} {{source.tex}}##Compile a PDF document specifying an output directory
pdflatex {{source.tex}}##Compile a PDF document
pdfposter --poster-size a2 {{input_file.pdf}} {{output_file.pdf}}##Convert an A2 poster into 4 A4 pages
pdfposter --scale 2 {{input_file.pdf}} {{output_file.pdf}}##Scale an A4 poster to A3 and then generate 2 A4 pages
pdfseparate -f {{3}} {{path/to/source_filename.pdf}} {{path/to/destination_filename-%d.pdf}}##Specify the first/start page for extraction
pdfseparate -l {{10}} {{path/to/source_filename.pdf}} {{path/to/destination_filename-%d.pdf}}##Specify the last page for extraction
pdfseparate {{path/to/source_filename.pdf}} {{path/to/destination_filename-%d.pdf}}##Extract pages from PDF file and make a separate PDF file for each page
pdftex -halt-on-error {{source.tex}}##Compile a PDF document, exiting on each error
pdftex -output-directory={{path/to/directory}} {{source.tex}}##Compile a PDF document, specifying an output directory
pdftex {{source.tex}}##Compile a PDF document
pdftk {{file1.pdf file2.pdf ...}} cat output {{output.pdf}}##Merge (concatenate) a list of PDF files and save the result as another one
pdftk {{input.pdf}} burst output {{out_%d.pdf}}##Split each page of a PDF file into a separate file, with a given filename output pattern
pdftk {{input.pdf}} cat {{1-2 3east 4-end}} output {{output.pdf}}##Rotate third page by 90 degrees clockwise and leave others unchanged
pdftk {{input.pdf}} cat {{1-3 5 6-10}} output {{output.pdf}}##Extract pages 1-3, 5 and 6-10 from a PDF file and save them as another one
pdftk {{input.pdf}} cat {{1-endsouth}} output {{output.pdf}}##Rotate all pages by 180 degrees clockwise
pdftocairo {{path/to/file.pdf}} -jpeg##Convert a PDF file to JPEG
pdftocairo {{path/to/file.pdf}} -png -x {{x_pixels}} -y {{y_pixels}}##Convert to PNG cropping x and y pixels from the top-left corner
pdftocairo {{path/to/file.pdf}} -tiff -gray -paper A3##Convert to grayscale TIFF setting paper size to A3
pdftocairo {{path/to/file.pdf}} {{output.pdf}} -pdf -expand##Convert to PDF expanding the output to fill the paper
pdftocairo {{path/to/file.pdf}} {{output.png}} -png -r 200##Convert to PNG with 200ppi resolution
pdftocairo {{path/to/file.pdf}} {{output.svg}} -svg -f {{first_page}} -l {{last_page}}##Convert to SVG specifying the first/last page to convert
pdftotext -f {{2}} -l {{4}} {{input.pdf}} {{output.txt}}##Convert pages 2, 3 and 4 of `input.pdf` to plain text and save them as `output.txt`
pdftotext -layout {{filename.pdf}}##Convert `filename.pdf` to plain text and preserve the layout
pdftotext {{filename.pdf}} -##Convert `filename.pdf` to plain text and print it to standard output
pdftotext {{filename.pdf}}##Convert `filename.pdf` to plain text and save it as `filename.txt`
pdftotext {{input.pdf}} {{output.txt}}##Convert `input.pdf` to plain text and save it as `output.txt`
pdfunite {{path/to/directory/*.pdf}} {{path/to/merged_output.pdf}}##Merge a directory of PDFs into a single PDF
pdfunite {{path/to/fileA.pdf}} {{path/to/fileB.pdf}} {{path/to/merged_output.pdf}}##Merge 2 PDFs into a single PDF
peco --query "{{query}}"##Start peco with a specified query
peerflix "{{http://example.net/music.torrent}}" --vlc##Stream the largest file in a torrent, given as a torrent URL, to VLC
peerflix "{{magnet:?xt=urn:btih:0123456789abcdef0123456789abcdef01234567}}" --list##List all streamable files contained in a torrent (given as a magnet link)
peerflix "{{torrent_url|magnet_link}}" --all --airplay##Stream all files from a torrent to Airplay
peerflix "{{torrent_url|magnet_link}}" --mplayer --subtitles {{subtitle-file.srt}}##Stream the largest file in a torrent to MPlayer, with subtitles
peerflix "{{torrent_url|magnet_link}}"##Stream the largest media file in a torrent
peludna-prognoza "{{city}}" --web##Display the pollen measurement page for a city at <https//plivazdravlje.hr> in the default web browser
peludna-prognoza "{{city}}" --{{json|xml}}##Display data in a machine-readable format
peludna-prognoza "{{city}}"##Fetch data for a city
peludna-prognoza##Start an interactive search for a city and fetch data for it
perl -c {{script.pl}}##Check syntax errors on a Perl script
perl -d {{script.pl}}##Run a Perl script in debug mode, using `perldebug`
perl -e {{perl_statement}}##Parse and execute a Perl statement
perl -p -e 's/{{foo\nbar}}/{{foobar}}/g' {{path/to/input_file}} > {{path/to/output_file}}##Run a multi-line replacement [e]xpression on a file, and save the result in a specific file
perl -p -i -e 's/{{find}}/{{replace}}/g' {{filename}}##Loo[p] over all lines of a file, editing them [i]n-place using a find/replace [e]xpression
perl -p -i'.old' -e 's/{{find}}/{{replace}}/g' {{filename}}##Run a find/replace expression on a file, saving the original file with a given extension
perl -p -i'.{{extension}}' -e 's/{{regular_expression}}/{{replacement}}/g' {{path/to/file}}##Edit all file lines [i]n-place with a specific replacement [e]xpression and save a file with a new extension
perl -p0e 's/{{foo\nbar}}/{{foobar}}/g' {{input_file}} > {{output_file}}##Run a multiline find/replace expression on a file, and save the result in another file
perl nikto.pl -h {{192.168.0.1}} -p {{443}}##Specify the port number when performing a basic scan
perl nikto.pl -h {{192.168.0.1}} -p {{80,88,443}}##Scan multiple ports in the same scanning session
perl nikto.pl -h {{192.168.0.1}}##Perform a basic Nikto scan against a target host
perl nikto.pl -h {{https://192.168.0.1:443/}}##Scan ports and protocols with full URL syntax
perl nikto.pl -update##Update to the latest plugins and databases
perl {{script.pl}}##Parse and execute a Perl script
pest --coverage --min={{80}}##Run tests with coverage and fail if the coverage is less than the minimum percentage
pest --coverage##Run tests and print the coverage report to stdout
pest --group {{name}}##Run tests annotated with the given group
pest --init##Initialise a standard Pest configuration in the current directory
pest##Run tests in the current directory
pfetch##Display the ASCII art and default fields
pfpod {{port_number}}##Port-forward a pod
pg_ctl -D {{data_directory}} init##Initialize a new PostgreSQL database cluster
pg_ctl -D {{data_directory}} reload##Reload the PostgreSQL server configuration
pg_ctl -D {{data_directory}} restart##Restart a PostgreSQL server
pg_ctl -D {{data_directory}} start##Start a PostgreSQL server
pg_ctl -D {{data_directory}} stop##Stop a PostgreSQL server
pg_dump -Fc {{db_name}} > {{output_file.dump}}##Dump a database into a custom-format archive file
pg_dump -U {{username}} {{db_name}} > {{output_file.sql}}##Same as above, customize username
pg_dump -a {{db_name}} > {{path/to/output_file.sql}}##Dump only database data into an SQL-script file
pg_dump -h {{host}} -p {{port}} {{db_name}} > {{output_file.sql}}##Same as above, customize host and port
pg_dump -s {{db_name}} > {{path/to/output_file.sql}}##Dump only schema (data definitions) into an SQL-script file
pg_dump {{db_name}} > {{output_file.sql}}##Dump database into an SQL-script file
pg_dumpall --data-only > {{path/to/file.sql}}##Dump only database data into an SQL-script file
pg_dumpall --username={{username}} > {{path/to/file.sql}}##Dump all databases using a specific username
pg_dumpall -Fc > {{output_file.dump}}##Dump all databases into a custom-format archive file with moderate compression
pg_dumpall -h {{host}} -p {{port}} > {{output_file.sql}}##Same as above, customize host and port
pg_dumpall -s > {{output_file.sql}}##Dump only schema (data definitions) into an SQL-script file
pg_dumpall > {{path/to/file.sql}}##Dump all databases
pg_restore --clean -d {{db_name}} {{archive_file.dump}}##Clean database objects before creating them
pg_restore --list {{archive_file.dump}}##List database objects included in the archive
pg_restore -U {{username}} -d {{db_name}} {{archive_file.dump}}##Same as above, customize username
pg_restore -d {{db_name}} {{archive_file.dump}}##Restore an archive into an existing database
pg_restore -h {{host}} -p {{port}} -d {{db_name}} {{archive_file.dump}}##Same as above, customize host and port
pg_restore -j {{2}} -d {{db_name}} {{archive_file.dump}}##Use multiple jobs to do the restoring
pgbench --client={{10}} --jobs={{2}} --transactions={{10000}} {{database_name}}##Benchmark a database with 10 clients, 2 worker threads, and 10,000 transactions per client
pgbench --initialize --scale={{50}} {{database_name}}##Initialize a database with a scale factor of 50 times the default size
pgrep --euid root {{process_name}}##Search for processes run by a specific user
pgrep --full "{{process_name}} {{parameter}}"##Search for processes including their command-line options
pgrep {{process_name}}##Return PIDs of any running processes with a matching command string
phan --config-file {{path/to/config.php}}##Specify a config file (defaults to `.phan/config.php`)
phan --directory {{path/to/directory}} --directory {{path/to/another_directory}}##Analyse one or more directories
phan --init --init-level {{level}}##Generate a Phan configuration file using a specific level (1 being strictest to 5 being the least strict)
phan --init##Generate a `.phan/config.php` in the current directory
phan --output-mode {{text|verbose|json|csv|codeclimate|checkstyle|pylint|html}}##Specify the output mode
phan --processes {{number_of_processes}}##Specify the number of parallel processes
phan##Analyse the current directory
phing -D{{property}}={{value}} {{task_name}}##Specify custom properties to use in the build
phing -b {{path/to/log_file}} {{task_name}}##Specify a log file to output to
phing -f {{path/to/build.xml}} {{task_name}}##Specify a custom build file path
phing -i {{path/to/build.xml}}##Initialise a new build file
phing -listener {{class_name}} {{task_name}}##Specify a custom listener class
phing -verbose {{task_name}}##Build using verbose output
phing {{task_name}}##Perform a specific task
phing##Perform the default task in the `build.xml` file
phive help##List all available commands
phive install {{alias|url}} --global##Install a specified Phar globally
phive install {{alias|url}} --target {{path/to/directory}}##Install a specified Phar to a target directory
phive install {{alias|url}}##Install a specified Phar to the local directory
phive list##Display a list of available aliased Phars
phive purge##Remove unused Phar files
phive remove {{alias|url}}##Remove a specified Phar file
phive update##Update all Phar files to the latest version
php --rf {{function_name}}##Display information about a specific function
php -S {{host:port}}##Start a PHP built-in web server in the current directory
php -a##Run PHP interactively
php -i##Display information about the current PHP configuration
php -l {{file}}##Check syntax on (i.e. lint) a PHP script
php -m##Get a list of installed PHP extensions
php -r "{{code}}"##Run PHP code (Notes Don't use <? ?> tags; escape double quotes with backslash)
php artisan help##Display a list of all available commands
php artisan make:model {{ModelName}} --all##Generate a new Eloquent model class with a migration, factory and resource controller
php artisan serve##Start PHP's built-in web server for the current Laravel application
php artisan tinker##Start an interactive PHP command-line interface
php yii {{gii/crud}} --modelClass={{ModelName}} --controllerClass={{ControllerName}}##Generate a controller, views and related files for the CRUD actions on the specified model class
php yii {{help}}##Display a list of all available commands
php yii {{serve}}##Start PHP's built-in web server for the current Yii application
php {{file}}##Parse and execute a PHP script
php-coveralls --config {{path/to/.coveralls.yml}}##Send coverage information to Coveralls with a specific config
php-coveralls --coverage_clover {{path/to/first_clover.xml}} --coverage_clover {{path/to/second_clover.xml}}##Specify multiple Coverage Clover XML files to upload
php-coveralls --env {{test|dev|prod}}##Send coverage information to Coveralls with a specific environment name
php-coveralls --exclude-no-stmt##Send coverage information to Coveralls excluding source files with no executable statements
php-coveralls --json_path {{path/to/coveralls-upload.json}}##Output the JSON that will be sent to Coveralls to a specific file
php-coveralls --root_dir {{path/to/directory}}##Send coverage information to Coveralls for a specific directory
php-coveralls --verbose##Send coverage information to Coveralls with verbose output
php-coveralls##Send coverage information to Coveralls
phpbu --configuration={{path/to/configuration_file.xml}}##Run backups using a specific configuration file
phpbu --limit={{backup_task_name}}##Only run the specified backups
phpbu --simulate##Simulate the actions that would have been performed
phpbu##Run backups using the default `phpbu.xml` configuration file
phpcbf -i##Display a list of installed coding standards
phpcbf {{path/to/directory}} --bootstrap {{file(s)}}##A comma-separated list of files to load before processing
phpcbf {{path/to/directory}} --extensions {{file_extension(s)}}##Specify comma-separated file extensions to include when sniffing
phpcbf {{path/to/directory}} --standard {{standard}}##Specify a coding standard to validate against
phpcbf {{path/to/directory}} -l##Don't recurse into subdirectories
phpcbf {{path/to/directory}}##Fix issues in the specified directory (defaults to the PEAR standard)
phpcpd --exclude {{path/to/excluded_directory}} {{path/to/file_or_directory}}##Exclude a directory from analysis (must be relative to the source)
phpcpd --fuzzy {{path/to/file_or_directory}}##Analyse using fuzzy matching for variable names
phpcpd --log-pmd {{path/to/log_file}} {{path/to/file_or_directory}}##Output the results to a PHP-CPD XML file
phpcpd --min-lines {{number_of_lines}} {{path/to/file_or_directory}}##Specify a minimum number of identical lines (defaults to 5)
phpcpd --min-tokens {{number_of_tokens}} {{path/to/file_or_directory}}##Specify a minimum number of identical tokens (defaults to 70)
phpcpd {{path/to/file_or_directory}}##Analyse duplicated code for a specific file or directory
phpcs -i##Display a list of installed coding standards
phpcs {{path/to/directory}} --bootstrap {{file(s)}}##A comma-separated list of files to load before processing
phpcs {{path/to/directory}} --config-set {{key}} {{value}}##Set config variables to be used during the process
phpcs {{path/to/directory}} --extensions {{file_extension(s)}}##Specify comma-separated file extensions to include when sniffing
phpcs {{path/to/directory}} --report {{format}}##Specify the format of the output report (e.g. `full`, `xml`, `json`, `summary`)
phpcs {{path/to/directory}} --standard {{standard}}##Specify a coding standard to validate against
phpcs {{path/to/directory}} -l##Don't recurse into subdirectories
phpcs {{path/to/directory}}##Sniff the specified directory for issues (defaults to the PEAR standard)
phpdox --collector##Only run the metadata collection process
phpdox --file {{path/to/phpdox.xml}}##Generate documentation using a specific configuration file
phpdox --generator##Only run the documentation generator process
phpdox --skel##Display an annotated skeleton configuration XML file
phpdox##Generate documentation for the current working directory
phpenv global {{version}}##Set the global PHP version
phpenv install {{version}}##Install a PHP version globally
phpenv local --unset##Unset the local PHP version
phpenv local {{version}}##Set the local PHP version, which overrides the global version
phpenv rehash##Refresh shim files for all PHP binaries known to `phpenv`
phpenv version##Display the currently active PHP version
phpenv versions##List all installed PHP versions
phpize --clean##Delete files previously created by phpize
phpize##Prepare the PHP extension in the current directory for compiling
phploc {{path/to/directory}} --count-tests##Count PHPUnit test case classes and test methods
phploc {{path/to/directory}} --exclude {{path/to/exclude_directory}}##Exclude a specific directory from analysis
phploc {{path/to/directory}} --log-csv {{path/to/file}}##Log the results to a specific CSV file
phploc {{path/to/directory}} --log-xml {{path/to/file}}##Log the results to a specific XML file
phploc {{path/to/directory}} --names {{files}}##Include only specific files from a comma-separated list (globs are allowed)
phploc {{path/to/directory}} --names-exclude {{files}}##Exclude specific files from a comma-separated list (globs are allowed)
phploc {{path/to/directory}}##Analyse a directory and print the result
phpmd {{path/to/file_or_directory}} {{xml|text|html}} {{rulesets}} --exclude {{directory_patterns}}##Exclude the specified comma-separated directories
phpmd {{path/to/file_or_directory}} {{xml|text|html}} {{rulesets}} --minimumpriority {{priority}}##Specify the minimum priority threshold for rules
phpmd {{path/to/file_or_directory}} {{xml|text|html}} {{rulesets}} --reportfile {{path/to/report_file}}##Output the results to a file instead of stdout
phpmd {{path/to/file_or_directory}} {{xml|text|html}} {{rulesets}} --strict##Ignore the use of warning-suppressive PHPDoc comments
phpmd {{path/to/file_or_directory}} {{xml|text|html}} {{rulesets}} --suffixes {{extensions}}##Include only the specified extensions in analysis
phpmd {{path/to/file_or_directory}} {{xml|text|html}} {{rulesets}}##Scan a file or directory for problems using comma-separated rulesets
phpmd##Display a list of available rulesets and formats
phpspec describe {{class_name}}##Create a specification for a class
phpspec run --fake##Enable fake return values
phpspec run --no-code-generation##Disable code generation prompts
phpspec run -b {{path/to/bootstrap_file}}##Run specifications using a specific bootstrap file
phpspec run -c {{path/to/configuration_file}}##Run specifications using a specific configuration file
phpspec run {{path/to/class_specification_file}}##Run a single specification
phpspec run##Run all specifications in the "spec" directory
phpstan analyse --help##Display available options for analysis
phpstan analyse {{path/to/directory}} --autoload-file {{path/to/autoload_file}}##Specify an autoload file to load before analysing
phpstan analyse {{path/to/directory}} --configuration {{path/to/config}}##Analyse a directory using a configuration file
phpstan analyse {{path/to/directory}} --level {{level}}##Analyse using a specific rule level (0-7, higher is stricter)
phpstan analyse {{path/to/directory}} --memory-limit {{memory_limit}}##Specify a memory limit during analysis
phpstan analyse {{path/to/directory}}##Analyse the specified space-separated directories
phpstorm --line {{line_number}} {{path/to/file}}##Open a file at a specific line
phpstorm diff {{path/to/left_file}} {{path/to/right_file}}##View the differences between two files
phpstorm {{path/to/directory}}##Open a specific directory
phpstorm {{path/to/file}}##Open a file
phpunit --coverage-html {{directory}}##Run tests and generate a coverage report in HTML
phpunit --group {{name}}##Run tests annotated with the given group
phpunit {{path/to/TestFile.php}}##Run tests in a specific file
phpunit##Run tests in the current directory. Note Expects you to have a 'phpunit.xml'
piactl background {{enable|disable}}##Enable or disable the Private Internet Access daemon in the background
piactl connect##Connect to Private Internet Access
piactl disconnect##Disconnect from Private Internet Access
piactl get region##Display the current VPN region
piactl get regions##List all available VPN regions
piactl login {{path/to/login_file}}##Log in to Private Internet Access
piactl logout##Log out of Private Internet Access
piactl set region {{region}}##Set your VPN region
pic -T {{pdf}} {{path/to/input.pic}} | groff -{{me}} -T {{pdf}} > {{path/to/output.pdf}}##Typeset input with pictures to PDF using the [me] macro package
pic {{path/to/input.pic}} > {{path/to/output.roff}}##Process input with pictures, saving the output for future typesetting with groff to PostScript
picard --long-version##Display the version of Picard installed
picard {{path/to/file1.mp3}} {{path/to/file2.mp3}}##Open a set of files
picard##Start Picard
pickle convert {{path/to/directory}}##Convert an existing PECL extension configuration to a Pickle configuration file
pickle install {{extension_name}}##Install a specific PHP extension
pickle release {{path/to/directory}}##Package a PECL extension for release
pickle validate {{path/to/directory}}##Validate a PECL extension
pigz -0 -p{{4}} {{filename}}##Compress a file using no compression and 4 processors
pigz -9 {{filename}}##Compress a file using the best compression method
pigz -d {{archive.gz}}##Decompress a file
pigz -l {{archive.tar.gz}}##List the contents of an archive
pigz {{filename}}##Compress a file with default options
ping -O {{host}}##Also display a message if no response was received
ping -a {{host}}##Ping host and ring the bell when a packet is received (if your terminal supports it)
ping -c {{count}} {{host}}##Ping a host only a specific number of times
ping -i {{seconds}} {{host}}##Ping host, specifying the interval in seconds between requests (default is 1 second)
ping -n {{host}}##Ping host without trying to lookup symbolic names for addresses
ping {{host}}##Ping host
ping6 -a {{host}}##Ping a host and ring the bell when a packet is received (if your terminal supports it)
ping6 -c {{count}} {{host}}##Ping a host only a specific number of times
ping6 -i {{seconds}} {{host}}##Ping a host, specifying the interval in seconds between requests (default is 1 second)
ping6 -n {{host}}##Ping a host without trying to lookup symbolic names for addresses
ping6 {{host}}##Ping a host
pinky {{user}} -f##Omit the column headings in short format
pinky {{user}} -l##Display details in the long format
pinky {{user}} -lb##Omit the user's home directory and shell in long format
pinky {{user}} -lh##Omit the user's project file in long format
pinky {{user}}##Display details for a specific user
pinky##Display details about the current user
pinta {{path/to/image1 path/to/image2 ...}}##Open specific files
pinta##Start Pinta
pio --help##Show help and list subcommands
pio --version##Print the version number and exit
pio access grant {{guest|maintainer|admin}} {{username}} {{resource_urn}}##Grant a user access to a resource
pio access list {{username}}##Show all resources that a user or team has access to and the access level
pio access private {{resource_urn}}##Restrict access to a resource to specific users or team members
pio access public {{resource_urn}}##Allow all users access to a resource
pio access revoke {{username}} {{resource_urn}}##Remove a user's access to a resource
pio account destroy##Permanently delete your PlatformIO account and related data
pio account forgot --username {{username_or_email}}##Reset your password using your username or email
pio account login --username {{username}} --password {{password}}##Log in to your PlatformIO account
pio account logout##Log out of your PlatformIO account
pio account register --username {{username}} --email {{email}} --password {{password}} --firstname {{firstname}} --lastname {{lastname}}##Register a new PlatformIO account
pio account show##Show detailed information about your PlatformIO account
pio account update --username {{username}} --email {{email}} --firstname {{firstname}} --lastname {{lastname}} --current-password {{password}}##Update your PlatformIO profile
pio boards --installed##List only boards from installed platforms
pio boards##List all available boards
pio check --environment {{environment}}##Perform an analysis check for a specific environment
pio check --project-dir {{project_dir}}##Perform a basic analysis check on a specific project
pio check --severity {{low|medium|high}}##Perform an analysis check and only report a specified defect severity type
pio check --verbose##Perform an analysis check and show detailed information when processing environments
pio check##Perform a basic analysis check on the current project
pio ci --board {{board}} {{path/to/project}}##Build a PlatformIO project and specify a specific board (`pio boards` lists all of them)
pio ci --build-dir {{path/to/build_directory}} {{path/to/project}}##Build a PlatformIO project in a specific directory
pio ci --keep-build-dir {{path/to/project}}##Build a PlatformIO project and don't delete the build directory
pio ci --lib {{path/to/library_directory}} {{path/to/project}}##Build a PlatformIO project and specify specific libraries
pio ci --project-conf {{path/to/platformio.ini}}##Build a PlatformIO project using a specific configuration file
pio ci {{path/to/project}}##Build a PlatformIO project in the default system temporary directory and delete it afterwards
pio debug --environment {{environment}}##Debug a specific environment
pio debug --interface={{gdb}} {{gdb_options}}##Debug a PlatformIO project using the `gdb` debugger
pio debug --project-conf {{path/to/platformio.ini}}##Debug a PlatformIO project using a specific configuration file
pio debug --project-dir {{path/to/platformio_project}}##Debug a specific PlatformIO project
pio debug##Debug the PlatformIO project in the current directory
pio device list --logical##List all available logical devices
pio device list##List all available serial ports
pio device monitor --baud {{57600}}##Start an interactive device monitor and set a specific baud rate (defaults to 9600)
pio device monitor --eol {{CRLF|CR|LF}}##Start an interactive device monitor and set a specific EOL character (defaults to `CRLF`)
pio device monitor --port {{/dev/ttyUSBX}}##Start an interactive device monitor and listen to a specific port
pio device monitor##Start an interactive device monitor
pio home --host {{ip_address}}##Bind to a specific IP address (defaults to 127.0.0.1)
pio home --no-open##Do not automatically open PlatformIO Home in the default web browser
pio home --port {{port}}##Use a specific HTTP port (defaults to 8008)
pio home --session-id {{id}}##Specify a unique session identifier to keep PlatformIO Home isolated from other instances and protected from 3rd party access
pio home --shutdown-timeout {{time}}##Automatically shutdown the server on timeout (in seconds) when no clients are connected
pio home##Open PlatformIO Home in the default web browser
pio lib builtin##List built-in libraries based on installed development platforms and their frameworks
pio lib install {{library}}##Install a library
pio lib list##List installed libraries
pio lib search {{keyword}}##Search for existing libraries
pio lib show {{library}}##Show details about a library
pio lib stats##Show PlatformIO library registry statistics
pio lib uninstall {{library}}##Uninstall a library
pio lib update##Update installed libraries
pio org add {{organization_name}} {{username}}##Add a user to an organization
pio org create {{organization_name}}##Create a new organization
pio org destroy {{organization_name}}##Delete an organization
pio org list##List all organizations the current user is a member of and their owners
pio org remove {{organization_name}} {{username}}##Remove a user from an organization
pio org update --orgname {{new_organization_name}} --email {{new_email}} --displayname {{new_display_name}} {{organization_name}}##Update the name, email or display name of an organization
pio package pack --output {{path/to/package.tar.gz}}##Create a package tarball from the current directory
pio package publish --private##Publish the current directory and restrict public access to it
pio package publish {{path/to/package.tar.gz}} --released-at "{{2021-04-08 21:15:38}}"##Publish a package with a custom release date (UTC)
pio package publish {{path/to/package.tar.gz}}##Publish a package
pio package publish##Create and publish a package tarball from the current directory
pio package unpublish --undo {{package_name}}@{{version}}##Undo the removal, putting all versions or a specific version of the package back into the registry
pio package unpublish {{package_name}}##Remove all versions of a published package from the registry
pio package unpublish {{package_name}}@{{version}}##Remove a specific version of a published package from the registry
pio platform frameworks##List all supported frameworks
pio platform install {{platform}}##Install a development platform
pio platform list##List all installed development platforms
pio platform search {{platform}}##Search for existing development platforms
pio platform show {{platform}}##Show details about a development platform
pio platform uninstall {{platform}}##Uninstall a development platform
pio platform update##Update installed development platforms
pio project config##Print the configuration of a project
pio project init --board {{ATmega328P|uno|...}}##Initialize a new PlatformIO project, specifying a board ID
pio project init --project-dir {{path/to/project_directory}}##Initialize a new PlatformIO project in a specific directory
pio project init --project-option="{{option}}={{value}}" --project-option="{{option}}={{value}}"##Initialize a new PlatformIO based project, specifying one or more project options
pio project init##Initialize a new PlatformIO project
pio remote --agent {{agent_name1}} --agent {{agent_name2}} device list##List devices from specified Agents (omit `--agent` to specify all Agents)
pio remote --agent {{agent_name}} device monitor##Connect to the serial port of a remote device
pio remote --agent {{agent_name}} run##Run all targets on a specified Agent
pio remote --agent {{agent_name}} test##Run all tests in all environments on a specific Agent
pio remote --agent {{agent_name}} update##Update installed core packages, development platforms and global libraries on a specific Agent
pio remote agent list##List all active Remote Agents
pio remote agent start --name {{agent_name}} --share {{example1@example.com}} --share {{example2@example.com}}##Start a new Remote Agent with a specific name and share it with friends
pio run --environment {{environment1}} --environment {{environment2}}##Run all targets of specified environments
pio run --list-targets --environment {{environment}}##List all available project targets of a specific environment
pio run --list-targets##List all available project targets
pio run --project-conf {{path/to/platformio.ini}}##Run the targets of a specified configuration file
pio run --target {{target1}} --target {{target2}}##Run specified targets
pio run##Run all targets
pio settings get {{setting}}##Display the name, value and description of a specific PlatformIO setting
pio settings get##Display the names, values and descriptions of all PlatformIO settings
pio settings reset##Reset the values of all modified settings to their factory defaults
pio settings set {{setting}} {{value}}##Set a specific setting value
pio system completion install##Install shell completion for the current shell (supports Bash, Fish, Zsh and PowerShell)
pio system completion uninstall##Uninstall shell completion for the current shell
pio system info##Display system-wide PlatformIO information
pio system prune --cache##Remove only cached data
pio system prune --dry-run##List unused PlatformIO data that would be removed but do not actually remove it
pio system prune##Remove unused PlatformIO data
pio team add {{organization_name}}:{{team_name}} {{username}}##Add a new user to a team
pio team create --description {{description}} {{organization_name}}:{{team_name}}##Create a new team with the specified description
pio team destroy {{organization_name}}:{{team_name}}##Delete a team
pio team list {{organization_name}}##List all teams in an organization
pio team list##List all teams that the user is part of and their members
pio team remove {{organization_name}}:{{team_name}} {{username}}##Remove a user from a team
pio team update --description {{new_description}} {{organization_name}}:{{team_name}}##Change the description of a team
pio team update --name {{new_team_name}} {{organization_name}}:{{team_name}}##Rename a team
pio test --environment {{environment1}} --environment {{environment2}}##Test only specific environments
pio test --filter "{{pattern}}"##Run only tests whose name matches a specific glob pattern
pio test --ignore "{{pattern}}"##Ignore tests whose name matches a specific glob pattern
pio test --project-conf {{path/to/platformio.ini}}##Specify a custom configuration file for running the tests
pio test --upload-port {{upload_port}}##Specify a port for firmware uploading
pio test##Run all tests in all environments of the current PlatformIO project
pio update --core-packages##Update core packages only (skips platforms and libraries)
pio update --dry-run##Check for new versions of packages, platforms and libraries but do not actually update them
pio update##Perform a full update of all packages, development platforms and global libraries
pio upgrade --dev##Update PlatformIO to the latest development (unstable) version
pio upgrade##Update PlatformIO to the latest version
pio {{subcommand}} --help##Show help for a specific subcommand
pip freeze > {{requirements.txt}}##Save installed packages to file
pip install --editable {{.}}##Install the local package in the current directory in develop (editable) mode
pip install --find-links {{url|path/to/file}}##Install packages from an URL or local file archive (.tar.gz | .whl)
pip install --requirement {{path/to/requirements.txt}}##Install packages listed in a file
pip install --upgrade {{package_name}}##Upgrade a package
pip install --user {{package}}##Install a package to the user's directory instead of the system-wide default location
pip install {{package_name}}##Install a package
pip install {{package_name}}##Install a package (see `pip install` for more install examples)
pip install {{package_name}}=={{package_version}}##Install a specific version of a package
pip show {{package_name}}##Show installed package info
pip uninstall --requirement {{path/to/requirements.txt}}##Uninstall packages listed in a specific file
pip uninstall --yes {{package_name}}##Uninstall package without asking for confirmation
pip uninstall {{package_name}}##Uninstall a package
pip uninstall {{package_name}}##Uninstall a package
pip3 freeze > {{requirements.txt}}##Save the list of installed packages to a file
pip3 install --requirement {{requirements.txt}}##Install packages from a file
pip3 install --upgrade {{package_name}}##Upgrade a package
pip3 install {{package_name}}##Install a package
pip3 install {{package_name}}=={{package_version}}##Install a specific version of a package
pip3 search {{package_name}}##Find available packages
pip3 show {{package_name}}##Show installed package info
pip3 uninstall {{package_name}}##Uninstall a package
pipenv --three##Create a new project using Python 3
pipenv install --dev##Install all the dependencies for a project (including dev packages)
pipenv install {{package_name}}##Install a package
pipenv install##Install all the dependencies for a project
pipenv lock --requirements##Generate a `requirements.txt` (list of dependencies) for a project
pipenv shell##Start a shell within the created virtual environment
pipenv uninstall {{package_name}}##Uninstall a package
pipenv##Create a new project
pipx install {{package}}##Install a package in a virtual environment and add entry points to path
pipx list##List installed packages
pipx run --spec {{httpx-cli}} {{httpx}} {{http://www.github.com}}##Run an app in a temporary virtual environment with a package name different from the executable
pipx run {{pycowsay}} {{moo}}##Run an app in a temporary virtual environment
pixiecore quick --help##Get a list of all available boot images for quick mode
pixiecore {{quick}} ubuntu --dhcp-no-bind##Start a new PXE boot server which provides an Ubuntu boot image
pixiecore {{quick}} xyz --dhcp-no-bind##Start a PXE boot server which provides a `netboot.xyz` boot image
pkill "{{process_name}}"##Kill all processes which match
pkill --oldest "{{firefox}}"##Kill the main `firefox` process to close the browser
pkill -9 "{{process_name}}"##Force kill matching processes (can't be blocked)
pkill -USR1 "{{process_name}}"##Send SIGUSR1 signal to processes which match
pkill -f "{{command_name}}"##Kill all processes which match their full command instead of just the process name
plantuml -config {{config.cfg}} {{diagram.puml}}##Render a diagram with the configuration file
plantuml -help##Display help
plantuml -o {{path/to/output}} {{diagram.puml}}##Render a diagram to the output directory
plantuml -t {{format}} {{diagram.puml}}##Render a diagram in given format (e.g. `png`, `pdf`, `svg`, `txt`)
plantuml {{diagram1.puml}} {{diagram2.puml}}##Render diagrams to default format (PNG)
plantuml {{path/to/diagrams}}##Render all diagrams of a directory
play {{audiofile1}} {{audiofile2}}##Play the given audio files
play {{audiofile}} reverse##Play the given audio in reverse
play {{audiofile}} speed 2.0##Play the given audio at twice the speed
play {{audiofile}}##Play the given audio file
plenv global {{version}}##Set the global Perl version (used unless a local or shell version takes priority)
plenv help {{command}}##Display help for a command
plenv local {{version}}##Set the local application-specific Perl version (used in the current directory and all directories below it)
plenv shell {{version}}##Set the shell-specific Perl version (used for the current session only)
plenv version##Show the currently selected Perl version and how it was selected
plenv versions##List all available installed Perl versions
plenv##Display help
plesk bin domain --list##List all hosted domains
plesk conf {{panel.ini}}##Open the Plesk main configuration file in the default editor
plesk db##Start the interactive MySQL console
plesk log {{panel.log}}##Start watching for changes in the `panel.log` file
plesk login##Generate an auto login link for the admin user and print it
plesk version##Show product version information
pm2 list##List processes
pm2 monit##Monitor all processes
pm2 restart {{myapp}}##Restart a process
pm2 resurrect##Resurrect previously dumped processes
pm2 save##Dump all processes for resurrecting them later
pm2 start {{app.js}} --name {{myapp}}##Start a process with a name that can be used for later operations
pm2 stop {{myapp}}##Stop a process
pngcheck -c {{image.png}}##Print information for an image with [c]olorized output
pngcheck -cvt {{image.png}}##Print [v]erbose information for an image
pngcheck -s {{image.png}}##[s]earch for PNGs within a specific file and display information about them
pngcheck -x {{image.png}}##Search for PNGs within another file and e[x]tract them
pngcheck {{image.png}}##Print a summary for an image (width, height, and color depth)
pngcrush -d {{path/to/output}} *.png##Compress all PNGs and output them to the specified directory
pngcrush -rem allb -brute -reduce {{in.png}} {{out.png}}##Compress PNG file with all 114 available algorithms and pick the best result
pngcrush {{in.png}} {{out.png}}##Compress a PNG file
pnpm init##Interactively create a `package.json` file
pnpm install --dev {{module_name}}##Download a package and add it to the list of dev dependencies in `package.json`
pnpm install -g {{module_name}}##Download a package and install it globally
pnpm install {{module_name}}@{{version}}##Download a specific version of a package and add it to the list of dependencies in `package.json`
pnpm install##Download all the packages listed as dependencies in `package.json`
pnpm list -g --depth={{0}}##List top-level [g]lobally installed modules
pnpm list##Print a tree of locally installed modules
pnpm uninstall {{module_name}}##Uninstall a package and remove it from the list of dependencies in `package.json`
pnpx --help##Display help
pnpx --package {{package_name}} {{module_name}}##Execute a specific binary from a given npm module, in case the module has multiple binaries
pnpx {{module_name}}##Execute the binary from a given npm module
podman exec --interactive --tty {{container_name}} {{sh}}##Open a shell inside an already running container
podman logs --follow {{container_name}} {{container_id}}##Display the logs of one or more containers and follow log output
podman ps --all##List all containers (both running and stopped)
podman ps##Print out information about containers
podman pull {{image_name}}:{{image_tag}}##Pull an image from a registry (defaults to the Docker Hub)
podman rm {{container_name}} {{container_id}}##Remove one or more stopped containers
podman start {{container_name}} {{container_id}}##Start one or more containers
podman stop {{container_name}} {{container_id}}##Stop one or more running containers
poetry add --dev {{dependency}}##Install a development dependency and its subdependencies
poetry add {{dependency}}##Install a dependency and its subdependencies
poetry init##Interactively initialize the current directory as a new Poetry project
poetry new {{project_name}}##Create a new Poetry project in the directory with a specific name
poetry run {{command}}##Execute a command inside the project's virtual environment
poetry update##Get the latest version of all dependencies and update `poetry.lock`
popd +N##Remove the Nth directory (starting from zero to the left from the list printed with `dirs`)
popd -N##Remove the Nth directory (starting from zero to the right from the list printed with `dirs`)
popd##Remove the top directory from the stack and cd to it
popeye --context={{context}}##Scan specific Kubernetes context
popeye -f {{spinach.yaml}}##Use a spinach configuration file for scanning
popeye -n {{namespace}}##Scan a specific namespace
popeye##Scan the current Kubernetes cluster
postcss --help##Display available options and examples
postcss {{path/to/file}} --dir {{path/to/directory}}##Parse and transform a CSS file and output to a specific directory
postcss {{path/to/file}} --output {{path/to/file}}##Parse and transform a CSS file and output to a specific file
postcss {{path/to/file}} --parser {{parser}}##Specify a custom PostCSS parser
postcss {{path/to/file}} --replace##Parse and transform a CSS file in-place
postcss {{path/to/file}} --syntax {{syntax}}##Specify a custom PostCSS syntax
postcss {{path/to/file}} --watch##Watch for changes to a CSS file
postcss {{path/to/file}}##Parse and transform a CSS file
pppd##Start the daemon
pprof -http={{localhost:8080}} {{./fibbo}} {{./fibbo-profile.pb.gz}}##Run a web server that serves a web interface on top of `pprof`
pprof -svg {{./fibbo}} {{./fibbo-profile.pb.gz}}##Generate a graph and open it on a web browser
pprof -top {{./fibbo}} {{./fibbo-profile.pb.gz}}##Generate a text report from a specific profiling file, on fibbo binary
pprof {{./fibbo}} {{./fibbo-profile.pb.gz}}##Run pprof in interactive mode to be able to manually launch `pprof` on a file
pprof {{http://localhost:8080/debug/pprof}}##Fetch a profile from an HTTP server and generate a report
pr +{{2}}:{{5}} -l {{page_length}} {{file1}} {{file2}} {{file3}}##Print, beginning at page 2 up to page 5, with a given page length (including header and footer)
pr -h "{{header}}" {{file1}} {{file2}} {{file3}}##Print with a custom centered header
pr -m -T {{file1}} {{file2}} {{file3}}##Print all files together, one in each column, without a header or footer
pr -n -D "{{format}}" {{file1}} {{file2}} {{file3}}##Print with numbered lines and a custom date format
pr -o {{offset}} -W {{width}} {{file1}} {{file2}} {{file3}}##Print with an offset for each line and a truncating custom page width
pr {{file1}} {{file2}} {{file3}}##Print multiple files with a default header and footer
pre-commit clean##Clean pre-commit cache
pre-commit install##Install pre-commit into your Git hooks
pre-commit run --all-files##Run pre-commit hooks on all files, staged or unstaged
pre-commit run##Run pre-commit hooks on all staged files
prettier --check {{path/to/file}}##Check if a specific file has been formatted
prettier --config {{path/to/config_file}} {{path/to/file}}##Run with a specific configuration file
prettier --single-quote --trailing-comma {{none}} --write {{path/to/file_or_directory}}##Format files or directories recursively using single quotes and no trailing commas
prettier --write {{path/to/file_or_directory}}##Format a file or directory, replacing the original
prettier {{path/to/file}}##Format a file and print the result to stdout
pretty-bytes --help##Display help and usage information
pretty-bytes {{1337}}##Convert numeric bytes value to a human-readable string
printenv --null {{HOME}}##Display the value of a variable and end with NUL instead of newline
printenv {{HOME}}##Display the value of a specific variable
printenv##Display key-value pairs of all environment variables
printf "header1 header2\nbar foo\n" | column --output-width {{30}}##Format the output of a command for a 30 characters wide display
printf "header1 header2\nbar foo\n" | column --table##Split columns automatically and auto-align them in a tabular format
printf "header1,header2\nbar,foo\n" | column --table --separator {{,}}##Specify the column delimiter character for the `--table` option (e.g. "," for CSV) (defaults to whitespace)
printf "header1\nbar\nfoobar\n" | column --output-width {{30}} --fillrows##Fill rows before filling columns
printf "{{%s\n}}" "{{Hello world}}"##Print a text message
printf "{{\e[1;34m%.3d\e[0m\n}}" {{42}}##Print an integer in bold blue
printf "{{\u20AC %.2f\n}}" {{123.4}}##Print a float number with the Unicode Euro sign
printf "{{var1: %s\tvar2: %s\n}}" "{{$VAR1}}" "{{$VAR2}}"##Print a text message composed with environment variables
printf -v {{myvar}} {{"This is %s = %d\n" "a year" 2016}}##Store a formatted message in a variable (does not work on zsh)
progpilot --configuration {{path/to/configuration.yml}}##Specify a custom configuration file
progpilot {{path/to/file_or_directory}}##Analyse a specific file or directory
progpilot##Analyse the current directory
progress --wait --command {{firefox}}##Include an estimate of time remaining for completion
progress -q##Show the progress of running coreutils in quiet mode
progress##Show the progress of running coreutils
prompt off##Transfer multiple files without prompting for confirmation on every file
promtool check config {{config_file.yml}}##Check if the config files are valid or not (if present report errors)
promtool check rules {{rules_file.yml}}##Check if the rule files are valid or not (if present report errors)
promtool test rules {{test_file.yml}}##Unit tests for rules config
protector -dry-run {{branches_regex}} -repos {{organization/repository}}##Use the dry run to see what would be protected (can also be used for freeing)
protector -free {{branches_regex}} -repos {{organization/repository}}##Free branches of a GitHub repository (delete branch protection rules)
protector {{branches_regex}} -repos {{organization/repository}}##Protect branches of a GitHub repository (create branch protection rules)
protoc --csharp_out={{path/to/c#_output_directory}} --js_out={{path/to/js_output_directory}} {{input_file.proto}}##Generate code for multiple languages
protoc --java_out={{path/to/output_directory}} --proto_path={{path/to/import_search_path}} {{input_file.proto}}##Generate Java code from a `.proto` file that imports other `.proto` files
protoc --python_out={{path/to/output_directory}} {{input_file.proto}}##Generate Python code from a `.proto` file
protocol##Print the version of the current protocoll
ps --sort size##Sort processes by memory consumption
ps --user $(id -u) -F##List all processes of the current user in extra full format
ps --user $(id -u) f##List all processes of the current user as a tree
ps -o ppid= -p {{pid}}##Get the parent PID of a process
ps aux | fzf##Start fzf for running processes
ps aux | grep {{string}}##Search for a process that matches a string
ps aux | peco##Start peco for running processes
ps aux | sk##Start skim for running processes
ps aux##List all running processes
ps auxww##List all running processes including the full command string
psalm --config {{path/to/psalm.xml}}##Analyse a project with a specific configuration file
psalm --init##Generate a Psalm configuration
psalm --show-info##Include informational findings in the output
psalm --stats##Analyse a project and display statistics
psalm --threads {{4}}##Analyse a project in parallel with 4 threads
psalm {{path/to/file_or_directory}}##Analyse a specific directory or file
psalm##Analyse the current working directory
psgrep -n {{process_name}}##Find process lines containing a specific string, excluding headers
psgrep -s {{process_name}}##Search using a simplified format (PID, user, command)
psgrep {{process_name}}##Find process lines containing a specific string
psql -c '{{query}}' {{database}}##Execute a single SQL query or PostgreSQL command on the given database (useful in shell scripts)
psql -h {{host}} -p {{port}} -U {{username}} -W {{database}}##Connect to the database; user will be prompted for password
psql -h {{host}} -p {{port}} -U {{username}} {{database}}##Connect to the database on given server host running on given port with given username, without a password prompt
psql {{database}} -f {{file.sql}}##Execute commands from a file on the given database
psql {{database}}##Connect to the database. It connects to localhost using default port 5432 with default user as currently logged in user
pssh -H {{host1}} -H {{host2}} -o {{path/to/output_dir}} {{hostname -i}}##Run a command and save the output to separate files
pssh -i -H "{{host1}} {{host2}}" {{hostname -i}}##Run a command on two hosts, and print its output on each server inline
pssh -i -h {{path/to/hosts_file}} -A -l {{root_username}} {{hostname -i}}##Run a command as root (this asks for the root password)
pssh -i -h {{path/to/hosts_file}} -p {{10}} '{{cd dir; ./script.sh; exit}}'##Run a command limiting the number of parallel connections to 10
pssh -i -h {{path/to/hosts_file}} -x "{{-O VisualHostKey=yes}}" {{hostname -i}}##Run a command with extra SSH arguments
pssh -i -h {{path/to/hosts_file}} {{hostname -i}}##Run a command on multiple hosts, specified in a new-line separated file
psysh --config {{path/to/file}}##Use a specific configuration file
psysh --cwd {{path/to/directory}}##Open a shell in a specific directory
psysh##Open a shell in the current directory
pt --depth={{2}} -e '{{^ba[rz]*$}}'##Find files whose contents match the regular expression, up to 2 directories deep
pt -G='{{\.bar$}}' {{foo}}##Find "foo" in files with a given extension using a regular expression
pt -c {{foo}}##Find files containing "foo" and display count of matches in each file
pt -wi {{foo}}##Find files containing "foo" as a whole word and ignore its case
pt {{foo}}##Find files containing "foo" and print the files with highlighted matches
ptargrep "{{search_pattern}}" {{path/to/file1}} {{path/to/file2}} {{path/to/file3}}##Search for a pattern within multiple files
ptargrep "{{search_pattern}}" {{path/to/file}}##Search for a pattern within a tar file
ptargrep --basename "{{search_pattern}}" {{path/to/file}}##Extract to the current directory using the basename of the file from the archive
ptargrep --ignore-case "{{search_pattern}}" {{path/to/file}}##Search for a case-insensitive pattern matching within a tar file
pueue --help##Show general help and available subcommands
pueue --version##Check the version of pueue
pueue add -- {{command --arg -f}}##Pass a list of flags or arguments to a command when enqueuing
pueue add --after {{9}} {{12}} --group "{{torrents}}" -- {{transmission-cli torrent_file.torrent}}##Add a command and start it after commands 9 and 12 finish successfully
pueue add --immediate --group "{{CPU_intensive}}" -- {{ffmpeg -i input.mp4 frame_%d.png}}##Add a command to a group and start it immediately, see `pueue group` to manage groups
pueue add --label "{{compressing large file}}" --delay "{{wednesday 10:30pm}}" -- "{{7z a compressed_file.7z large_file.xml}}"##Add a command with a label after some delay has passed, see `pueue enqueue` for valid datetime formats
pueue add --stashed -- {{rsync --archive --compress /local/directory /remote/directory}}##Add a command but do not start it if it's the first in a queue
pueue add {{command}}##Add any command to the default queue
pueue clean --successful-only##Only clean commands that finished successfully
pueue clean##Remove finished tasks and clear logs
pueue edit {{task_id}} --path##Edit the path from which a task is executed
pueue edit {{task_id}}##Edit a task, see `pueue status` to get the task ID
pueue enqueue --delay "4 months" {{task_id}}##Enqueue a stashed task after four months
pueue enqueue --delay {{2021-02-19}} {{task_id}}##Enqueue a stashed task on 2021-02-19
pueue enqueue --delay {{60}} {{task_id}}##Enqueue a stashed task after 60 seconds
pueue enqueue --delay {{wednesday}} {{task_id}}##Enqueue a stashed task next Wednesday
pueue enqueue --help##List all available date/time formats
pueue enqueue {{task_id}} {{task_id}}##Enqueue multiple stashed tasks at once
pueue enqueue {{task_id}}##Enqueue a task to be executed when preceding tasks finish
pueue follow --err {{task_id}}##Follow the stderr of a task
pueue follow {{task_id}}##Follow the output of a task (stdout + stderr)
pueue group --add "{{group_name}}"##Add a custom group
pueue group --remove "{{group_name}}"##Remove a group and move its tasks to the default group
pueue group##Show all groups with their statuses and number of parallel jobs
pueue help {{subcommand}}##Show help for a specific subcommand
pueue help##Show all available subcommands and flags
pueue kill --all##Kill all tasks across all groups and pause all groups
pueue kill --children {{task_id}}##Kill a task and terminate all its child processes
pueue kill --group {{group_name}}##Kill all tasks in a group and pause the group
pueue kill {{task_id}}##Kill a specific task
pueue kill##Kill all tasks in the default group
pueue log --lines {{number_of_lines}} {{task_id}}##Print a specific number of lines from the tail of output
pueue log {{task_id}} {{task_id}}##Show the last few lines of output from several tasks
pueue log {{task_id}}##Show the full output of a task
pueue log##Show the last few lines of output from all tasks
pueue parallel --group {{group_name}} {{maximum_number_of_parallel_tasks}}##Set the maximum number of tasks allowed to run in parallel, in a specific group
pueue parallel {{max_number_of_parallel_tasks}}##Set the maximum number of tasks allowed to run in parallel, in the default group
pueue pause --all##Pause all tasks and prevent all groups from starting new tasks
pueue pause --children {{task_id}}##Pause a running task and stop all its direct children
pueue pause --group {{group_name}}##Pause all tasks in a group and prevent it from starting new tasks
pueue pause {{task_id}}##Pause a running task
pueue pause##Pause all tasks in the default group
pueue remove {{task_id}} {{task_id}}##Remove multiple tasks at once
pueue remove {{task_id}}##Remove a killed or finished task
pueue reset --children##Kill all tasks, terminate their children, and reset everything
pueue reset --force##Reset without asking for confirmation
pueue reset##Kill all tasks and remove everything (logs, status, groups, task IDs)
pueue restart --all-failed --stashed##Restart all failed tasks and stash them
pueue restart --edit {{task_id}}##Edit a command before restarting
pueue restart --edit-path {{task_id}}##Restart a specific task from a different path
pueue restart --in-place {{task_id}}##Restart a task in-place (without enqueuing as a separate task)
pueue restart --start-immediately {{task_id}} {{task_id}}##Restart multiple tasks at once, and start them immediately (do not enqueue)
pueue restart {{task_id}}##Restart a specific task
pueue send {{task_id}} "{{input}}"##Send input to a running command
pueue send {{task_id}} {{y}}##Send confirmation to a task expecting y/N (e.g. apt, cp)
pueue shutdown##Shutdown the daemon without a service manager
pueue start --all --children##Resume all tasks and start their children
pueue start group {{group_name}}##Resume all tasks in a specific group
pueue start {{task_id}} {{task_id}}##Resume multiple tasks at once
pueue start {{task_id}}##Resume a specific task
pueue start {{task_id}}##Start a stashed task immediately
pueue start##Resume all tasks in the default group
pueue stash {{task_id}} {{task_id}}##Stash multiple tasks at once
pueue stash {{task_id}}##Stash an enqueued task
pueue status --group {{group_name}}##Show the status of a specific group
pueue status##Show the status of all tasks
pueue switch {{task_id1}} {{task_id2}}##Switch the priority of two tasks
pueue {{subcommand}}##Execute a pueue subcommand
puppet --help##Display help
puppet --version##Check the Puppet version
puppet agent --disable "{{message}}"##Disable the agent
puppet agent --enable##Enable the agent
puppet agent --test --evaltrace##Log every resource being evaluated (even if nothing is being changed)
puppet agent --test --noop##Run the agent in dry-mode
puppet agent --test --server {{puppetserver_fqdn}} --serverport {{port}} --waitforcert {{poll_time}}##Register a node at a Puppet server and apply the received catalog
puppet agent --test##Run the agent once in the foreground, then exit
puppet agent##Run the agent in the background (uses settings from `puppet.conf`)
puppet apply --execute {{code}}##Execute puppet code
puppet apply --modulepath {{path/to/directory}} --hiera_config {{path/to/file}} {{path/to/manifest}}##Use a specific module and hiera config file
puppet apply {{path/to/manifest}}##Apply a manifest
puppet help {{subcommand}}##Display help for a subcommand
puppet {{subcommand}}##Execute a Puppet subcommand
pushd +4##Rotate stack by making the 5th element the top of the stack
pushd {{directory}}##Switch to directory and push it on the stack
pushd##Switch first and second directories on the stack
put {{/path/local_file}}##Transfer local file to the remote system
pv -EE {{path/to/faulty_media}} > image.img##Read an erroneous file, skip errors as `dd conv=sync,noerror` would
pv -L 1K -S {{maximum_file_size_to_be_read}}##Stop reading after reading specified amount of data, rate limit to 1K/s
pv -cN in {{big_text_file}} | grep {{pattern}} | pv -cN out > {{filtered_file}}##Filter a file, see both progress and amount of output data
pv -d {{PID}}##Attach to an already running process and see its file reading progress
pv {{file}}##Print the contents of the file and display a progress bar
pve-firewall compile##Compile and print all firewall rules
pve-firewall localnet##Show information about the local network
pve-firewall restart##Restart the Proxmox VE Firewall service
pve-firewall simulate##Simulate all firewall rules
pve-firewall start##Start the Proxmox VE Firewall service
pve-firewall status##Show the status of Proxmox VE Firewall
pve-firewall stop##Stop the Proxmox VE Firewall service
pvecm add {{hostname_or_ip}}##Add the current node to an existing cluster
pvecm addnode {{node}}##Add a node to the cluster configuration (internal use)
pvecm apiver##Return the version of the cluster join API available on this node
pvecm create {{clustername}}##Generate new cluster configuration
pvecm delnode {{node}}##Remove a node from the cluster configuration
pvecm nodes##Display the local view of the cluster nodes
pvecm status##Display the local view of the cluster status
pveperf##Show CPU and hard disk performance data for the hard disk mounted at `/`
pwd -L##Print the current logical directory
pwd -P##Print the current directory, and resolve all symlinks (i.e. show the "physical" path)
pwd##Print the current directory
pwgen -c {{length}}##Generate password with at least one capital letter in them
pwgen -s {{length}}##Generate secure, hard-to-memorize passwords
pwgen -y {{length}}##Generate random password with s[y]mbols
pwsh -Command {{command}}##Execute a command and then exit
pwsh -ExecutionPolicy {{AllSigned|Bypass|Default|RemoteSigned|Restricted|Undefined|Unrestricted}}##Set the execution policy for the current session
pwsh -File {{path/to/file.ps1}}##Execute a script and then exit
pwsh##Start an instance of PowerShell
py-spy dump --pid {{pid}}##Dump the call stack of a running process
py-spy record -o {{path/to/profile.svg}} --pid {{pid}}##Produce an SVG flame graph of the function call execution time
py-spy top -- python {{path/to/file.py}}##Start a program and show a live view of the functions that take the most execution time
py-spy top --pid {{pid}}##Show a live view of the functions that take the most execution time of a running process
pycodestyle --first {{file.py}}##Show only the first occurrence of an error
pycodestyle --show-pep8 {{file.py}}##Show the specific PEP 8 text for each error
pycodestyle --show-source {{file.py}}##Show the source code for each error
pycodestyle {{file.py}}##Check the style of a single file
pycodestyle {{file1.py}} {{file2.py}} {{file3.py}}##Check the style of multiple files
pyenv activate {{virtualenv_name}}##Activate a virtual environment
pyenv commands##List all available commands
pyenv deactivate##Deactivate the virtual environment
pyenv global {{2.7.10}}##Set Python version to be used globally in the current machine
pyenv install {{2.7.10}}##Install a Python version under the `${PYENV_ROOT}/versions` directory
pyenv local {{2.7.10}}##Set Python version to be used in the current directory and all directories below it
pyenv uninstall {{2.7.10}}##Uninstall a Python version under the `${PYENV_ROOT}/versions` directory
pyenv versions##List all Python versions under the `${PYENV_ROOT}/versions` directory
pyenv virtualenv {{3.6.6}} {{virtualenv_name}}##Create a new Python 3.6.6 virtual environment
pyenv virtualenvs##List all existing virtual environments
pyflakes check {{path/to/file}}.py##Check a single Python file
pyflakes checkPath {{path/to/directory}}##Check Python files in a specific directory
pyflakes checkRecursive {{path/to/directory}}##Check Python files in a directory recursively
pyflakes iterSourceCode {{path/to/directory_1}} {{path/to/directory_2}}##Check all Python files found in multiple directories
pygmentize -L formatters##List available output formats
pygmentize -L lexers##List available lexers (processors for input languages)
pygmentize -f html -O "full,linenos=True" -o {{output_file.html}} {{input_file}}##Output an HTML file, with additional formatter options (full page, with line numbers)
pygmentize -f html -o {{output_file.html}} {{input_file.py}}##Save output to a file in HTML format
pygmentize -l {{javascript}} {{input_file}}##Explicitly set the language for syntax highlighting
pygmentize {{file.py}}##Highlight file syntax and print to standard output (language is inferred from the file extension)
pylint --disable {{C,W,no-error,design}} {{path/to/file}}##Lint a file and disable a specific error code
pylint --rcfile {{path/to/pylintrc}} {{path/to/file.py}}##Lint a file and use a configuration file (usually named `pylintrc`)
pylint {{path/to/file.py}}##Show lint errors in a file
pypy -c "{{expression}}"##Execute a Python expression
pypy -i {{path/to/file.py}}##Execute script as part of an interactive shell
pypy -m pdb {{path/to/file.py}}##Interactively debug a Python script
pypy -m pip install {{package_name}}##Install a package using pip
pypy -m {{module}} {{arguments}}##Run library module as a script (terminates option list)
pypy {{path/to/file.py}}##Execute script in a given Python file
pypy##Start a REPL (interactive shell)
python -c "{{expression}}"##Execute a Python expression
python -i {{path/to/file.py}}##Execute a specific Python file and start a REPL
python -m {{http.server}}##Start the built-in HTTP server on port 8000 in the current directory
python -m {{module}} {{arguments}}##Run the script of the specified library module
python -m {{pdb}} {{path/to/file.py}}##Interactively debug a Python script
python -m {{pip}} install {{package_name}}##Install a package using `pip`
python sqlmap.py -u "{{http://www.target.com/vuln.php?id=1}}"##Run sqlmap against a single target URL
python sqlmap.py -u "{{http://www.target.com/vuln.php}}" --auth-type {{Basic}} --auth-cred "{{testuser:testpass}}"##Provide user credentials for HTTP protocol authentication
python sqlmap.py -u "{{http://www.target.com/vuln.php}}" --data="{{id=1}}"##Send data in a POST request (`--data` implies POST request)
python sqlmap.py -u "{{http://www.target.com/vuln.php}}" --data="{{query=foobar;id=1}}" --param-del="{{;}}"##Change the parameter delimiter (& is the default)
python sqlmap.py -u "{{http://www.target.com/vuln.php}}" --random-agent##Select a random `User-Agent` from `./txt/user-agents.txt` and use it
python {{path/to/file.py}}##Execute a specific Python file
python##Start a REPL (interactive shell)
q "SELECT * FROM {{path/to/file}} f1 JOIN {{path/to/other_file}} f2 ON (f1.c1 = f2.c1)"##Join two files (aliased as `f1` and `f2` in the example) on column `c1`, a common column
q -D{{delimiter}} -O "SELECT {{column}} as {{alias}} from {{path/to/file}}"##Format output using an output delimiter with an output header line (note command will output column names based on the input file header or the column aliases overridden in the query)
q -d',' "SELECT * from {{path/to/file}}"##Query `.csv` file by specifying the delimiter as ','
q -d{{delimiter}} -H "SELECT * from {{path/to/file}}"##Query file with header row
q -t "SELECT * from {{path/to/file}}"##Query `.tsv` file
q then y##Exit
q##Exit
q##Exit
q##Exit
q##Exit CliFM
q##Quit `gpg-tui`
q##Quit ed
qcp --option swap {{*.jpg}}##Copy files, but swap the positions of the source and the target filenames in the editor
qcp {{*.jpg}}##Copy multiple JPG files
qcp {{source_file}}##Copy a single file (open an editor with the source filename on the left and the target filename on the right)
qdbus --help##Display help
qdbus {{org.kde.Solid.PowerManagement}} {{/org/kde/Solid/PowerManagement/Actions/BrightnessControl}} {{org.kde.Solid.PowerManagement.Actions.BrightnessControl.brightness}}##Display the current brightness value in a KDE Plasma session
qdbus {{org.kde.Solid.PowerManagement}} {{/org/kde/Solid/PowerManagement/Actions/BrightnessControl}} {{org.kde.Solid.PowerManagement.Actions.BrightnessControl.setBrightness}} {{5000}}##Set a specific brightness to a KDE Plasma session
qdbus {{org.kde.kglobalaccel}} {{/component/kmix}} {{invokeShortcut}} "{{increase_volume}}"##Invoke volume up shortcut in a KDE Plasma session
qdbus {{service_name}} {{/path/to/object}} {{method_name}} {{argument1}} {{argument2}}##Execute a specific method passing arguments and display the returned value
qdbus {{service_name}} {{/path/to/object}}##List methods, signals and properties available on a specific object
qdbus {{service_name}}##List object paths for a specific service
qdbus##List available service names
qemu-img convert -f {{vmdk}} -O {{qcow2}} {{path/to/file/foo.vmdk}} {{path/to/file/foo.qcow2}}##Convert a VMware .vmdk disk image to a KVM .qcow2 disk image
qemu-img create {{image_name.img}} {{gigabytes}}G##Create disk image with a specific size (in gigabytes)
qemu-img info {{image_name.img}}##Show information about a disk image
qemu-img map {{image_name.img}}##Dump the allocation state of every sector of the specified disk image
qemu-img resize {{image_name.img}} {{gigabytes}}G##Increase or decrease image size
qemu-system-i386 -hda /dev/{{storage_device}}##Boot from physical device (e.g. from USB to test bootable medium)
qemu-system-i386 -hda {{image_name.img}} -cdrom {{os_image.iso}} -boot d##Boot QEMU instance with a live ISO image
qemu-system-i386 -hda {{image_name.img}}##Boot from image emulating i386 architecture
qemu-system-i386 -m 256 -hda image_name.img -cdrom os-image.iso -boot d##Specify amount of RAM for instance
qemu-system-x86_64 -hda {{image_name.img}}##Boot from image emulating x64 architecture
qmv --option swap {{*.jpg}}##Move files, but swap the positions of the source and the target filenames in the editor
qmv --recursive {{path/to/directory}}##Move all files and directories inside a directory
qmv -d {{path/to/directory1}} {{path/to/directory2}} {{path/to/directory3}}##Move multiple directories
qmv {{*.jpg}}##Move multiple JPG files
qmv {{source_file}}##Move a single file (open an editor with the source filename on the left and the target filename on the right)
qpdf --empty --pages {{file1.pdf}} {{1,6-8}} {{file2.pdf}} {{3,4,5}} -- {{output.pdf}}##Merge (concatenate) given pages from a list of PDF files and save the result as a new PDF
qpdf --empty --pages {{file1.pdf}} {{file2.pdf}} {{file3.pdf}} -- {{output.pdf}}##Merge (concatenate) all the pages of a list of PDF files and save the result as a new PDF
qpdf --empty --pages {{input.pdf}} {{1-3,5,6-10}} -- {{output.pdf}}##Extract pages 1-3, 5 and 6-10 from a PDF file and save them as another one
qpdf --password={{password}} --decrypt {{input.pdf}} {{output.pdf}}##Remove the password from a password-protected file
qpdf --rotate={{90:2,4,6}} --rotate={{180:7-8}} {{input.pdf}} {{output.pdf}}##Rotate certain pages of a PDF with a given angle
qpdf --split-pages=n {{input.pdf}} {{out_%d.pdf}}##Write each group of n pages to a separate output file with a given filename pattern
qrencode -o {{path/to/output_file.png}} -r {{path/to/input_file}}##Convert an input file to a QR code and save to an output file
qrencode -o {{path/to/output_file.png}} {{string}}##Convert a string to a QR code and save to an output file
qrencode -t ansiutf8 {{string}}##Convert a string to a QR code and print it in terminal
qtcreator -git-show {{commit}}##Start Qt Creator and show the diff from a specific commit
qtcreator -lastsession##Start Qt Creator and restore the last session
qtcreator -noload {{all}}##Start Qt Creator but don't load any plugins
qtcreator -noload {{plugin}}##Start Qt Creator but don't load the specified plugin
qtcreator -presentationMode##Start Qt Creator in presentation mode with pop-ups for keyboard shortcuts
qtcreator##Start Qt Creator
quilt add {{path/to/file}}##Add a file to the current patch
quilt import {{path/to/filename.patch}}##Import an existing patch from a file
quilt new {{filename.patch}}##Create a new patch
quilt pop -a##Remove all applied patches
quilt push -a##Apply all the patches in the series file
quilt refresh##After editing the file, refresh the current patch with the changes
quit##Exit a telnet session
quit##Quit the interactive shell
quota -g##Print quotas for the groups of which the current user is a member
quota -q##Quiet output (only display quotas on filesystems where usage is over quota)
quota -s##Show disk quotas in human-readable units for the current user
quota -v##Verbose output (also display quotas on filesystems where no storage is allocated)
qutebrowser --basedir {{path/to/directory}}##Open qutebrowser with a specified storage directory
qutebrowser --restore {{session_name}}##Restore a named session of a qutebrowser instance
qutebrowser --set {{content.geolocation}} {{true|false}}##Open a qutebrowser instance with temporary settings
qutebrowser --target {{auto|tab|tab-bg|tab-silent|tab-bg-silent|window|private-window}}##Launch qutebrowser, opening all URLs using the specified method
qutebrowser --temp-basedir --json-logging##Open qutebrowser with a temporary base directory and print logs to stdout as JSON
r sel##Remove the previously selected files (use `t` to send the files to the recycle bin instead)
r##Refresh `gpg-tui`
r2e add {{feed_name}} {{feed_URI}}##Subscribe to a feed
r2e delete {{index}}##Delete a feed at a specified index
r2e list##List all feeds
r2e new {{email_address}}##Create a new feed database that sends email to an email address
r2e run##Send new stories to an email address
rabin2 -I {{path/to/binary}}##Display general information about a binary (architecture, type, endianness)
rabin2 -i {{path/to/binary}}##Display symbols imported from libraries
rabin2 -j -I {{path/to/binary}}##Display the output in JSON
rabin2 -l {{path/to/binary}}##Display linked libraries
rabin2 -z {{path/to/binary}}##Display strings contained in the binary
racket --eval "{{expression}}"##Execute a Racket expression
racket --lib {{module_name}} --main {{arguments}}##Run module as a script (terminates option list)
racket -I typed/racket##Start a REPL (interactive shell) for the `typed/racket` hashlang
racket {{path/to/script.rkt}}##Execute a Racket script
racket##Start a REPL (interactive shell)
raco docs {{search_terms ...}}##Search local documentation
raco help##Display help
raco pkg install --auto {{package_source}}##Install a package, automatically installing dependencies
raco pkg install##Install the current directory as a package
raco setup {{collection1 collection2 ...}}##Build (or rebuild) bytecode, documentation, executables, and metadata indexes for collections
raco test {{path/to/tests1.rkt path/to/tests2.rkt ...}}##Run tests in files
radare2 -d {{path/to/binary}}##Debug a program
radare2 -i {{path/to/script.r2}} {{path/to/binary}}##Run a script before entering the interactive CLI
radare2 -nw {{path/to/binary}}##Open a file in write mode without parsing the file format headers
rails --version##Check current version of rails
rails console##Open console to interact with application from command-line
rails db##Access the database console
rails db:create##Create the databases defined in the current environment
rails db:drop##Destroy the databases defined in the current environment
rails db:migrate##Run pending migrations
rails db:migrate:status##View the status of each migration file
rails db:rollback##Rollback the last migration
rails db:seed##Fill the current database with data defined in `db/seeds.rb`
rails db:setup##Create databases, load the schema, and initialize with seed data
rails destroy controller {{Posts}}##Destroy a controller named Posts
rails destroy migration {{CreatePosts}}##Destroy a migration that creates Posts
rails destroy model {{Post}}##Destroy a model named Post
rails destroy scaffold {{Post}}##Destroy a scaffold for a model named Post
rails destroy##List all available generators to destroy
rails generate controller {{Posts}} {{index}} {{show}} {{new}} {{create}}##Generate a new controller named Posts with actions index, show, new and create
rails generate migration {{AddCategoryToPost}} {{category:string}}##Generate a new migration that adds a category attribute to an existing model called Post
rails generate model {{Post}} {{title:string}} {{body:text}}##Generate a new model named Post with attributes title and body
rails generate scaffold {{Post}} {{title:string}} {{body:text}}##Generate a scaffold for a model named Post, predefining the attributes title and body
rails generate##List all available generators
rails new "{{project_name}}"##Create a new rails project
rails routes --expanded##List all routes in an expanded format
rails routes -c {{posts|Posts|Blogs::PostsController}}##List routes that map to a specified controller
rails routes -g {{posts_path|GET|/posts}}##List routes partially matching URL helper method name, HTTP verb, or URL path
rails routes##List all routes
rails server -p "{{port}}"##Start local server for current project on a specified port
rails server##Start local server for current project on port 3000
rainbowstream##Open RainbowStream
ranger --confdir={{path/to/directory}}##Change the configuration directory
ranger --datadir={{path/to/directory}}##Change the data directory
ranger --profile##Print CPU usage statistics on exit
ranger --show-only-dirs##Show only directories
ranger##Launch ranger
rapper -i rdfxml -o turtle {{file}}##Convert an RDF/XML document to Turtle
rapper -i turtle -c {{file}}##Count the number of triples in a Turtle file
rar a -hp{{password}} {{path/to/archive_name.rar}} {{path/to/file_or_directory}}##Encrypt file data and headers with password
rar a -m{{compression_level}} {{path/to/archive_name.rar}} {{path/to/file_or_directory}}##Use a specific compression level (0-5)
rar a -p{{password}} {{path/to/archive_name.rar}} {{path/to/file_or_directory}}##Password protect the resulting archive
rar a -v{{50M}} -R {{path/to/archive_name.rar}} {{path/to/file_or_directory}}##Split the archive into parts of equal size (50M)
rar a {{path/to/archive_name.rar}} {{path/to/directory}}##Archive a directory
rar a {{path/to/archive_name.rar}} {{path/to/file1}} {{path/to/file2}} {{path/to/file3}}##Archive 1 or more files
rbac-lookup --gke##View all RBAC bindings along with IAM roles (if you are using GKE)
rbac-lookup -k {{user|group|serviceaccount}}##View all RBAC bindings filtered by subject
rbac-lookup -o wide##View all RBAC bindings along with the source role binding
rbac-lookup {{search_term}}##View RBAC bindings that match a given expression
rbac-lookup##View all RBAC bindings
rbash -c "{{command}}"##Execute a command and then exit
rbash -e {{path/to/script.sh}}##Execute commands from a script, stopping at the first error
rbash -s##Read and execute commands from stdin
rbash -x {{path/to/script.sh}}##Execute a script, printing each command before executing it
rbash {{path/to/script.sh}}##Execute a script
rbash##Start an interactive shell session
rbenv global {{version}}##Use a specific Ruby version across the whole system
rbenv install --list##Display a list of the latest stable versions for each Ruby
rbenv install {{version}}##Install a Ruby version
rbenv local {{version}}##Use a specific Ruby version for an application/project directory
rbenv uninstall {{version}}##Uninstall a Ruby version
rbenv version##Display the currently selected Ruby version
rbenv versions##Display a list of installed Ruby versions
rbenv whence {{executable}}##Display all Ruby versions that contain the specified executable
rbt diff##Display the diff that will be sent to Review Board
rbt land {{branch_name}}##Land a change in a local branch or on a review request
rbt patch {{review_request_id}}##Patch your tree with a change on a review request
rbt post {{change_number}}##Post changes to Review Board
rbt setup-repo##Set up RBTool to talk to a repository
rc -lp {{port}}##Start listening on a specific port
rc {{host}} {{port}} -r {{shell}}##Start a reverse shell
rclone --dry-run delete {{remote_name}}:{{path/to/file_or_directory}}##Delete remote file or directory (use `--dry-run` to test, remove it to actually delete)
rclone copy {{path/to/source_file_or_directory}} {{remote_name}}:{{path/to/destination_directory}}##Copy file or directory from local source to remote destination
rclone copy {{remote_name}}:{{path/to/source_file_or_directory}} {{path/to/destination_directory}}##Copy file or directory from remote source to local destination
rclone lsf {{remote_name}}:{{path/to/directory}}##List contents of a directory on an rclone remote
rclone mount {{remote_name}}:{{path/to/directory}} {{path/to/mount_point}}##Mount rclone remote (experimental)
rclone move {{path/to/file_or_directory}} {{remote_name}}:{{path/to/directory}}##Move file or directory from local source to remote destination
rclone sync {{path/to/file_or_directory}} {{remote_name}}:{{path/to/directory}}##Sync local source to remote destination, changing the destination only
rdfind -deleteduplicates true -ignoreempty false {{path/to/directory}}##Delete all duplicates and do not ignore empty files
rdfind -dryrun true {{path/to/directory}}##Identify all duplicates in a given directory and output a summary
rdfind -makehardlinks true {{path/to/directory}}##Replace all duplicates with hardlinks
rdfind -makesymlinks true {{path/to/directory}}##Replace all duplicates with symlinks/soft links
react-native init {{project_name}}##Initialize a new React Native project in a directory of the same name
react-native log-android##Start `logkitty` and print logs to stdout
react-native log-ios##Start `tail system.log` for an iOS simulator and print logs to stdout
react-native run-android --variant={{release}}##Build the current application in `release` mode and start it on a connected Android device or emulator
react-native run-android##Build the current application and start it on a connected Android device or emulator
react-native run-ios##Build the current application and start it on an iOS simulator
react-native start --max-workers {{count}}##Specify the maximum number of workers for transforming files (default is the number of CPU cores)
react-native start --no-interactive##Disable interactive mode
react-native start --port {{3000}}##Start the server in a custom port (defaults to 8081)
react-native start --reset-cache##Start the metro bundler with a clean cache
react-native start --reset-cache##Start the metro bundler with a clean cache
react-native start --verbose##Start the server in verbose mode
react-native start##Start the metro bundler
react-native start##Start the server that communicates with connected devices
read -a {{array}}##Store each of the next lines you enter as values of an array
read -d {{new_delimiter}} {{variable}}##Use a specific character as a delimiter instead of a new line
read -n {{character_count}} {{variable}}##Specify the number of maximum characters to be read
read -p "{{Enter your input here: }}" {{variable}}##Display a prompt before the input
read -r {{variable}}##Do not let backslash (\) act as an escape character
read -s {{variable}}##Do not echo typed characters (silent mode)
read {{variable}}##Store data that you type from the keyboard
readlink -f {{filename}}##Get the absolute path to a file
readlink {{filename}}##Get the actual file to which the symlink points
realpath --canonicalize-existing {{path/to/file_or_directory}}##Require all path components to exist
realpath --logical {{path/to/file_or_directory}}##Resolve ".." components before symlinks
realpath --no-symlinks {{path/to/file_or_directory}}##Disable symlink expansion
realpath --quiet {{path/to/file_or_directory}}##Suppress error messages
realpath {{path/to/file_or_directory}}##Display the absolute path for a file or directory
recsel -e "name ~ '{{regular_expression}}' && version ~ '{{regular_expression}}'" {{data.rec}}##Use a predicate to match a name and a version
recsel -e "{{field_name}} ~ '{{regular_expression}}' {{data.rec}}"##Use "~" to match a string with a given regular expression
recsel -p name,version {{data.rec}}##Extract name and version field
rector levels##Display a list of available levels
rector process {{path/to/directory}} --dry-run##Process a directory without applying changes (dry run)
rector process {{path/to/directory}} --level {{level_name}}##Process a directory with a specific level
rector process {{path/to/directory}} --with-style##Process a directory and apply coding standards
rector process {{path/to/directory}}##Process a specific directory
redis-cli -a {{password}}##Specify a password
redis-cli -c##Connect to the local cluster
redis-cli -h {{host}} -p {{port}}##Connect to a remote server specifying a port number
redis-cli -h {{host}}##Connect to a remote server on the default port (6379)
redis-cli -u {{uri}}##Connect to a remote server specifying a URI
redis-cli {{redis_command}}##Execute Redis command
redis-cli##Connect to the local server
redis-server --daemonize yes##Start Redis server, using the default port, as a background process
redis-server --loglevel {{warning|notice|verbose|debug}}##Start Redis server with verbose logging
redis-server --port {{port}} --daemonize yes##Start Redis server, using the specified port, as a background process
redis-server {{path/to/redis.conf}}##Start Redis server with a custom configuration file
redis-server##Start Redis server, using the default port (6379), and write logs to stdout
redshift -O {{temperature}}##Turn on Redshift with a constant unchanging color temperature
redshift -b {{0.7}}:{{0.4}}##Turn on Redshift with 70% screen brightness during day and 40% brightness at night
redshift -g {{red}}:{{green}}:{{blue}}##Turn on Redshift with custom gamma levels (between 0 and 1)
redshift -l {{latitude}}:{{longitude}}##Turn on Redshift with a manually specified custom location
redshift -t {{5700}}:{{3600}}##Turn on Redshift with 5700K temperature during day and 3600K at night
reflac --best {{path/to/directory}}##Enable maximum compression (very slow)
reflac --preserve {{path/to/directory}}##Preserve file modification times
reflac --recursive {{path/to/directory}}##Recurse into subdirectories
reflac --verbose {{path/to/directory}}##Display filenames as they are processed
reflac {{path/to/directory}}##Recompress a directory of FLAC files
reflex -- echo {}##Substitute the filename that changed in
reflex --inverse-regex='{{^dir/}}' {{command}}##Ignore a directory when watching for changes
reflex --regex='{{\.go$}}' {{go run .}}##Compile and run Go application if any `.go` file changes
reflex --start-service=true {{command}}##Run command when reflex starts and restarts on file changes
reflex make##Rebuild with `make` if any file changes
rekor-cli get --uuid={{0e81b4d9299e2609e45b5c453a4c0e7820ac74e02c4935a8b830d104632fd2d1}}##Get information regarding entries in the Transparency Log
rekor-cli search --artifact {{path/to/file.ext}}##Search the Rekor index to find entries by Artifact
rekor-cli search --sha {{6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b}}##Search the Rekor index to find entries by a specific hash
rekor-cli upload --artifact {{path/to/file.ext}} --signature {{path/to/file.ext.sig}} --pki-format={{x509}} --public-key={{path/to/key.pub}}##Upload an artifact to Rekor
rename {{original_filename}} {{new_filename}}##Rename a file on the remote server
renice -n {{niceness_value}} --pgrp {{process_group}}##Change priority of all processes that belong to a process group
renice -n {{niceness_value}} -p {{pid}}##Change priority of a running process
renice -n {{niceness_value}} -u {{user}}##Change priority of all processes owned by a user
repren --dry-run --rename --literal --from '{{find_string}}' --to '{{replacement_string}}' {{*.png}}##Do a dry-run renaming a directory of PNGs with a literal string replacement
repren --from '{{([0-9]+) example_string}}' --to '{{replacement_string \1}}' {{*.csv}}##Do a find-and-replace on the contents of a directory of CSV files
repren --patterns {{path/to/patfile.ext}} --full {{*.txt}}##Do both a find-and-replace and a rename operation at the same time, using a pattern file
repren --rename --dry-run --from '{{regular_expression}}' --to '{{replacement_string}}' {{*.jpg}} {{*.jpeg}}##Do a dry-run renaming a directory of JPEGs with a regular expression
repren --rename --insensitive --patterns {{path/to/patfile.ext}} *##Do a case-insensitive rename
restart##Restart the interactive shell
restic --repo {{path/to/repository}} backup {{path/to/directory}}##Backup a directory to the repository
restic --repo {{path/to/repository}} restore {{latest|snapshot_id}} --target {{path/to/target}}##Restore a specific backup snapshot to a target directory
restic --repo {{path/to/repository}} restore {{snapshot_id}} --target {{path/to/target}} --include {{path/to/restore}}##Restore a specific path from a specific backup to a target directory
restic --repo {{path/to/repository}} snapshots##Show backup snapshots currently stored in the repository
restic forget --keep-last 1 --prune##Clean up the repository and keep only the most recent snapshot of each unique backup
restic init --repo {{path/to/repository}}##Initialize a backup repository in the specified local directory
resume export {{path/to/html_or_pdf}}##Export a resume locally in a stylized HTML or PDF format
resume init##Create a new `resume.json` file in the current working directory
resume serve##Start a web server that serves a local `resume.json`
resume validate##Validate a `resume.json` against schema tests to ensure it complies with the standard
resume {{torrent_id}}##Resume a torrent
rev {{file}}##Reverse an entire file and print to stdout
rg --files-with-matches {{regular_expression}}##Only list matched files (useful when piping to other commands)
rg --fixed-strings -- {{string}}##Search a literal string pattern
rg --invert-match {{regular_expression}}##Show lines that do not match the given regular expression
rg --no-ignore --hidden {{regular_expression}}##Search for regular expressions recursively in the current directory, including hidden files and files listed in `.gitignore`
rg --type {{filetype}} {{regular_expression}}##Search for a regular expression only in a certain filetype (e.g. HTML, CSS, etc.)
rg {{regular_expression}} --glob {{glob}}##Search for a regular expression in files matching a glob (e.g. `README.*`)
rg {{regular_expression}} {{set_of_subdirs}}##Search for a regular expression only in a subset of directories
rg {{regular_expression}}##Recursively search the current directory for a regular expression
rga --help##Display detailed help
rga --rga-accurate {{regular_expression}}##Search for a pattern using the mime type instead of the file extension (slower)
rga --rga-adapters={{adapter1,adapter2}} {{regular_expression}}##Change which adapters to use (e.g. ffmpeg, pandoc, poppler etc.)
rga --rga-list-adapters##List available adapters
rga {{regular_expression}}##Search recursively for a pattern in all files in the current directory
rich --print {{"Hello [green on black]Stylized[/green on black] [bold]World[/bold]"}} --{{left|center|right}} --width {{10}}##Display text with formatting tags, custom alignment, and line width
rich {{https://raw.githubusercontent.com/Textualize/rich-cli/main/README.md}} --markdown --pager##Display contents from a URL
rich {{path/to/file.md}} --export-html {{path/to/file.html}}##Export a file as HTML
rich {{path/to/file.py}} --line-number --guides##Add line numbers, and indentation guides
rich {{path/to/file.py}} --pager##Display a file in an interactive pager
rich {{path/to/file.py}} --theme {{monokai}}##Apply a theme
rich {{path/to/file.py}}##Display a file with syntax highlighting
rm -i {{file(s)}}##Interactively remove multiple files, with a prompt before every removal
rm -r {{path/to/directory}}##Recursively remove a directory and all its subdirectories
rm -rf {{path/to/directory}}##Forcibly remove a directory, without prompting for confirmation or showing error messages
rm -v {{path/to/directory/*}}##Remove files in verbose mode, printing a message for each removed file
rm {{path/to/file}} {{path/to/another/file}}##Remove files from arbitrary locations
rm {{torrent_id}}##Remove a torrent from the daemon
rmdir -p {{path/to/directory}}##Remove the target and its parent directories (useful for nested dirs)
rmdir {{path/to/directory}}##Remove directory, provided it is empty. Use `rm -r` to remove non-empty directories
rmvirtualenv {{virtualenv_name}}##Remove a `virtualenv`
roave-backward-compatibility-check --format=markdown > {{results.md}}##Check for breaking changes and output to Markdown
roave-backward-compatibility-check --from={{git_reference}}##Check for breaking changes since a specific tag
roave-backward-compatibility-check --to={{git_reference}}##Check for breaking changes between the last tag and a specific reference
roave-backward-compatibility-check##Check for breaking changes since the last tag
robo --simulate {{foo}}##Simulate running a specific command
robo list##List available commands
robo {{foo}}##Run a specific command
roll "{{2d20>10}}"##Roll 2 20-sided dice until the result is bigger than 10
roll --sum-series {{3{2d5}}}##Roll 2 5-sided dice 3 times and show the total sum
roll --verbose {{2{2d12}}}##Roll 2 12-sided dice 2 times and show every roll
roll {{3d}}##Roll 3 6-sided dice and sums the results
roll {{4d6h3}}##Roll 4 6-sided dice, keep the 3 highest results and sum the results
roll {{d8 + 3}}##Roll 1 8-sided die, add 3 and sum the results
route -n##Display the information of route table
rr record {{path/to/binary --arg1 --arg2}}##Record an application
rr replay##Replay latest recorded execution
rs##Manually restart nodemon (note nodemon must already be active for this to work)
rspec --init##Initialise an .rspec config and a spec helper file
rspec --seed {{seed_number}}##Run specs with a specific seed
rspec {{path/to/directory}}##Run a specific directory of tests
rspec {{path/to/file1}} {{path/to/file2}}##Run multiple test files
rspec {{path/to/file}}##Run a specific test file
rspec {{path/to/file}}:{{83}}##Run a specific test in a file (e.g. the test starts on line 83)
rspec##Run all tests
rsstail -1 -u {{url}}##Show feed and exit
rsstail -pl -u {{url}}##Include publication date and link
rsstail -r -u {{url}}##Show the feed in reverse chronological order (newer at the bottom)
rsstail -u {{url}} -i {{interval_in_seconds}}##Set update interval
rsstail -u {{url}}##Show the feed of a given URL and wait for new entries appearing at the bottom
rsync -azvhP {{path/to/local_file}} {{remote_host}}:{{path/to/remote_directory}}##Transfer file in [a]rchive (to preserve attributes) and compressed ([z]ipped) mode with [v]erbose and [h]uman-readable [P]rogress
rsync -e 'ssh -p {{port}}' --info=progress2 {{remote_host}}:{{path/to/remote_file}} {{path/to/local_file}}##Transfer file over SSH using a different port than the default and show global progress
rsync -e ssh --delete {{remote_host}}:{{path/to/remote_file}} {{path/to/local_file}}##Transfer file over SSH and delete remote files that do not exist locally
rsync -r {{remote_host}}:{{path/to/remote_directory}} {{path/to/local_directory}}##Transfer a directory and all its children from a remote to local
rsync -r {{remote_host}}:{{path/to/remote_directory}}/ {{path/to/local_directory}}##Transfer directory contents (but not the directory itself) from a remote to local
rsync -rauL {{remote_host}}:{{path/to/remote_directory}} {{path/to/local_directory}}##Transfer a directory [r]ecursively, in [a]rchive to preserve attributes, resolving contained soft[l]inks , and ignoring already transferred files [u]nless newer
rsync {{path/to/local_file}} {{remote_host}}:{{path/to/remote_directory}}##Transfer file from local to remote host
rsync {{remote_host}}:{{path/to/remote_file}} {{path/to/local_directory}}##Transfer file from remote host to local
rt {{tweet_id}}##Retweet the tweet with given ID (ID is beside the time)
rtl_sdr -f {{100000000}} - | {{aplay}}##Pipe data to another program
rtl_sdr -f {{100000000}} -S -##Use synchronous output
rtl_sdr -f {{100000000}} -b {{9999999}} -##Specify the output block size
rtl_sdr -f {{100000000}} -d {{0}} -##Specify the device by its index
rtl_sdr -f {{100000000}} -g {{20}} -##Specify the gain
rtl_sdr -f {{100000000}} -n {{20}} -##Read a specified number of samples
rtl_sdr -f {{100000000}} -s {{2400000}} -##Specify the sample rate in Hz (ranges 225001-300000 and 900001-3200000)
rtl_sdr -f {{100000000}} {{path/to/file}}##Save RAW data from a frequency (specified in Hz) to a file
rtmpdump --rtmp {{rtmp://example.com/path/to/video}} --app {{app_name}} --playpath {{path/to/video}} -o {{file.ext}}##Specify connection parameters if they are not detected correctly
rtmpdump --rtmp {{rtmp://example.com/path/to/video}} --pageUrl {{http://example.com/webpage}} -o {{file.ext}}##Download a file from a server that requires a referrer
rtmpdump --rtmp {{rtmp://example.com/path/to/video}} --swfVfy {{http://example.com/player}} --flashVer "{{LNX 10,0,32,18}}" -o {{file.ext}}##Download a file from a Flash player
rtmpdump --rtmp {{rtmp://example.com/path/to/video}} -o {{file.ext}}##Download a file
rubocop --auto-correct##Auto-correct files (experimental)
rubocop --except {{cop_1}} {{cop_2}}##Exclude a cop
rubocop --only {{cop_1}} {{cop_2}}##Run only specified cops
rubocop --out {{path/to/file}}##Write output to file
rubocop --show-cops##View list of cops (linter rules)
rubocop {{path/to/file}} {{path/to/directory}}##Check one or more specific files or directories
rubocop##Check all files in the current directory (including subdirectories)
ruby -c {{script.rb}}##Check for syntax errors on a given Ruby script
ruby -e {{command}}##Execute a single Ruby command in the command-line
ruby -v##Show the version of Ruby you are using
ruby {{script.rb}}##Execute a Ruby script
runit##Start runit's 3-stage init scheme
runsv {{path/to/service}}##Start a runit service as the current user
runsvdir -P {{path/to/services}}##Start services in separate sessions
runsvdir {{path/to/services}}##Start and manage all services in a directory as the current user
rustc --print target-list##Display target list
rustc --target {{target_triple}} {{path/to/file.rs}}##Compile for a specific target
rustc -C target-cpu=native --print cfg##Display architecture-specific optimizations for the current CPU
rustc -C target-cpu=native {{path/to/file.rs}}##Compile with architecture-specific optimizations for the current CPU
rustc -O {{file.rs}}##Compile with high optimization
rustc -g {{file.rs}}##Compile with debugging information
rustc {{file.rs}}##Compile a single file
rustfmt --backup {{source.rs}}##Backup any modified files before formatting (the original file is renamed with a `.bk` extension)
rustfmt --check {{source.rs}}##Check a file for formatting and display any changes on the console
rustfmt {{source.rs}}##Format a file, overwriting the original file in-place
rustup default nightly##Switch the default toolchain to nightly so that the `cargo` and `rustc` commands will use it
rustup doc##Open the local rust documentation in the default web browser
rustup install nightly##Install the nightly toolchain for your system
rustup override set nightly##Use the nightly toolchain when inside the current project, but leave global settings unchanged
rustup run {{toolchain_name}} cargo build##Run cargo build with a certain toolchain
rustup show##List installed toolchains
rustup update##Update all toolchains
rvm --default use {{version}}##Set the default Ruby version
rvm install {{version(s)}}##Install one or more space-separated versions of Ruby
rvm list##Display a list of installed versions
rvm remove {{version}}##Remove a version of Ruby and its sources
rvm requirements##Show specific dependencies for your OS
rvm uninstall {{version}}##Uninstall a version of Ruby and keep its sources
rvm upgrade {{current_version}} {{new_version}}##Upgrade a version of Ruby to a new version
rvm use {{version}}##Use a specific version of Ruby
s *.png##Select all PNG files in the current directory
s --binary "{{binary}} {{arguments}}" {{query}}##Use a specified binary to perform the search query
s --list-providers##List all providers
s --provider {{provider}} {{query}}##Search for a query with a given provider
s {{bookmark_name}}##Save the current directory as "bookmark_name"
s {{query}}##Search for a query on Google (default provider)
s {{word}}##Perform a search for a given word (with or without hashtag)
safe auth {{authentication_token}}##Authenticate the CLI client against the Vault server, using an authentication token
safe env##Print the environment variables describing the current target
safe gen {{path/to/secret}} {{key}}##Set auto-generated password in a secret
safe move {{old/path/to/secret}} {{new/path/to/secret}}##Move a secret from one path to another
safe set {{path/to/secret}} {{key}}={{value}}##Set non-sensitive keys for a secret
safe ssh {{2048}} {{path/to/secret}}##Generate a new 2048-bit SSH key-pair and store it
safe target {{vault_addr}} {{target_name}}##Add a safe target
safe tree {{path}}##Display a tree hierarchy of all reachable keys for a given path
sails generate controller {{name}}##Generate Sails Controller
sails generate model {{name}}##Generate Sails Model
sails generate {{name}}##Generate Sails API
sails lift##Start Sails
sails new {{projectName}}##Create new Sails project
salt '*' state.highstate##Execute a highstate on all connected minions
salt '*' test.ping##List connected minions
salt '*.example.com' pkg.upgrade##Upgrade packages using the OS package manager (apt, yum, brew) on a subset of minions
salt '{{minion_id}}' cmd.run "ls "##Execute an arbitrary command on a particular minion
salt-call -l debug state.highstate##Perform a highstate with verbose debugging output
salt-call grains.items##List this minion's grains
salt-call state.highstate test=true##Perform a highstate dry-run, compute all changes but don't actually perform them
salt-call state.highstate##Perform a highstate on this minion
salt-key -F##Print fingerprints of all public keys
salt-key -L##List all accepted, unaccepted and rejected minion keys
salt-key -a {{MINION_ID}}##Accept a minion key by name
salt-key -r {{MINION_ID}}##Reject a minion key by name
salt-run manage.status##Show status of all minions
salt-run manage.up##Show all minions which are disconnected
samtools flagstat {{sorted_input}}##Print alignment statistics about a file
samtools idxstats {{sorted_indexed_input}}##Count alignments to each index (chromosome / contig)
samtools index {{sorted_input.bam}}##Index a sorted BAM file (creates {{sorted_input.bam.bai}})
samtools merge {{output}} {{input1 input2 …}}##Merge multiple files
samtools sort {{input}} -o {{output.bam}}##Sort file and save to BAM (the output format is automatically determined from the output file's extension)
samtools split {{merged_input}}##Split input file according to read groups
samtools view -S -b {{input.sam}} > {{output.bam}}##Convert a SAM input file to BAM stream and save to file
sass --watch {{inputfile.scss|inputfile.sass}}##Watch a SCSS or Sass file for changes and output or update the CSS file with same filename
sass --watch {{inputfile.scss|inputfile.sass}}:{{outputfile.css}}##Watch a SCSS or Sass file for changes and output or update the CSS file with the given filename
sass {{inputfile.scss|inputfile.sass}} {{outputfile.css}}##Convert a SCSS or Sass file to CSS and save the result to a file
sass {{inputfile.scss|inputfile.sass}}##Convert a SCSS or Sass file to CSS and print out the result
satis add {{repository_url}}##Add a VCS repository to the Satis configuration
satis build --repository-url {{repository_url}} {{satis.json}} {{path/to/output_directory}}##Build the static output by updating only the specified repository
satis build {{satis.json}} {{path/to/output_directory}}##Build the static output from the configuration
satis init {{satis.json}}##Initialise a Satis configuration
satis purge {{satis.json}} {{path/to/output_directory}}##Remove useless archive files
sbcl --script {{path/to/script.lisp}}##Execute a Lisp script
sbcl##Start a REPL (interactive shell)
sbt -h##List all sbt options
sbt -sbt-jar {{path}}##Use a specific jar file as the sbt launcher
sbt -sbt-version {{version}}##Use the specified version of sbt
sbt clean##Delete all generated files in the `target` directory
sbt compile##Compile the main sources in `src/main/scala` and `src/main/java` directories
sbt new {{scala/hello-world.g8}}##Create a new Scala project from an existing Giter8 template hosted on GitHub
sbt test##Compile and run all tests
sbt##Start a REPL (interactive shell)
scala -classpath {{filename.jar}} {{command}}##Start the interpreter with a dependency in the classpath
scala -e {{command}}##Execute a single Scala command in the command-line
scala {{filename.jar}}##Execute a `.jar` program
scala {{script.scala}}##Execute a Scala script
scala##Start a REPL (interactive shell)
scalafmt --config {{path/to/.scalafmt.conf}} --mode diff##Format only files that were edited against the current Git branch
scalafmt --config {{path/to/.scalafmt.conf}} --test##Check if files are correctly formatted, returning `0` if all files respect the formatting style
scalafmt --config {{path/to/.scalafmt.conf}} {{path/to/file_or_directory}} {{path/to/file_or_directory}} {{...}}##Reformat specific files or directories with a custom formatting configuration
scalafmt --exclude {{path/to/file_or_directory}} {{...}}##Exclude files or directories
scalafmt##Reformat all `.scala` files in the current directory recursively
scan-build {{command}} {{command_arguments}}##Run a command and pass all subsequent options to it
scan-build {{make}}##Build and analyze the project in the current directory
scan-build##Display help
scc --by-file##Display output for every file
scc --exclude-dir {{.git,.hg}}##Exclude directories from being counted
scc --format {{tabular|wide|json|csv|cloc-yaml|html|html-table}}##Display output using a specific output format (defaults to `tabular`)
scc --include-ext {{go, java, js}}##Only count files with specific file extensions
scc --sort {{files|name|lines|blanks|code|comments|complexity}}##Display output and sort by column (defaults to by files)
scc -h##Print help for scc
scc {{path/to/directory}}##Print lines of code in the target directory
scc##Print lines of code in the current directory
sccmap -?##Display help for `sccmap`
sccmap -S {{path/to/input1.gv}} {{path/to/input2.gv ...}} > {{path/to/output.gv}}##Extract strongly connected components of one or more directed graphs
sccmap -v -s {{path/to/input1.gv}} {{path/to/input2.gv ...}}##Print statistics about a graph, producing no output graph
scheme --eval "{{(define foo 'x)}}"##Load scheme expressions into the REPL
scheme --load {{script.scm}}##Load a scheme program into the REPL
scheme --quiet < {{script.scm}}##Run a scheme program (with no REPL output)
scheme --quiet##Open the REPL in quiet mode
scheme##Start a REPL (interactive shell)
scim {{filename}}.csv##Start SC-IM
scp -3 {{host1}}:{{path/to/remote_file}} {{host2}}:{{path/to/remote_directory}}##Copy a file between two remote hosts transferring through the local host
scp -P {{port}} {{path/to/local_file}} {{remote_host}}:{{path/to/remote_file}}##Use a specific port when connecting to the remote host
scp -i {{~/.ssh/private_key}} {{local_file}} {{remote_host}}:{{/path/remote_file}}##Use a specific ssh private key for authentication with the remote host
scp -r {{remote_host}}:{{path/to/remote_directory}} {{path/to/local_directory}}##Recursively copy the contents of a directory from a remote host to a local directory
scp {{path/to/local_file}} {{remote_host}}:{{path/to/remote_file}}##Copy a local file to a remote host
scp {{path/to/local_file}} {{remote_username}}@{{remote_host}}:{{path/to/remote_directory}}##Use a specific username when connecting to the remote host
scp {{remote_host}}:{{path/to/remote_file}} {{path/to/local_directory}}##Copy a file from a remote host to a local directory
scrapy crawl {{spider_name}}##Run spider (in project directory)
scrapy edit {{spider_name}}##Edit spider (in project directory)
scrapy fetch {{url}}##Fetch a webpage as Scrapy sees it and print the source to stdout
scrapy genspider {{spider_name}} {{website_domain}}##Create a spider (in project directory)
scrapy shell {{url}}##Open Scrapy shell for URL, which allows interaction with the page source in a Python shell (or IPython if available)
scrapy startproject {{project_name}}##Create a project
scrapy view {{url}}##Open a webpage in the default browser as Scrapy sees it (disable JavaScript for extra fidelity)
scrcpy --fullscreen##Start display in fullscreen mode
scrcpy --push-target {{path/to/directory}}##Set target directory for pushing files to device by drag and drop (non-APK)
scrcpy --record {{path/to/file.mp4}}##Record display screen
scrcpy --rotation {{0|1|2|3}}##Rotate the display screen. Each incremental value adds a 90 degree counterclockwise rotation
scrcpy --serial {{0123456789abcdef|192.168.0.1:5555}}##Display a mirror of a specific device based on its ID or IP address (find it under the `adb devices` command)
scrcpy --show-touches##Show touches on physical device
scrcpy##Display a mirror of a connected device
screen -S {{session_name}}##Start a new named screen session
screen -X -S {{session_name}} quit##Kill a detached screen
screen -dmLS {{session_name}} {{command}}##Start a new daemon and log the output to `screenlog.x`
screen -ls##Show open screen sessions
screen -r {{session_name}}##Reattach to an open screen
screen##Start a new screen session
screenfetch -A '{{distribution_name}}'##Specify distribution logo
screenfetch -D '{{distribution_name}}'##Specify distribution logo and text
screenfetch -N##Strip all color
screenfetch -s##Take a screenshot (requires 'scrot')
screenfetch##Start screenfetch
script -a {{logfile.log}}##Append to an existing file
script -q {{logfile.log}}##Execute quietly without start and done messages
script {{logfile.log}}##Start recording in a given file
script##Start recording in file named "typescript"
sd -p {{'window.fetch'}} {{'fetch'}} {{http.js}}##Find and replace in a file printing the result to stdout
sd {{'from "react"'}} {{'from "preact"'}} $(find . -type f)##Find and replace across a project changing each file in place
sdcv --data-dir {{path/to/directory}} {{search_term}}##Search for dictionaries in a specific directory
sdcv --exact-search {{search_term}}##Look up a definition with an exact search
sdcv --json {{search_term}}##Look up a definition and format the output as JSON
sdcv --list-dicts##List installed dictionaries
sdcv --use-dict {{dictionary_name}} {{search_term}}##Display a definition from a specific dictionary
sdcv {{search_term}}##Look up a definition with a fuzzy search
sdcv##Start sdcv interactively
sdiff -W {{path/to/file1}} {{path/to/file2}}##Compare 2 files, ignoring all tabs and whitespace
sdiff -Z {{path/to/file1}} {{path/to/file2}}##Compare 2 files, ignoring whitespace at the end of lines
sdiff -i {{path/to/file1}} {{path/to/file2}}##Compare 2 files in a case-insensitive manner
sdiff -o {{path/to/merged_file}} {{path/to/file1}} {{path/to/file2}}##Compare and then merge, writing the output to a new file
sdiff {{path/to/file1}} {{path/to/file2}}##Compare 2 files
sdk current {{gradle}}##Check current Gradle version
sdk current##List all installed Software Development Kits
sdk install {{gradle}} {{gradle_version}}##Install a specific version of Gradle
sdk list {{sdk_name}}##List all available versions for a specific Software Development Kit
sdk list##List all Software Development Kits available to install
sdk rm {{gradle}} {{gradle_version}}##Uninstall a particular version of Gradle
sdk upgrade {{gradle}}##Update Gradle to the latest version
sdk use {{gradle}} {{gradle_version}}##Switch to a specific version of Gradle
sdkmanager --list##List available packages
sdkmanager --uninstall {{package}}##Uninstall a package
sdkmanager --update##Update every installed package
sdkmanager {{package}}##Install a package
search {{string}}##List all units containing a specific string in interactive mode
searchsploit --explore {{exploit_number}}##Open the resource to read with the pager defined in the `$PAGER` environment variable
searchsploit --mirror {{exploit_number}}##Make a copy of the resource to the current directory (requires the number of the exploit)
searchsploit --update##Update the local exploit database
searchsploit --www {{search_terms}}##Show the exploit-db link to the found resources
searchsploit sudo 1.8.27##Search for a known specific version, e.g. sudo version 1.8.27
searchsploit {{search_terms}}##Search for an exploit, shellcode, or paper
secrethub audit {{path/to/repo_or_secret}}##Audit a repository or secret
secrethub generate {{path/to/secret}}##Generate a random value and store it as a new or updated secret
secrethub read {{path/to/secret}}##Print a secret to stdout
secrethub write --clip {{path/to/secret}}##Store a value from the clipboard as a new or updated secret
security-checker security:check --format=json##Return results as a JSON object
security-checker security:check {{path/to/composer.lock}}##Use a specific `composer.lock` file
security-checker security:check##Look for security issues in the project dependencies (based on the `composer.lock` file in the current directory)
sed '/{{line_pattern}}/d' {{filename}}##Delete lines matching the line pattern
sed '/{{line_pattern}}/s/{{find}}/{{replace}}/' {{filename}}##Replace only on lines matching the line pattern
sed 's#{{find}}#{{replace}}#' {{filename}}##Replace separator `/` by any other character not used in the find or replace patterns, e.g. `#`
sed 's/{{regular_expression}}/{{replace}}/' {{filename}}##Replace the first occurrence of a regular expression in each line of a file, and print the result
sed -e 's/{{find}}/{{replace}}/' -e 's/{{find}}/{{replace}}/' {{filename}}##Apply multiple find-replace expressions to a file
sed -i 's/{{find}}/{{replace}}/g' {{filename}}##Replace all occurrences of a string in a file, overwriting the file (i.e. in-place)
sed -r 's/{{regular_expression}}/{{replace}}/g' {{filename}}##Replace all occurrences of an extended regular expression in a file, and print the result
sed 11q {{filename}}##Print the first 11 lines of a file
semver --coerce {{1.2}}##Convert a version string to the semantic versioning format
semver {{1.2.3}} --range "{{^1.0}}"##Test if `1.2.3` matches the `^1.0` range (prints an empty string if it does not match)
semver {{1.2.3}} --range {{">=1.0"}} {{"<2.0"}}##Test with multiple ranges
semver {{1.2.3}} {{2.0.0}} --range "{{^1.0}}"##Test multiple version strings and return only the ones that match
semver {{1.2}}##Check if a version string respects the semantic versioning format (prints an empty string if it does not match)
sendmail -f {{you@yourdomain.com}} {{test@gmail.com}} < {{file.zip}}##Send an email from you@yourdomain.com (assuming the mail server is configured for this) to test@gmail.com containing the file `file.zip`
sendmail -f {{you@yourdomain.com}} {{test@gmail.com}} < {{message.txt}}##Send an email from you@yourdomain.com (assuming the mail server is configured for this) to test@gmail.com containing the message in `message.txt`
sendmail {{username}} < {{message.txt}}##Send a message with the content of `message.txt` to the mail directory of local user `username`
seq -f "%04g" 5 3 20##Format output width to a minimum of 4 digits padding with zeros as necessary
seq -s " " 5 3 20##Separate the output with a space instead of a newline
seq 10##Sequence from 1 to 10
seq 5 3 20##Every 3rd number from 5 to 20
sequelize db:migrate##Run the migration file
sequelize db:migrate:undo:all##Revert all migrations
sequelize db:seed:all##Populate database using all seed files
sequelize model:generate --name {{table_name}} --attributes {{field1:integer,field2:string,field3:boolean}}##Create a model with 3 fields and a migration file
sequelize seed:generate --name {{seed_filename}}##Create a seed file with the specified name to populate the database
serve --config {{path/to/serve.json}}##Start an HTTP server on the default port using a specific configuration file
serve --cors##Start an HTTP server with CORS enabled by including the `Access-Control-Allow-Origin *` header in all responses
serve --help##Display help
serve --single##Start an HTTP server on the default port rewriting all not-found requests to the `index.html` file
serve --ssl-cert {{path/to/cert.pem}} --ssl-key {{path/to/key.pem}}##Start an HTTPS server on the default port using the specified certificate
serve -p {{port}} {{path/to/directory}}##Start an HTTP server on a specific [p]ort to serve a specific directory
serve##Start an HTTP server listening on the default port to serve the current directory
serverless create --template {{template_name}}##Create a serverless project from a template
serverless create##Create a serverless project
serverless deploy##Deploy to a cloud provider
serverless info##Display information about a serverless project
serverless invoke -f {{function_name}}##Invoke a deployed function
serverless logs -t##Follow the logs for a project
set --universal --export {{variable_name}} {{variable_value}}##Define and export an environmental variable that persists across shell restarts (builtin)
set -a##Mark variables that are modified or created for export
set -b##Notify of job termination immediately
set -e##Set the shell to exit as soon as the first error is encountered (mostly used in scripts)
set -o {{vi}}##Set various options, e.g. enable `vi` style line editing
set nvm_default_version {{node_version}}##Set the default Node.js version
set {{variable}} {{value}}##Set the value of a TeX Live variable
set##Display the names and values of shell variables
sfdp -?##Display help
sfdp -T {{format}} -O {{path/to/input.gv}}##Render the output in `ps`, `pdf`, `svg`, `fig`, `png`, `gif`, `jpg`, `json`, or `dot` format
sfdp -T {{png}} -O {{path/to/input.gv}}##Render a `png` image with a filename based on the input filename and output format (uppercase -O)
sfdp -T {{svg}} -o {{path/to/image.svg}} {{path/to/input.gv}}##Render a `svg` image with the specified output filename (lowercase -o)
sftp -P {{remote_port}} {{remote_user}}@{{remote_host}}##Connect using an alternate port
sftp {{remote_user}}@{{remote_host}}##Connect to a remote server and enter an interactive command mode
sh -c "{{command}}"##Execute a command and then exit
sh -s##Read and execute commands from stdin
sh {{path/to/script.sh}}##Execute a script
sh##Start an interactive shell session
sha1sum --check --quiet {{path/to/file.sha1}}##Only show a message for missing files or when verification fails
sha1sum --check {{path/to/file.sha1}}##Read a file of SHA1 sums and verify all files have matching checksums
sha1sum --ignore-missing --check --quiet {{path/to/file.sha1}}##Only show a message for files for which verification fails, ignoring missing files
sha1sum {{path/to/file1}} {{path/to/file2}} > {{path/to/file.sha1}}##Calculate and save the list of SHA1 checksums to a file
sha1sum {{path/to/file1}} {{path/to/file2}}##Calculate SHA1 checksums for multiple files
sha1sum {{path/to/file}}##Calculate the SHA1 checksum for a file
sha224sum --check --quiet {{path/to/file.sha224}}##Only show a message for missing files or when verification fails
sha224sum --check {{path/to/file.sha224}}##Read a file of SHA224 sums and verify all files have matching checksums
sha224sum --ignore-missing --check --quiet {{path/to/file.sha224}}##Only show a message for files for which verification fails, ignoring missing files
sha224sum {{path/to/file1}} {{path/to/file2}} > {{path/to/file.sha224}}##Calculate and save the list of SHA224 checksums to a file
sha224sum {{path/to/file1}} {{path/to/file2}}##Calculate SHA224 checksums for multiple files
sha224sum {{path/to/file}}##Calculate the SHA224 checksum for a file
sha256sum --check --quiet {{path/to/file.sha256}}##Only show a message for missing files or when verification fails
sha256sum --check {{path/to/file.sha256}}##Read a file of SHA256 sums and verify all files have matching checksums
sha256sum --ignore-missing --check --quiet {{path/to/file.sha256}}##Only show a message for files for which verification fails, ignoring missing files
sha256sum {{path/to/file1}} {{path/to/file2}} > {{path/to/file.sha256}}##Calculate and save the list of SHA256 checksums to a file
sha256sum {{path/to/file1}} {{path/to/file2}}##Calculate SHA256 checksums for multiple files
sha256sum {{path/to/file}}##Calculate the SHA256 checksum for a file
sha384sum --check --quiet {{path/to/file.sha384}}##Only show a message for missing files or when verification fails
sha384sum --check {{path/to/file.sha384}}##Read a file of SHA384 sums and verify all files have matching checksums
sha384sum --ignore-missing --check --quiet {{path/to/file.sha384}}##Only show a message for files for which verification fails, ignoring missing files
sha384sum {{path/to/file1}} {{path/to/file2}} > {{path/to/file.sha384}}##Calculate and save the list of SHA384 checksums to a file
sha384sum {{path/to/file1}} {{path/to/file2}}##Calculate SHA384 checksums for multiple files
sha384sum {{path/to/file}}##Calculate the SHA384 checksum for a file
sha512sum --check --quiet {{path/to/file.sha512}}##Only show a message for missing files or when verification fails
sha512sum --check {{path/to/file.sha512}}##Read a file of SHA512 sums and verify all files have matching checksums
sha512sum --ignore-missing --check --quiet {{path/to/file.sha512}}##Only show a message for files for which verification fails, ignoring missing files
sha512sum {{path/to/file1}} {{path/to/file2}} > {{path/to/file.sha512}}##Calculate and save the list of SHA512 checksums to a file
sha512sum {{path/to/file1}} {{path/to/file2}}##Calculate SHA512 checksums for multiple files
sha512sum {{path/to/file}}##Calculate the SHA512 checksum for a file
shards init##Create a skeleton `shard.yml` file
shards install##Install dependencies from a `shard.yml` file
shards list##List all installed dependencies
shards update##Update all dependencies
shards version {{path/to/dependency_directory}}##List version of dependency
shasum --algorithm 256 {{path/to/file1}} {{path/to/file2}} > {{path/to/file.sha256}}##Calculate and save the list of SHA256 checksums to a file
shasum --algorithm 256 {{path/to/file}}##Calculate the SHA256 checksum for a file
shasum --algorithm 512 {{path/to/file1}} {{path/to/file2}}##Calculate the SHA512 checksum for multiple files
shasum --check --quiet {{path/to/file}}##Check a list of sums and only show a message for files for which verification fails
shasum --check {{path/to/file}}##Check a file with a list of sums against the directory's files
shasum {{path/to/file}}##Calculate the SHA1 checksum for a file
shc -f {{script}} -e {{dd/mm/yyyy}} -m "{{Please contact your provider}}"##Compile a shell script and set a message to display upon expiration
shc -f {{script}} -e {{dd/mm/yyyy}}##Compile a shell script and set an expiration date for the executable
shc -f {{script}} -o {{binary}}##Compile a shell script and specify an output binary file
shc -f {{script}}##Compile a shell script
shellcheck --checked-sourced {{path/to/script.sh}}##Also check any sourced shell scripts
shellcheck --enable={{add-default-case|avoid-nullary-conditions}}##Enable one or more optional checks
shellcheck --exclude {{SC1009,SC1073}} {{path/to/script.sh}}##Ignore one or more error types
shellcheck --format {{tty|checkstyle|diff|gcc|json|json1|quiet}} {{path/to/script.sh}}##Display output in the specified format (defaults to `tty`)
shellcheck --list-optional##List all available optional checks that are disabled by default
shellcheck --shell {{sh|bash|dash|ksh}} {{path/to/script.sh}}##Check a shell script interpreting it as the specified shell dialect (overrides the shebang at the top of the script)
shellcheck {{path/to/script.sh}}##Check a shell script
shift {{N}}##Move arguments by N places dropping the first N arguments
shift##Move arguments by one place dropping the first argument
shiori add {{url}}##Save the specified URL as bookmark
shiori import {{path/to/bookmarks.html}}##Import bookmarks from HTML Netscape bookmark format file
shiori open {{bookmark_id}}##Open the saved bookmark in a browser
shiori print##List the saved bookmarks
shiori serve --port {{8181}}##Start the web interface for managing bookmarks at port 8181
shopt -p##Print a list of all options and their status formatted as runnable `shopt` commands
shopt -s {{option_name}}##Set an option
shopt -u {{option_name}}##Unset an option
shopt##List of all settable options and whether they are set
show grants for {{username}};##Show authorities of a user
show instances;##Show instances created by current user
show partitions {{table_name}};##Show table partitions
show tables;##Show tables in the current project
showfigfonts {{input_text}}##Display available fonts using a specific text
showfigfonts {{optional_string_to_display}}##Show available FIGlet fonts
showfigfonts##Display available fonts
shred --remove {{file}}##Overwrite a file and remove it
shred --zero {{file}}##Overwrite a file, leaving zeroes instead of random data
shred -n25 {{file}}##Overwrite a file 25 times
shred {{file}}##Overwrite a file
shuf --head-count={{3}} --input-range={{1-10}} --repeat##Generate 3 random numbers in the range 1-10 (inclusive)
shuf --head-count={{5}} {{filename}}##Only output the first 5 entries of the result
shuf {{filename}} --output={{output_filename}}##Write the output to another file
shuf {{filename}}##Randomize the order of lines in a file and output the result
siege --benchmark --file {{path/to/url_list.txt}}##Benchmark a list of URLs (without waiting between requests)
siege --concurrent={{50}} --file {{path/to/url_list.txt}}##Set the amount of concurrent connections
siege --file {{path/to/url_list.txt}}##Test a list of URLs
siege --internet --file {{path/to/url_list.txt}}##Test list of URLs in a random order (Simulates internet traffic)
siege --time={{30s}} --file {{path/to/url_list.txt}}##Set how long for the siege to run for
siege {{https://example.com}}##Test a URL with default settings
sindresorhus##Start Sindre's interactive CLI
singularity build {{image.sif}} {{docker://godlovedc/lolcow}}##Rebuild a remote image using the latest Singularity image format
singularity exec {{image.sif}} {{command}}##Start a container from an image and run a command
singularity pull --name {{image.sif}} {{library://godlovedc/funny/lolcow:latest}}##Download a remote image from Sylabs Cloud
singularity run {{image.sif}}##Start a container from an image and execute the internal runscript
singularity shell {{image.sif}}##Start a container from an image and get a shell inside it
sk --query "{{query}}"##Start skim with a specified query
skaffold build -f {{skaffold.yaml}}##Build the artifacts
skaffold deploy -f {{skaffold.yaml}}##Deploy the artifacts
skaffold dev -f {{skaffold.yaml}}##Build and deploy your app every time your code changes
skaffold diagnose -f {{skaffold.yaml}}##Run a diagnostic on Skaffold
skaffold run -f {{skaffold.yaml}}##Run a pipeline file
skicka download {{path/to/remote}} {{path/to/local}}##Download a file/folder from Google Drive
skicka du {{path/to/parent/folder}}##Show amount of space used by children folders
skicka ls {{path/to/folder}}##List files
skicka mkdir {{path/to/folder}}##Create a folder
skicka rm {{path/to/file}}##Delete a file
skicka upload {{path/to/local}} {{path/to/remote}}##Upload a file/folder to Google Drive
sl -F##Let the train fly
sl -a##The train burns, people scream
sl -e##Let the user exit (CTRL + C)
sl -l##Make the train little
sl##Let a steam locomotive run through your terminal
slackcat --channel {{channel_name}} --filename={{filename}} {{path/to/file}}##Post a file to Slack with a custom filename
slackcat --channel {{channel_name}} {{path/to/file}}##Post a file to Slack
sleep {{hours}}h##Delay in hours
sleep {{minutes}}m##Delay in minutes
sleep {{seconds}}##Delay in seconds
slimrb --erb {{input.slim}} {{output.erb}}##Convert a Slim file to ERB
slimrb --pretty {{input.slim}} {{output.html}}##Convert a Slim file and output to prettified HTML
slimrb {{input.slim}} {{output.html}}##Convert a Slim file to HTML
smalltalkci --clean##Clean up caches and delete builds
smalltalkci --headful##Debug tests in headful mode (show VM window)
smalltalkci --image {{path/to/Smalltalk.image}} -- vm {{path/to/vm}}##Specify a custom Smalltalk image and VM
smalltalkci --smalltalk {{Squeak64-Trunk}}##Download and prepare a well-known smalltalk image for the tests
smalltalkci {{path/to/.smalltalk.ston}}##Run tests for a configuration file
smalltalkci##Run tests for the `.smalltalk.ston` configuration in the current directory
smbmap --host-file {{path/to/file}} -u {{username}} -p {{password}} -q -R --depth {{number}} --exclude {{sharename}} -A {{filepattern}}##Locate and download files [R]ecursively up to N levels depth, searching for filename pattern (regex), and excluding certain shares
smbmap --host-file {{path/to/file}} -u {{username}} -p {{password}} -q##Enumerate hosts and check SMB file permissions
smbmap --host-file {{path/to/file}}##Enumerate hosts with NULL sessions enabled and open shares
smbmap -u {{username}} -p {{password}} -d {{domain}} -H {{ip_or_hostname}} --upload {{path/to/file}} '{{/share_name/remote_filename}}'##Upload file through smb using username and password
smbmap -u {{username}} -p {{password}} -d {{domain}} -H {{ip_or_hostname}}##Connect to an ip or hostname through smb using a username and password
sn -R {{path/to/assembly.dll}} {{path/to/key_pair.snk}}##Re-sign an assembly with the specified private key
sn -T {{path/to/assembly.exe}}##Show the public key of the private key that was used to sign an assembly
sn -e {{path/to/assembly.dll}} {{path/to/output.pub}}##Extract the public key to a file
sn -k {{path/to/key.snk}}##Generate a new StrongNaming key
snyk auth##Log in to your Snyk account
snyk monitor##Record the state of dependencies and any vulnerabilities on snyk.io
snyk test --docker {{docker_image}}##Test a local Docker image for any known vulnerabilities
snyk test##Test your code for any known vulnerabilities
snyk wizard##Auto patch and ignore vulnerabilities
socat - TCP-LISTEN:8080,fork##Listen to a port, wait for an incoming connection and transfer data to STDIO
socat - TCP4:www.example.com:80##Create a connection to a host and port, transfer data in STDIO to connected host
socat TCP-LISTEN:80,fork TCP4:www.example.com:80##Forward incoming data of a local port to another host and port
solcjs --abi {{path/to/file.sol}}##Compile the ABI of a specific contract
solcjs --bin --base-path {{path/to/directory}} {{path/to/file.sol}}##Specify a base path to resolve imports from
solcjs --bin --include-path {{path/to/directory}} {{path/to/file.sol}}##Specify one or more paths to include containing external code
solcjs --bin --optimize {{path/to/file.sol}}##Optimise the generated bytecode
solcjs --bin {{path/to/file.sol}}##Compile a specific contract to hex
solo key rng raw##Generate random bytes using the currently connected Solo's secure random number generator
solo key update##Update the currently connected Solo's firmware to the latest version
solo key wink --serial {{serial_number}}##Blink the LED of a specific Solo
solo ls##List connected Solos
solo monitor {{path/to/serial_port}}##Monitor the serial output of a Solo
sonar-scanner -D{{project.settings=myproject.properties}}##Scan a project using configuration file other than `sonar-project.properties`
sonar-scanner -X##Print debugging information
sonar-scanner -h##Print help information
sonar-scanner##Scan a project with configuration file in your project's root directory named `sonar-project.properties`
sops -d --extract '["an_array"][1]' {{path/to/myfile.enc.json}}##Extract keys by naming them, and array elements by numbering them
sops -d --input-type json {{path/to/myfile.enc.json}}##Change the extension of the file once encrypted
sops -d {{path/to/myfile.enc.json}}##Decrypt a file to the standard output
sops -e {{path/to/myfile.json}} > {{path/to/myfile.enc.json}}##Encrypt a file
sops -r {{path/to/myfile.enc.yaml}}##Rotate data keys for a sops file
sort --field-separator={{:}} --key={{3n}} {{/etc/passwd}}##Sort `/etc/passwd` by the 3rd field of each line numerically, using "" as a field separator
sort --general-numeric-sort {{path/to/file}}##Sort numbers with exponents
sort --ignore-case {{path/to/file}}##Sort a file in case-insensitive way
sort --numeric-sort {{path/to/file}}##Sort a file using numeric rather than alphabetic order
sort --output={{path/to/file}} {{path/to/file}}##Sort a file, printing the output to the specified output file (can be used to sort a file in-place)
sort --reverse {{path/to/file}}##Sort a file in descending order
sort --unique {{path/to/file}}##Sort a file preserving only unique lines
sort {{file}} | uniq -c | sort -nr##Display number of occurrences of each line, sorted by the most frequent
sort {{file}} | uniq -c##Display number of occurrences of each line along with that line
sort {{file}} | uniq -d##Display only duplicate lines
sort {{file}} | uniq -u##Display only unique lines
sort {{file}} | uniq##Display each line once
sort {{path/to/file}}##Sort a file in ascending order
source {{path/to/file}}##Evaluate contents of a given file
source {{path/to/venv}}/bin/activate##Start (select) the environment
sox --norm {{input_audiofile}} {{output_audiofile}}##Normalize an audio file (adjust volume to the maximum peak level, without clipping)
sox -m {{input_audiofile1}} {{input_audiofile2}} {{output_audiofile}}##Merge two audio files into one
sox -v 2.0 {{input_audiofile}} {{output_audiofile}}##Increase the volume of an audio file by 2x
sox {{input_audiofile}} -n stat##Print statistical data of an audio file
sox {{input_audiofile}} {{output_audiofile}} reverse##Reverse and save an audio file
sox {{input_audiofile}} {{output_audiofile}} trim {{start}} {{end}}##Trim an audio file to the specified times
spark new {{project_name}} --braintree##Create a new Spark project with Braintree stubs
spark new {{project_name}} --team-billing##Create a new Spark project with team-based billing stubs
spark new {{project_name}}##Create a new Spark project
spark register {{token}}##Register your API token
spark token##Display the currently registered API token
spatial cloud launch {{assembly_name}} {{launch_config}} {{deployment_name}}##Launch a cloud deployment
spatial cloud upload {{assembly_name}}##Upload an assembly to use for cloud deployments
spatial local launch {{launch_config}} --snapshot={{snapshot_file}}##Deploy locally
spatial local worker launch {{worker_type}} {{launch_config}}##Launch a local worker to connect to your local deployment
spatial worker build --target=development --target=Osx##Build workers for local deployment on Unity on macOS
spatial worker build --target=local --target=Windows##Build workers for local deployment on Unreal on Windows
spatial worker build##Run this when you use a project for the first time
spatial worker clean##Clean worker directories
speed-test --bytes##Output the results in megabytes per second (MBps)
speed-test --json##Output the results as JSON
speed-test --verbose##Output more detailed information
speed-test##Test your internet connection and ping speed
speedcrunch##Start speedcrunch
speedtest --format={{human-readable|csv|tsv|json|jsonl|json-pretty}}##Run a speed test and specify the output format
speedtest --precision={{precision}}##Run a speed test and specify the number of decimal points to use (0 to 8, defaults to 2)
speedtest --progress={{yes|no}}##Run a speed test and print its progress (only available for output format `human-readable` and `json`)
speedtest --server-id={{server_id}}##Run a speed test to a specific `speedtest.net` server
speedtest --servers##List all `speedtest.net` servers, sorted by distance
speedtest --unit={{auto-decimal-bits|auto-decimal-bytes|auto-binary-bits|auto-binary-bytes}}##Run a speed test and specify the unit of the output
speedtest##Run a speed test
speedtest-cli --bytes##Run a speed test and display values in bytes, instead of bits
speedtest-cli --json##Run a speed test and display the results as JSON (suppresses progress information)
speedtest-cli --list##List all `speedtest.net` servers, sorted by distance
speedtest-cli --no-download##Run a speed test without performing download tests
speedtest-cli --secure##Run a speed test using `HTTPS`, instead of `HTTP`
speedtest-cli --server {{server_id}}##Run a speed test to a specific speedtest.net server
speedtest-cli --share##Run a speed test and generate an image of the results
speedtest-cli##Run a speed test
spfquery -ip {{8.8.8.8}} -sender {{sender@example.com}} --debug##Turn on debugging output
spfquery -ip {{8.8.8.8}} -sender {{sender@example.com}}##Check if an IP address is allowed to send an e-mail from the specified e-mail address
sphinx-build -b {{html|epub|text|latex|man|...}} {{path/to/source_dir}} {{path/to/build_dir}}##Build documentation
sphinx-build -b {{html}} {{path/to/docs_dir}} {{path/to/build_dir}}##Build documentations intended for readthedocs.io (requires the sphinx-rtd-theme pip package)
spike clean##Remove the output directory
spike compile##Compile your project once to the "public" directory
spike new {{project_name}}##Create a new project using the default template
spike watch##Compile your project, watch for changes, and auto-reload the browser
split -C {{512}} {{filename}}##Split a file with at most 512 bytes in each split without breaking lines
split -b {{512}} {{filename}}##Split a file with 512 bytes in each split (except the last split; use 512k for kilobytes and 512m for megabytes)
split -l {{10}} {{filename}}##Split a file, each split having 10 lines (except the last split)
split -n {{5}} {{filename}}##Split a file into 5 files. File is split such that each split has same size (except the last split)
sqlite3 {{path/to/database.sqlite3}} '{{SELECT * FROM some_table;}}'##Execute an SQL statement against a database and then exit
sqlite3 {{path/to/database.sqlite3}}##Open an interactive shell against an existing database
sqlite3##Start an interactive shell with a new database
sqsc cp {{source_queue}} {{destination_queue}}##Copy all messages from one queue to another
sqsc describe {{queue_name}}##Describe a queue
sqsc lq {{queue_prefix}}##List all queues
sqsc ls {{queue_name}}##List all messages in a queue
sqsc mv {{source_queue}} {{destination_queue}}##Move all messages from one queue to another
sqsc pull {{queue_name}}##Pull all messages from a queue into a local SQLite database in your present working directory
sqsc query "SELECT body FROM {{queue_name}} WHERE body LIKE '%user%'"##Query a queue with SQL syntax
sr {{elvi}} "{{search_terms}}"##Search using the alias
srm -i {{\*}}##Prompt before every removal
srm -m {{path/to/file}}##Remove a file after seven passes of overwriting with random data
srm -r -s {{path/to/directory}}##Recursively remove a directory and its contents overwriting each file with a single-pass of random data
srm -s {{path/to/file}}##Remove a file after a single-pass overwriting with random data
ss-local --fast-open##Enable TCP fast open
ss-local --plugin {{plugin_name}} --plugin-opts {{plugin_options}}##Use a plugin to run the proxy client
ss-local -c {{path/to/config/file.json}}##Run a Shadowsocks proxy by specifying the config file
ss-local -s {{host}} -p {{server_port}} -l {{local port}} -k {{password}} -m {{encrypt_method}}##Run a Shadowsocks proxy by specifying the host, server port, local port, password, and encryption method
ssh -A {{username}}@{{remote_host}}##Agent forwarding Forward the authentication information to the remote machine (see `man ssh_config` for available options)
ssh -D {{1080}} {{username}}@{{remote_host}}##SSH tunneling Dynamic port forwarding (SOCKS proxy on `localhost1080`)
ssh -J {{username}}@{{jump_host}} {{username}}@{{remote_host}}##SSH jumping Connect through a jumphost to a remote server (Multiple jump hops may be specified separated by comma characters)
ssh -L {{9999}}:{{example.org}}:{{80}} -N -T {{username}}@{{remote_host}}##SSH tunneling Forward a specific port (`localhost9999` to `example.org80`) along with disabling pseudo-[T]ty allocation and executio[N] of remote commands
ssh -i {{path/to/key_file}} {{username}}@{{remote_host}}##Connect to a remote server with a specific identity (private key)
ssh {{username}}@{{remote_host}} -p {{2222}}##Connect to a remote server using a specific port
ssh {{username}}@{{remote_host}} -t {{command}} {{command_arguments}}##Run a command on a remote server with a [t]ty allocation allowing interaction with the remote command
ssh {{username}}@{{remote_host}}##Connect to a remote server
ssh-add -D##Delete all currently loaded keys from the ssh-agent
ssh-add -K {{path/to/private_key}}##Add a key to the ssh-agent and the keychain
ssh-add -d {{path/to/private_key}}##Delete a key from the ssh-agent
ssh-add -l##List fingerprints of currently loaded keys
ssh-add {{path/to/private_key}}##Add a specific key to the ssh-agent
ssh-add##Add the default ssh keys in `~/.ssh` to the ssh-agent
ssh-agent -k##Kill the currently running agent
ssh-copy-id -i {{path/to/certificate}} -p {{port}} {{username}}@{{remote_host}}##Copy the given public key to the remote with specific port
ssh-copy-id -i {{path/to/certificate}} {{username}}@{{remote_host}}##Copy the given public key to the remote
ssh-copy-id {{username@remote_host}}##Copy your keys to the remote machine
ssh-keygen -R {{remote_host}}##Remove the keys of a host from the known_hosts file (useful when a known host has a new key)
ssh-keygen -f {{~/.ssh/filename}}##Specify file in which to save the key
ssh-keygen -l -E {{md5}} -f {{~/.ssh/filename}}##Retrieve the fingerprint of a key in MD5 Hex
ssh-keygen -p -N "" -m {{PEM}} -f {{~/.ssh/OpenSSH_private_key}}##Change the type of the key format (for example from OPENSSH format to PEM), the file will be rewritten in-place
ssh-keygen -p -f {{~/.ssh/filename}}##Change the password of a key
ssh-keygen -t {{dsa|ecdsa|ed25519|rsa}} -b {{4096}} -C "{{comment|email}}"##Generate an RSA 4096-bit key with email as a comment
ssh-keygen -t {{ed25519}} -a {{100}}##Generate an ed25519 key with 100 key derivation function rounds
ssh-keygen##Generate a key interactively
ssh-keyscan -H {{host}} >> ~/.ssh/known_hosts##Manually update the ssh known_hosts file with the fingerprint of a given host
ssh-keyscan -p {{port}} {{host}}##Retrieve all public ssh keys of a remote host listening on a specific port
ssh-keyscan -t {{rsa,dsa,ecdsa,ed25519}} {{host}}##Retrieve certain types of public ssh keys of a remote host
ssh-keyscan {{host}}##Retrieve all public ssh keys of a remote host
sshd -D -d##Run with verbose output (for debugging)
sshd -D##Run sshd in the foreground
sshd -p {{port}}##Run on a specific port
sshd##Start daemon in the background
sshfs -o follow_symlinks {{username}}@{{remote_host}}:{{remote_directory}} {{mountpoint}}##Follow symbolic links
sshfs {{username}}@{{remote_host}}:{{remote_directory}} -C##Use compression
sshfs {{username}}@{{remote_host}}:{{remote_directory}} -p {{2222}}##Mount remote directory from server with specific port
sshfs {{username}}@{{remote_host}}:{{remote_directory}} {{mountpoint}}##Mount remote directory
sshpass -d {{0}} ssh {{user}}@{{hostname}}##Connect to a remote server using a password supplied on a file descriptor (in this case, stdin)
sshpass -f {{file}} ssh -o StrictHostKeyChecking=no {{user}}@{{hostname}} "{{command}}"##Connect to a remote server using the first line of a file as the password, automatically accept unknown ssh keys, and launch a command
sshpass -p {{password}} ssh -o StrictHostKeyChecking=no {{user}}@{{hostname}}##Connect to a remote server with the password supplied as an option, and automatically accept unknown ssh keys
sshuttle --dns --remote={{username}}@{{sshserver}} {{0.0.0.0/0}}##Also forward all DNS traffic to the server's default DNS resolver
sshuttle --method=tproxy --remote={{username}}@{{sshserver}} {{0.0.0.0/0}} {{::/0}} --exclude={{your_local_ip_address}} --exclude={{ssh_server_ip_address}}##Use the tproxy method to forward all IPv4 and IPv6 traffic
sshuttle --remote={{username}}@{{sshserver}} {{0.0.0.0/0}} --exclude {{192.168.0.1/24}}##Forward all traffic except that which is bound for a specific subnet
sshuttle --remote={{username}}@{{sshserver}} {{0.0.0.0/0}}##Forward all IPv4 TCP traffic via a remote SSH server
sslscan {{example.com}}##Test a server on port 443
sslscan {{example.com}}:{{465}}##Test a specified port
st-flash erase##Erase firmware from device
st-flash read {{firmware}}.bin {{0x8000000}} {{4096}}##Read 4096 bytes from the device starting from 0x8000000
st-flash write {{firmware}}.bin {{0x8000000}}##Write firmware to device starting from 0x8000000
st-info --flash##Display amount of program memory available
st-info --probe##Display summarized information of the device
st-info --sram##Display amount of SRAM memory available
st-util -p {{4500}}##Run GDB server on port 4500
stack build --exec "{{command}}"##Compile a project and execute a command after compilation
stack build --file-watch##Compile a project and re-compile every time a file changes
stack build yesod-bin cabal-install --install-ghc##Install the Yesod CLI tool within a Yesod scaffolded site
stack build##Compile a package
stack exec -- yesod devel##Start development server
stack exec -- yesod keter##Deploy application using Keter (Yesod's deployment manager)
stack exec -- yesod touch##Touch files with altered Template Haskell dependencies
stack exec {{program_name}} -- {{argument}}##Run a program and pass an argument to it
stack new {{my-project}} {{yesod-sqlite}}##Create a new scaffolded site, with SQLite as backend, in the `my-project` directory
stack new {{package_name}} {{template_name}}##Create a new package
stack test##Run tests inside a package
standard --env {{environment}}##Use a custom ESLint environment when linting
standard --fix##Apply automatic fixes during linting
standard --global {{variable}}##Declare any available global variables
standard --parser {{parser}}##Use a custom JS parser when linting
standard --plugin {{plugin}}##Use a custom ESLint plugin when linting
standard {{path/to/file(s)}}##Lint specific JavaScript file(s)
standard##Lint all JavaScript source files in the current directory
standard-version --commit-all##Tag a release committing all staged changes, not just files affected by `standard-version`
standard-version --dry-run##Display the release that would be performed without performing them
standard-version --first-release##Tag a release without bumping the version
standard-version --infile {{path/to/file.md}}##Update a specific changelog file and tag a release
standard-version --no-verify##Tag a release, preventing hooks from being verified during the commit step
standard-version --prerelease alpha##Update the changelog and tag an alpha release
standard-version --release-as {{major|minor|patch}}##Update the changelog and tag a specific release type
standard-version##Update the changelog file and tag a release
starship bug-report##Create a bug report GitHub issue pre-populated with information about the system and starship configuration
starship completions {{bash|elvish|fish|powershell|zsh}}##Print the completion script for the specified shell
starship configure##Edit the starship configuration in the default editor
starship explain##Explain each part of the current prompt and show the time taken to render them
starship init --help##Display the subcommand help
starship init {{bash|elvish|fish|ion|powershell|tcsh|zsh}}##Print the starship integration code for the specified shell
starship init {{bash|elvish|fish|ion|powershell|tcsh|zsh}}##Print the starship integration code for the specified shell
starship init {{bash}} >> {{~/.bashrc}}##Append the `starship` integration code to `~/.bashrc`
starship init {{zsh}} >> {{~/.zshrc}}##Append the `starship` integration code to `~/.zshrc`
starship module --list##List supported modules
starship print-config##Print the computed starship configuration (use `--default` to print default configuration instead)
starship {{subcommand}} --help##Display help for a subcommand
stat -c "%U %G" {{file}}##Show owner and group of the file
stat -c "%a %n" {{file}}##Show only octal file permissions
stat -c "%s %n" {{file}}##Show the size of the file in bytes
stat -f {{file}}##Show filesystem information
stat -t {{file}}##Same as above but in a more concise way
stat {{file}}##Show file properties such as size, permissions, creation and access dates among others
status {{instance_id}};##Check the status of an instance
stdbuf --error={{0}} {{command}}##Change the standard error buffer to unbuffered
stdbuf --input={{512K}} {{command}}##Change the standard input buffer size to 512 KiB
stdbuf --output={{L}} {{command}}##Change the standard output buffer to line-buffered
steam -console##Launch Steam and enable its in-app debug console tab
steam -login {{username}} {{password}}##Log into Steam with the specified credentials
steam -shutdown##Exit Steam
steam -tenfoot##Launch Steam in Big Picture Mode
steam steam://open/console##Enable and open the Steam console tab in a running Steam instance
steam##Launch Steam, printing debug messages to stdout
steamcmd +@sSteamCmdForcePlatformType {{windows}} +login {{anonymous}} +app_update {{appid}} validate +quit##Install an application for a specific platform
steamcmd +login {{anonymous}} +app_update {{appid}} +quit##Install or update an application anonymously
steamcmd +login {{username}} +app_update {{appid}} +quit##Install or update an application using the specified credentials
stern . --container-state {{running|waiting|terminated}}##Tail all pods with a specific status
stern .##Tail all pods within a current namespace
stern {{pod_query}} --all-namespaces##Tail matched pods from all namespaces
stern {{pod_query}} --selector {{release=canary}}##Tail matched pods with a specific label
stern {{pod_query}} --since {{15m}}##Tail matched pods from 15 minutes ago
stern {{pod_query}}##Tail all pods that matches a given regular expression
stl2gts --help##Print help for `stl2gts`
stl2gts --nomerge < {{path/to/file.stl}} > {{path/to/file.gts}}##Convert an STL file to a GTS file and do not merge vertices
stl2gts --revert < {{path/to/file.stl}} > {{path/to/file.gts}}##Convert an STL file to a GTS file and revert face normals
stl2gts --verbose < {{path/to/file.stl}} > {{path/to/file.gts}}##Convert an STL file to a GTS file and display surface statistics
stl2gts < {{path/to/file.stl}} > {{path/to/file.gts}}##Convert an STL file to a GTS file
stolonctl --cluster-name {{cluster_name}} --store-backend {{store_backend}} --store-endpoints {{store_endpoints}} clusterdata##Get cluster data
stolonctl --cluster-name {{cluster_name}} --store-backend {{store_backend}} --store-endpoints {{store_endpoints}} spec##Get cluster specification
stolonctl --cluster-name {{cluster_name}} --store-backend {{store_backend}} --store-endpoints {{store_endpoints}} status##Get cluster status
stolonctl --cluster-name {{cluster_name}} --store-backend {{store_backend}} --store-endpoints {{store_endpoints}} update --patch '{{cluster_spec}}'##Update cluster specification with a patch in JSON format
stormlock aquire {{resource}}##Acquire a lease for resource
stormlock current {{resource}}##Show information on the current lease for a resource, if any
stormlock is-held {{resource}} {{lease_id}}##Test if a lease for given resource is currently active
stormlock release {{resource}} {{lease_id}}##Release the given lease for the given resource
stow --delete --target={{path/to/target_directory}} {{file1 directory1 file2 directory2}}##Delete symlinks recursively from a given directory
stow --ignore={{regular_expression}} --target={{path/to/target_directory}} {{file1 directory1 file2 directory2}}##Exclude files matching a regular expression
stow --restow --target={{path/to/target_directory}} {{file1 directory1 file2 directory2}}##Delete and resymlink
stow --simulate --target={{path/to/target_directory}} {{file1 directory1 file2 directory2}}##Simulate to see what the result would be like
stow --target={{path/to/target_directory}} {{file1 directory1 file2 directory2}}##Symlink all files recursively to a given directory
streamlink --hls-live-restart {{example.com/stream}} {{best}}##Skip to the beginning of a live stream, or as far back as possible
streamlink --hls-start-offset {{[HH:]MM:SS}} {{example.com/stream}} {{best}}##Specify the amount of time to skip from the beginning of the stream. For live streams, this is a negative offset from the end of the stream (rewind)
streamlink --output {{path/to/file.ts}} {{example.com/stream}} {{best}}##Write stream data to a file instead of playing it
streamlink --player={{mpv}} {{example.com/stream}} {{best}}##Specify which player to use to feed stream data to (VLC is used by default if found)
streamlink --record {{path/to/file.ts}} {{example.com/stream}} {{best}}##Open the stream in the player, while at the same time writing it to a file
streamlink {{example.com/stream}} {{720p60}}##Open a stream with the specified quality
streamlink {{example.com/stream}} {{best|worst}}##Select the highest or lowest available quality
streamlink {{example.com/stream}}##Attempt to extract streams from the URL specified, and if it's successful, print out a list of available streams to choose from
strings -n {{length}} {{file}}##Limit results to strings at least *length* characters long
strings -t d {{file}}##Prefix each result with its offset within the file
strings -t x {{file}}##Prefix each result with its offset within the file in hexadecimal
strings {{file}}##Print all strings in a binary
strip-nondeterminism --timestamp {{unix_timestamp}} {{path/to/file}}##Strip nondeterministic information from a file; instead of removing timestamps set them to the specified UNIX timestamp
strip-nondeterminism --type {{filetype}} {{path/to/file}}##Strip nondeterministic information from a file manually specifying the filetype
strip-nondeterminism {{path/to/file}}##Strip nondeterministic information from a file
stripe customers create --email="{{test@example.com}}" --name="{{Jenny Rosen}}"##Create a customer
stripe listen --events="{{charge.succeeded}}" --forward-to="{{localhost:3000/events}}"##Listen for events, filtering on events with the name `charge.succeeded` and forwarding them to localhost3000/events
stripe listen --print-json##Print to JSON
stripe logs tail##Follow the logs of activity on the account
stripe trigger {{charge.succeeded}}##Send a test webhook event
stty -F {{path/to/device_file}} speed##Get the actual transfer speed of a device
stty -a##Display all settings for the current terminal
stty cols {{cols}}##Set the number of columns
stty rows {{rows}}##Set the number of rows
stty sane##Reset all modes to reasonable values for the current terminal
su - {{username}} -c "{{command}}"##Execute a command as another user
su - {{username}}##Switch to a given user and simulate a full login shell
su {{username}}##Switch to a given user (requires the user's password)
su##Switch to superuser (requires the root password)
subfinder --silent -d {{example.com}}##Show only the subdomains found
subfinder -d {{example.com}} -b##Use a brute-force attack to find subdomains
subfinder -d {{example.com}}##Find subdomains for a specific domain
subfinder -nW -d {{example.com}}##Remove wildcard subdomains
subfinder -r {{8.8.8.8}},{{1.1.1.1}} -d {{example.com}}##Use a given comma-separated list of resolvers
subl -a {{path/to/file}}##Open a file or directory in the currently open window
subl -n {{path/to/file}}##Open a file or directory in a new window
subl {{.}}##Open the current directory in Sublime Text
subl {{path/to/file_or_directory}}##Open a file or directory in Sublime Text
subl {{path/to/file}}:{{line_number}}##Open a file and jump to a specific line number
subliminal download -l {{en}} {{video.ext}}##Download English subtitles for a video
sublist3r --domain {{domain_name}} --bruteforce##Find subdomains for a domain, also enabling brute force search
sublist3r --domain {{domain_name}} --output {{path/to/output_file}}##Save the found subdomains to a text file
sublist3r --domain {{domain_name}}##Find subdomains for a domain
sublist3r --help##Output all available options
sudo !!##Repeat the last command prefixed with `sudo` (only in `bash`, `zsh`, etc.)
sudo !!##Run the previous command as root (`!!` is replaced by the previous command)
sudo --edit {{/etc/fstab}}##Edit a file as the superuser with your default editor
sudo --list##List the allowed (and forbidden) commands for the invoking user
sudo --login --user={{user}}##Launch the default shell as the specified user, loading the user's environment and reading login-specific files (`.profile`, `.bash_profile`, etc.)
sudo --login##Launch the default shell with superuser privileges and run login-specific files (`.profile`, `.bash_profile`, etc.)
sudo --shell##Launch the default shell with superuser privileges without changing the environment
sudo --user={{user}} --group={{group}} {{id -a}}##Run a command as another user and/or group
sudo airmon-ng check kill##Kill disturbing processes that use wireless devices
sudo airmon-ng start {{wlan0}}##Turn on monitor mode for a specific device
sudo airmon-ng stop {{wlan0mon}}##Turn off monitor mode for a specific network interface
sudo airmon-ng##List wireless devices and their statuses
sudo arp -a -d##Clear the entire cache
sudo atq##Show jobs of all users (run as superuser)
sudo badblocks -n {{/dev/sdX}}##Search an unmounted disk for bad blocks with a non-destructive read-write test
sudo badblocks -o {{path/to/file}} -w {{/dev/sdX}}##Search an unmounted disk in destructive mode and output found blocks to a file
sudo badblocks -svw {{/dev/sdX}}##Search an unmounted disk for bad blocks with a destructive write test and show verbose status
sudo badblocks -w -b {{4096}} -c {{65536}} {{/dev/sdX}}##Search an unmounted disk in destructive mode with improved speed using 4K block size and 64K block count
sudo badblocks -w {{/dev/sdX}}##Search an unmounted disk for bad blocks with a destructive write test
sudo badblocks {{/dev/sdX}}##Search a disk for bad blocks by using a non-destructive read-only test
sudo bootctl --esp-path={{/path/to/efi_system_partition/}}##Specify the path to the EFI system partition (defaults to `/efi/`, `/boot/` or `/boot/efi`)
sudo bootctl install##Install `systemd-boot` into the EFI system partition
sudo bootctl list##Show all available bootloader entries
sudo bootctl reboot-to-firmware true##Set a flag to boot into the system firmware on the next boot (similar to `sudo systemctl reboot --firmware-setup`)
sudo bootctl remove##Remove all installed versions of `systemd-boot` from the EFI system partition
sudo bootctl status##Show information about the system firmware and the bootloaders
sudo code --user-data-dir {[path/to/directory}}##Start the editor as a superuser (root) while storing user data in a specific directory
sudo crontab -e -u {{user}}##Edit the crontab file for a specific user
sudo dhclient -r {{eth0}}##Release an IP address for the `eth0` interface
sudo dhclient {{eth0}}##Get an IP address for the `eth0` interface
sudo f3fix --boot {{/dev/device_name}}##Mark the partition as bootable
sudo f3fix --fs-type={{filesystem_type}} {{/dev/device_name}}##Specify the filesystem
sudo f3fix {{/dev/device_name}}##Fill a fake flash drive with a single partition that matches its real capacity
sudo f3probe --min-memory {{path/to/block_device}}##Use the minimum about of RAM possible
sudo f3probe --time-ops {{path/to/block_device}}##Time disk operations
sudo f3probe {{path/to/block_device}}##Probe a block device
sudo fio --filename={{path/to/file}} --direct=1 --rw=randread --bs=4k --ioengine=libaio --iodepth=256 --runtime=120 --numjobs=4 --time_based --group_reporting --name={{job_name}} --eta-newline=1 --readonly##Test random reads
sudo fio --filename={{path/to/file}} --direct=1 --rw=read --bs=4k --ioengine=libaio --iodepth=256 --runtime=120 --numjobs=4 --time_based --group_reporting --name={{job_name}} --eta-newline=1 --readonly##Test sequential reads
sudo fio --filename={{path/to/file}} --size=500GB --direct=1 --rw=randrw --bs=4k --ioengine=libaio --iodepth=256 --runtime=120 --numjobs=4 --time_based --group_reporting --name={{job_name}} --eta-newline=1##Test random read/write
sudo gitlab-ctl restart {{nginx}}##Restart a specific service
sudo gitlab-ctl restart##Restart every service
sudo gitlab-ctl status {{nginx}}##Display the status of a specific service
sudo gitlab-ctl status##Display the status of every service
sudo gitlab-ctl tail {{nginx}}##Display the logs of a specific service
sudo gitlab-ctl tail##Display the logs of every service and keep reading until `Ctrl + C` is pressed
sudo gitlab-runner register --url {{https://gitlab.example.com}} --registration-token {{token}} --name {{name}} --executor {{docker}}##Register a runner with a Docker executor
sudo gitlab-runner register --url {{https://gitlab.example.com}} --registration-token {{token}} --name {{name}}##Register a runner
sudo gitlab-runner restart##Restart the runner service
sudo gitlab-runner status##Display the status of the runner service
sudo gitlab-runner unregister --name {{name}}##Unregister a runner
sudo gitlab-runner verify##Check if the registered runners can connect to GitLab
sudo hostapd -B {{path/to/hostapd.conf}}##Start an access point, forking into the background
sudo hostapd {{path/to/hostapd.conf}}##Start an access point
sudo iotop --accumulated##Show accumulated I/O instead of bandwidth
sudo iotop --batch##Show I/O usage in non-interactive mode
sudo iotop --only##Show only processes or threads actually doing I/O
sudo iotop --pid={{PID}}##Show I/O usage of given PID(s)
sudo iotop --processes##Show only I/O usage of processes (default is to show all threads)
sudo iotop --user={{user}}##Show I/O usage of a given user
sudo iotop##Start top-like I/O monitor
sudo logstash --config {{logstash_config.conf}}##Run Logstash using configuration
sudo logstash -e 'input {} filter {} output {}'##Run Logstash with the most basic inline configuration string
sudo maza start##Start Maza
sudo maza stop##Stop Maza
sudo nix-collect-garbage --delete-old --dry-run##Simulate the deletion of old store paths
sudo nix-collect-garbage --delete-old##Delete all store paths unused by current generations of each profile
sudo nix-collect-garbage --delete-older-than {{30d}}##Delete all store paths older than 30 days
sudo openvpn --remote {{alice.example.com}} --dev {{tun1}} --ifconfig {{10.4.0.1}} {{10.4.0.2}} --secret {{path/to/key}}##Try to set up a peer-to-peer tunnel on bob.example.com host with a static key
sudo openvpn --remote {{alice.example.com}} --dev {{tun1}} --ifconfig {{10.4.0.1}} {{10.4.0.2}}##Try to set up an insecure peer-to-peer tunnel on bob.example.com host
sudo openvpn --remote {{bob.example.com}} --dev {{tun1}} --ifconfig {{10.4.0.2}} {{10.4.0.1}} --secret {{path/to/key}}##Connect to the awaiting bob.example.com host with the same static key as on bob.example.com
sudo openvpn --remote {{bob.example.com}} --dev {{tun1}} --ifconfig {{10.4.0.2}} {{10.4.0.1}}##Connect to the awaiting bob.example.com host without encryption
sudo openvpn {{path/to/client.conf}}##Connect to server using a config file
sudo prosodyctl adduser {{user@example.com}}##Add a user to the Prosody XMPP server
sudo prosodyctl deluser {{user@example.com}}##Permanently delete a user
sudo prosodyctl passwd {{user@example.com}}##Set a user's password
sudo prosodyctl reload##Reload the server's configuration files
sudo prosodyctl status##Show the status of the Prosody server
sudo pueue completions bash {{/usr/share/bash-completion/completions/pueue.bash}}##Generate completions for Bash
sudo pueue completions fish {{/usr/share/fish/completions}}##Generate completions for fish
sudo pueue completions zsh {{/usr/share/zsh/site-functions}}##Generate completions for zsh
sudo quota -u {{username}}##Show disk quotas for another user
sudo route add -net {{ip_address}} netmask {{netmask_address}} gw {{gw_address}}##Add route rule
sudo route del -net {{ip_address}} netmask {{netmask_address}} dev {{gw_address}}##Delete route rule
sudo runsv {{path/to/service}}##Start a runit service as root
sudo runsvchdir {{path/to/directory}}##Switch `runsvdir` directories
sudo runsvdir {{path/to/services}}##Start and manage all services in a directory as root
sudo singularity build {{image.sif}} {{recipe}}##Build a singularity image from a recipe file
sudo smartctl --capabilities {{/dev/sdX}}##View current/last self-test status and other SMART capabilities
sudo smartctl --health {{/dev/sdX}}##View SMART health summary
sudo smartctl --info {{/dev/sdX}}##View device information
sudo smartctl --log selftest {{/dev/sdX}}##View SMART self-test log (if supported)
sudo smartctl --test short {{/dev/sdX}}##Begin a short self-test
sudo sv down {{path/to/service}}##Stop a service
sudo sv once {{path/to/service}}##Start a service, but only if it's not running and don't restart it if it stops
sudo sv reload {{path/to/service}}##Reload a service
sudo sv status {{path/to/service}}##Get service status
sudo sv up {{path/to/service}}##Start a service
sudo tailscale down##Disconnect from Tailscale
sudo tailscale file cp {{path/to/file}} {{hostname|ip}}:##Send a file to a specific node
sudo tailscale file get {{path/to/directory}}##Store files that were sent to the current node into a specific directory
sudo tailscale up --accept-dns={{false}}##Connect and don't accept DNS configuration from the admin panel (defaults to `true`)
sudo tailscale up --accept-routes##Connect and accept subnet routes from Tailscale
sudo tailscale up --advertise-exit-node##Connect and offer the current machine to be an exit node for internet traffic
sudo tailscale up --advertise-routes={{10.0.0.0/24}},{{10.0.1.0/24}}##Connect and configure Tailscale as a subnet router
sudo tailscale up --exit-node={{exit_node_ip}}##Connect using a specific node for internet traffic
sudo tailscale up --reset##Reset unspecified settings to their default values and connect
sudo tailscale up --shields-up##Connect and block incoming connections to the current node
sudo tailscale up##Connect to Tailscale
sudo tailscale up##Connect to Tailscale
sudo tlmgr gui -background "{{#f39bc3}}"##Start a GUI specifying the background color
sudo tlmgr gui -font "{{helvetica 18}}"##Start a GUI specifying the font and font size
sudo tlmgr gui -foreground "{{#0ef3bd}}"##Start a GUI specifying the foreground color
sudo tlmgr gui -geometry {{width}}x{{height}}-{{xpos}}+{{ypos}}##Start a GUI setting a specific geometry
sudo tlmgr gui -xrm {{xresource}}##Start a GUI passing an arbitrary X resource string
sudo tlmgr gui##Start a GUI for `tlmgr`
sudo tlmgr install --file {{path/to/package}}##Install a package from a specific file
sudo tlmgr install --no-depends {{package}}##Install a package without its dependencies
sudo tlmgr install --reinstall {{package}}##Reinstall a package
sudo tlmgr install {{package}}##Install a package and its dependencies
sudo tlmgr paper {{a4}}##Set the default paper size for all TeX Live programs to A4
sudo tlmgr path add##Add symlinks to TeX Live files
sudo tlmgr path remove##Remove symlinks to TeX Live files
sudo tlmgr platform add {{platform}}##Add the executables for a specific platform
sudo tlmgr platform remove {{platform}}##Remove the executables for a specific platform
sudo tlmgr platform set {{auto}}##Auto-detect and switch to the current platform
sudo tlmgr platform set {{platform}}##Switch to a specific platform
sudo tlmgr remove --all##Uninstall all of TeX Live, asking for confirmation
sudo tlmgr remove --backupdir {{path/to/directory}} {{package}}##Uninstall a package and back it up to a specific directory
sudo tlmgr remove --no-depends {{package}}##Uninstall a package without its dependencies
sudo tlmgr remove {{package}}##Uninstall a TeX Live package
sudo tlmgr update --all --backup##Update all packages, making a backup of the current packages
sudo tlmgr update --all --dry-run##Simulate updating all packages without making any changes
sudo tlmgr update --all --exclude {{package}}##Update all except a specific package
sudo tlmgr update --all##Update all TeX Live packages
sudo tlmgr update --no-depends {{package}}##Update a specific package without updating its dependencies
sudo tlmgr update --self##Update tlmgr itself
sudo tlmgr update {{package}}##Update a specific package
sudo tlmgr {{pdftex}} paper {{a4}}##Set the default paper size for a specific TeX Live program to A4
sudo visudo -c##Check the sudoers file for errors
sudo visudo##Edit the sudoers file
sudo whoami##Display the username after a change in the user ID
sudo zeek --bare-mode --iface {{interface}}##Analyze live traffic from a network interface, without loading any scripts
sudo zeek --filter {{path/to/filter}} --iface {{interface}}##Analyze live traffic from a network interface, applying a `tcpdump` filter
sudo zeek --iface {{interface}} {{script1}} {{script2}}##Analyze live traffic from a network interface and load custom scripts
sudo zeek --iface {{interface}}##Analyze live traffic from a network interface
sudo zeek --watchdog --iface {{interface}}##Analyze live traffic from a network interface using a watchdog timer
sudo {{less /var/log/syslog}}##Run a command as the superuser
sum --sysv {{file}}##Compute a checksum with System V-compatible algorithm and 512-byte blocks
sum {{file}}##Compute a checksum with BSD-compatible algorithm and 1024-byte blocks
sup {{path/to/file.html}}##Add an article to the RSS feed
supervisorctl tail -100 {{process_name}} stderr##Show last 100 **bytes** of process stderr
supervisorctl tail -f {{process_name}} stdout##Keep displaying stdout of a process
supervisorctl update##Reload process config file to add/remove processes as necessary
supervisorctl {{start|stop|restart}} {{group_name}}:*##Start/stop/restart all processes in a group
supervisorctl {{start|stop|restart}} {{process_name}}##Start/stop/restart a process
supervisord -c {{path/to/file}}##Start supervisord with specified configuration file
supervisord -n##Run supervisord in the foreground
surfraw -elvi##Display the list of supported website search scripts (elvi)
surfraw -print {{elvi}} "{{search_terms}}"##Display the URL to the elvi's results page for a specific search
surfraw {{elvi}} "{{search_terms}}"##Open the elvi's results page for a specific search in the browser
surfraw {{elvi}} -local-help##Display an elvi description and its specific options
surfraw {{elvi}} {{elvi_options}} "{{search_terms}}"##Search using an elvi with specific options and open the results page in the browser
surge list##List your surge projects
surge teardown {{my_custom_domain.com}}##Remove a project
surge {{path/to/my_project}} {{my_custom_domain.com}}##Deploy site to custom domain (note that the DNS records must point to the surge.sh subdomain)
surge {{path/to/my_project}}##Upload a new site to surge.sh
svgcleaner --multipass {{input.svg}} {{output.svg}}##Optimize an SVG multiple times
svgcleaner {{input.svg}} {{output.svg}}##Optimize an SVG
svgo --show-plugins##Show available plugins
svgo -f {{path/to/directory/with/svg/files}}##Optimize all SVG files within a directory (overwrites the original files)
svgo -f {{path/to/input/directory}} -o {{path/to/output/directory}}##Optimize all SVG files within a directory and save the resulting files to another directory
svgo {{test.svg}} -o -##Optimize a file and print out the result
svgo {{test.svg}} -o {{test.min.svg}}##Optimize a file and save the result to another file
svgo {{test.svg}}##Optimize a file using the default plugins (overwrites the original file)
svgr -- {{path/to/file.svg}}##Transform a SVG file into a React component to stdout
svgr --jsx-runtime automatic -- {{path/to/file.svg}}##Transform a SVG file into a React component using JSX transform to stdout
svgr --out-dir {{path/to/output_directory}} --filename-case {{camel|kebab|pascal}} {{path/to/input_directory}}##Transform all SVG files from a directory to React components into a specific directory using a specific case for filenames
svgr --out-dir {{path/to/output_directory}} --ignore-existing {{path/to/input_directory}}##Transform all SVG files from a directory to React components into a specific directory skipping already transformed files
svgr --out-dir {{path/to/output_directory}} --no-index {{path/to/input_directory}}##Transform all SVG files from a directory to React components into a specific directory without generating an index file
svgr --out-dir {{path/to/output_directory}} {{path/to/input_directory}}##Transform all SVG files from a directory to React components into a specific directory
svgr --typescript -- {{path/to/file.svg}}##Transform a SVG file into a React component using TypeScript to stdout
svn add {{PATH}}##Put files and directories under version control, scheduling them for addition to repository. They will be added in next commit
svn changelist --recursive {{changelist_name}} {{path/to/directory1}} {{path/to/directory2}}##Add the contents of a space-separated list of directories to a changelist
svn changelist --remove --recursive --changelist {{changelist_name}} .##Remove the whole changelist at once
svn changelist --remove {{path/to/file1}} {{path/to/file2}}##Remove files from a changelist
svn changelist {{changelist_name}} {{path/to/file1}} {{path/to/file2}}##Add files to a changelist, creating the changelist if it does not exist
svn ci -m {{commit_log_message}} [{{PATH}}]##Send changes from your working copy to the repository
svn co {{url/to/repository}}##Check out a working copy from a repository
svn commit --changelist {{changelist_name}}##Commit a changelist
svn help##Show detailed help
svn log -vl {{10}}##Display changes from the last 10 revisions, showing modified files for each revision
svn up##Bring changes from the repository into the working copy
swagger-codegen generate -i {{http://petstore.swagger.io/v2/swagger.json}} -l {{java}} --library {{retrofit2}} -D{{useRxJava2}}={{true}}##Generate Java code using the library retrofit2 and the option useRxJava2
swagger-codegen generate -i {{swagger_file}} -l {{language}}##Generate documentation and code from an OpenAPI/swagger file
swagger-codegen help {{generate}}##Display help options for the generate command
swagger-codegen langs##List available languages
swc {{path/to/file}} --watch##Transpile the input file every time it is changed
swc {{path/to/file}}##Transpile a specified input file and output to stdout
swc {{path/to/input_directory}} --config-file {{path/to/.swcrc}}##Transpile a specified input directory using a specific configuration file
swc {{path/to/input_directory}} --ignore {{ignored_files}}##Ignore files in a directory specified using glob path
swc {{path/to/input_directory}} --out-dir {{path/to/output_directory}}##Transpile a specified input directory and output to a specific directory
swc {{path/to/input_file}} --out-file {{path/to/output_file}}##Transpile a specified input file and output to a specific file
swift build -c release##Compile project for release
swift package generate-xcodeproj##Generate an Xcode project file
swift package init##Start a new project with the package manager
swift package update##Update dependencies
swift {{file.swift}}##Execute a program
swift##Start a REPL (interactive shell)
swig -c++ -python -o {{path/to/output_wrapper.cpp}} {{path/to/swig_file.i}}##Generate a binding between C++ and Python
swig -go -cgo -intgosize 64 -c++ {{path/to/swig_file.i}}##Generate a binding between C++ and Go
swig -java {{path/to/swig_file.i}}##Generate a binding between C and Java
swig -ruby -prefix "{{foo::bar::}}" {{path/to/swig_file.i}}##Generate a binding between C and Ruby and prefix the Ruby module with {{foobar}}
swipl --dump-runtime-variables##Print all shell configuration variables
swipl --quiet -t "{{command}}"##Execute a command without showing any output
swipl --version##Print the version
swipl {{path/to/file.pl}}##Execute a script
swipl##Start an interactive session
symfony new {{name}}##Create a new Symfony project
symfony security:check##Check for security issues in the project's dependencies
symfony serve##Run a local web server
symfony server:stop##Stop the local web server
sync {{path/to/file}}##Flush all pending write operations on a single file to disk
sync##Flush all pending write operations on all disks
syncthing -device-id##Print the device ID
syncthing -gui-address={{ip_address:port|path/to/socket.sock}}##Change the address upon which the web interface listens
syncthing -home={{path/to/directory}}##Change the home directory
syncthing -no-browser##Start Syncthing without opening a web browser
syncthing -no-restart##Disable the Syncthing monitor process
syncthing -paths##Show filepaths to the files used by Syncthing
syncthing -reset-deltas##Force a full index exchange
syncthing##Start Syncthing
t {{message}}##Tweet the message as-is
tabula --format JSON -o {{file.json}} {{file.pdf}}##Extract all tables from a PDF to a JSON file
tabula --guess --pages {{1}} {{file.pdf}}##Extract tables from page 1 of a PDF, guessing which portion of the page to examine
tabula --no-spreadsheet {{file.pdf}}##Extract all tables from a PDF, using blank space to determine cell boundaries
tabula --pages {{1-3,6}} {{file.pdf}}##Extract tables from pages 1, 2, 3, and 6 of a PDF
tabula --spreadsheet {{file.pdf}}##Extract all tables from a PDF, using ruling lines to determine cell boundaries
tabula -o {{file.csv}} {{file.pdf}}##Extract all tables from a PDF to a CSV file
tac {{file1}} {{file2}} > {{target_file}}##Concatenate several files reversed into the target file
tac {{file1}}##Print the contents of *file1* reversed to the standard output
tail --bytes {{count}} {{path/to/file}}##Print a specific count of bytes from the end of a given file
tail --follow {{path/to/file}}##Print the last lines of a given file and keep reading file until `Ctrl + C`
tail --lines +{{count}} {{path/to/file}}##Print a file from a specific line number
tail --lines {{count}} --sleep-interval {{seconds}} --follow {{path/to/file}}##Show last 'num' lines in 'file' and refresh every 'n' seconds
tail --lines {{count}} {{path/to/file}}##Show last 'count' lines in file
tail --retry --follow {{path/to/file}}##Keep reading file until `Ctrl + C`, even if the file is inaccessible
tailpod##Tail pod logs
tailscale bugreport##Display a shareable identifier to help diagnose issues
tailscale ip##Display the current Tailscale IP addresses
tailscale netcheck##Analyze the local network conditions and display the result
tailscale ping {{ip|hostname}}##Ping a peer node at the Tailscale layer and display which route it took for each response
tailscale web##Start a web server for controlling Tailscale
tailscale {{subcommand}} --help##Display help for a subcommand
takeout disable --all##Disable all services
takeout disable {{name}}##Disable a specific service
takeout disable##Display a list of enabled services
takeout enable --default {{name}}##Enable a specific service with the default parameters
takeout enable {{name}}##Enable a specific service
takeout enable##Display a list of available services
takeout start {{container_id}}##Start a specific container
takeout stop {{container_id}}##Stop a specific container
tar caf {{target.tar.xz}} {{file1}} {{file2}} {{file3}}##[c]reate a compressed archive and write it to a [f]ile, using [a]rchive suffix to determine the compression program
tar cf - {{path/to/directory}} | pigz > {{filename}}.tar.gz##Compress a directory using tar
tar cf {{target.tar}} {{file1}} {{file2}} {{file3}}##[c]reate an archive and write it to a [f]ile
tar cvf - {{path/to/directory}} | lz4 - {{dir.tar.lz4}}##Package and compress a directory and its contents
tar cvzf - {{path/to/directory1 path/to/directory2}} | uuencode {{data.tar.gz}} | mail --subject="{{subject_line}}" {{to_user@example.com}}##Send a `tar.gz` file as an attachment
tar czf {{target.tar.gz}} --directory={{path/to/directory}} .##[c]reate a g[z]ipped archive from a directory using relative paths
tar czf {{target.tar.gz}} {{file1}} {{file2}} {{file3}}##[c]reate a g[z]ipped archive and write it to a [f]ile
tar tvf {{source.tar}}##Lis[t] the contents of a tar [f]ile [v]erbosely
tar xf {{source.tar[.gz|.bz2|.xz]}} --directory={{directory}}##E[x]tract a (compressed) archive [f]ile into the target directory
tar xf {{source.tar}} --wildcards "{{*.html}}"##E[x]tract files matching a pattern from an archive [f]ile
tar xvf {{source.tar[.gz|.bz2|.xz]}}##E[x]tract a (compressed) archive [f]ile into the current directory [v]erbosely
task add {{thing_to_do}}##Add new task
task list##List tasks
task {{task_id}} delete##Delete task
task {{task_id}} done##Mark task as completed
task {{task_id}} modify {{new_thing_to_do}}##Modify task
tb --check {{item_id}}##Check/uncheck item
tb --clear##Archive all checked items
tb --move @{{item_id}} {{board_name}}##Move item to a board
tb --note {{note_description}} @{{board_name}}##Add a new note to a board
tb --priority @{{item_id}} {{priority}}##Edit item's priority
tb --task {{task_description}} @{{board_name}}##Add a new task to a board
tbl -T {{pdf}} {{path/to/input.tbl}} | groff -{{me}} -T {{pdf}} > {{path/to/output.pdf}}##Typeset input with tables to PDF using the [me] macro package
tbl {{path/to/input_file}} > {{path/to/output.roff}}##Process input with tables, saving the output for future typesetting with groff to PostScript
tcpdump -A tcp##Capture all TCP traffic showing contents (ASCII) in console
tcpdump -D##List available network interfaces
tcpdump -i {{eth0}} src {{192.168.1.1}} and dst {{192.168.1.2}} and dst port {{80}}##Capture the traffic from a specific interface, source, destination and destination port
tcpdump -i {{eth0}}##Capture the traffic of a specific interface
tcpdump -r {{dumpfile.pcap}}##Read from a given dump file
tcpdump -w {{dumpfile.pcap}} port not {{22}}##Capture all traffic except traffic over port 22 and save to a dump file
tcpdump host {{www.example.com}}##Capture the traffic from or to a host
tcpdump net {{192.168.1.0/24}}##Capture the traffic of a network
tcsh --version##Print the version
tcsh -c "{{command}}"##Execute a [c]ommand
tcsh -f##Start an interactive shell session without loading startup configs
tcsh -n {{path/to/script.tcsh}}##Check a script for syntax errors
tcsh {{path/to/script.tcsh}}##Execute a script
tcsh##Start an interactive shell session
tea issues create --title "{{title}}" --body "{{body}}"##Create a new issue
tea issues ls --repo "{{repository}}"##Display a list of issues for a specific repository
tea issues ls##Display a list of issues
tea login add --name "{{name}}" --url "{{url}}" --token "{{token}}"##Log into a Gitea server
tea open##Open the current repository in a browser
tea pulls ls##Display a list of open pull requests
tea repos ls##Display all repositories
telnet -e {{x}} {{ip_address}} {{port}}##Start telnet with "x" as the session termination character
telnet {{host}}##Telnet to the default port of a host
telnet {{ip_address}} {{port}}##Telnet to a specific port of a host
telnet {{towel.blinkenlights.nl}}##Telnet to Star Wars animation
termdown --time##Display current time
termdown {{1m30s}} --blink##Start a 1 minute 30 seconds countdown with blinking the terminal at the end
termdown {{1m30s}} --title "{{Interesting title}}"##Show a title above countdown
termdown {{1m30s}}##Start a 1 minute and 30 seconds countdown
termdown##Start a stopwatch
terminalizer init##Create the global config directory
terminalizer play {{filename}}##Play a recorded file on the terminal
terminalizer record {{filename}}##Record the terminal and create a recording file
terminalizer render {{filename}}##Render a recording file as an animated GIF image
terminalizer share {{filename}}##Upload a video to terminalizer.com
terraform apply##Build or change infrastructure
terraform destroy##Destroy Terraform-managed infrastructure
terraform fmt -diff##Display diffs of formatting changes
terraform fmt -list=false##Do not list files that were formatted to stdout
terraform fmt -recursive##Format the configuration in the current directory and subdirectories
terraform fmt##Format configuration according to Terraform language style conventions
terraform fmt##Format the configuration in the current directory
terraform init##Initialize a new or existing Terraform configuration
terraform plan -destroy##Show a plan to destroy all remote objects that currently exist
terraform plan -json##Output a plan as JSON
terraform plan -no-color > {{path/to/file}}##Write a plan to a specific file
terraform plan -refresh-only##Show a plan to update the Terraform state and output values
terraform plan -target {{resource_type.resource_name[instance index]}}##Focus Terraform's attention on only a subset of resources
terraform plan -var '{{name1}}={{value1}}' -var '{{name2}}={{value2}}'##Specify values for input variables
terraform plan##Generate and show an execution plan
terraform plan##Generate and show the execution plan in the currently directory
terraform validate##Verify that the configuration files are syntactically valid
terragrunt apply##Build or change infrastructure
terragrunt destroy##Destroy Terraform-managed infrastructure
terragrunt output##Show module output values
terragrunt plan##Generate and show an execution plan
terragrunt run-all apply##Build or change infrastructure from a tree of Terragrunt modules (stack)
terragrunt show##Show current deployment (from state)
tesseract --help-psm##List page segmentation modes and their descriptions
tesseract --list-langs##List the ISO 639-2 codes of available languages
tesseract -l deu {{image.png}} {{output}}##Specify a custom language (default is English) with an ISO 639-2 code (e.g. deu = Deutsch = German)
tesseract -psm {{0_to_10}} {{image.png}} {{output}}##Specify a custom page segmentation mode (default is 3)
tesseract {{image.png}} {{output}}##Recognize text in an image and save it to `output.txt` (the `.txt` extension is added automatically)
test ! -d "{{path/to/directory}}"##Test if a directory does not exist
test "{{$MY_VAR}}" == "{{/bin/zsh}}"##Test if a given variable is equal to a given string
test -f "{{path/to/file_or_directory}}"##Test if a file exists
test -z "{{$GIT_BRANCH}}"##Test if a given variable is empty
test {{condition}} && {{echo "true"}} || {{echo "false"}}##If-else statement
testssl --headers {{example.com}}##Only check HTTP security headers
testssl --protocols {{example.com}}##Only check available protocols
testssl --show-certificate {{example.com}}##Show certificate information
testssl --vulnerable {{example.com}}##Only check vulnerabilities
testssl {{example.com:465}}##Test a different port
testssl {{example.com}}##Test a server (run every check) on port 443
tex -halt-on-error {{source.tex}}##Compile a DVI document, exiting on each error
tex -output-directory={{path/to/directory}} {{source.tex}}##Compile a DVI document, specifying an output directory
tex {{source.tex}}##Compile a DVI document
texdoc --list {{search}}##List the best search results
texdoc {{search}}##Open the first search result in the default PDF viewer
texdoc {{texdoc}}##Open full documentation of texdoc
texliveonfly --compiler={{compiler}} {{source.tex}}##Use a specific compiler (defaults to `pdflatex`)
texliveonfly --texlive_bin={{path/to/texlive_bin}} {{source.tex}}##Use a custom TeX Live `bin` folder
texliveonfly {{source.tex}}##Download missing packages while compiling
textql -dlm=tab -sql "{{SELECT * FROM filename}}" {{path/to/filename.tsv}}##Query `.tsv` file
textql -dlm={{delimiter}} -header -sql "{{SELECT * FROM filename}}" {{path/to/filename.csv}}##Query file with header row
textql -header -sql "SELECT * FROM {{file1}} JOIN {{file2}} ON {{file1}}.{{c1}} = {{file2}}.{{c1}} LIMIT {{10}}" -output-header {{path/to/file1.csv}} {{path/to/file2.csv}}##Join two files on a specified common column
textql -output-dlm={{delimiter}} -output-header -sql "SELECT {{column}} AS {{alias}} FROM {{filename}}" {{path/to/filename.csv}}##Format output using an output delimiter with an output header line
textql -sql "{{SELECT * FROM filename}}" {{path/to/filename.csv}}##Print the lines in the specified `.csv` file that match a SQL query to stdout
theHarvester --domain {{domain_name}} --source google##Gather information on a domain using Google
theHarvester --domain {{domain_name}} --source {{google,bing,crtsh}}##Gather information on a domain using multiple sources
theHarvester --domain {{domain_name}} --source {{google}} --file {{output_file_name}}##Save the output to two files in XML and HTML format
theHarvester --domain {{domain_name}} --source {{google}} --limit {{200}}##Change the limit of results to work with
theHarvester --help##Output all available options
thunderbird --profile {{path/to/profile/directory}}##Use a specific user profile directory
thunderbird -P {{profile_name}}##Use a specific user profile
thunderbird##Open thunderbird
tig --all##Display commits from all branches and stashes
tig stash##Start in stash view, displaying all saved stashes
tig {{base_ref}}..{{compared_ref}}##Show the difference between two references (such as branches or tags)
tig {{branch}}##Show the history of a specific branch
tig {{path1 path2 …}}##Show the history of specific files or directories
tig##Show the sequence of commits starting from the current one in reverse chronological order
time ls##Time "ls"
timeout --signal {{INT}} {{5s}} {{sleep 10}}##Specify the signal to be sent to the command after the time limit expires. (By default, TERM is sent)
timeout {{3s}} {{sleep 10}}##Run `sleep 10` and terminate it, if it runs for more than 3 seconds
timetrap display##Display the current timesheet
timetrap in --at "{{5 minutes ago}}" {{entry_notes}}##Check in an entry started 5 minutes ago
timetrap sheet {{timesheet}}##Create a new timesheet
timew start {{activity_tag}}##Start a new stopwatch, giving a tag name to the activity being tracked
timew stop {{activity_tag}}##Stop the stopwatch with a given tag name
timew stop##Stop all running stopwatches
timew summary##View tracked items
timew##View running stopwatches
timidity --force-keysig={{-flats|+sharps}} {{path/to/file.mid}}##Play a MIDI file in a specific key (0 = C major/A minor, -1 = F major/D minor, +1 = G major/E minor, etc.)
timidity --loop {{path/to/file.mid}}##Play a MIDI file in a loop
timidity --output-mode={{F}} --output-file={{path/to/file.flac}} {{path/to/file.mid}}##Convert a MIDI file to FLAC audio
timidity --output-mode={{w}} --output-file={{path/to/file.wav}} {{path/to/file.mid}}##Convert a MIDI file to PCM (WAV) audio
timidity {{path/to/file.mid}}##Play a MIDI file
tldr -p {{android|linux|osx|sunos|windows}} {{cd}}##Show the tldr page for `cd`, overriding the default platform
tldr -u##Update local pages (if the client supports caching)
tldr ar##View documentation for the original command
tldr aria2c##View documentation for the updated command
tldr bundle##View documentation for the actual command
tldr chromium##View documentation for the original command
tldr clang##View documentation for the original command
tldr clang++##View documentation for the original command
tldr clang++##View documentation for the original command
tldr clj##View documentation for the original command
tldr gh-codespace##View documentation for the original command
tldr git-cola##View documentation for the original command
tldr musescore##View documentation for the original command
tldr netlify##View documentation for the original command
tldr nm##View documentation for the original command
tldr nm##View documentation for the original command
tldr objdump##View documentation for the original command
tldr pio debug##View documentation for the original command
tldr pio project##View documentation for the original command
tldr pio##View documentation for the original command
tldr python##View documentation for the original command
tldr radare2##View documentation for the original command
tldr rc##View documentation for the original command
tldr strings##View documentation for the original command
tldr tldr-lint##View documentation for the original command
tldr tlmgr platform##View documentation for the original command
tldr todo##View documentation for the actual command
tldr vim##View documentation for the original command
tldr {{command}}##Show the tldr page for a command (hint this is how you got here!)
tldr {{git-checkout}}##Show the tldr page for a subcommand
tldr-lint --format --in-place {{pages_directory}}##Format all pages in place
tldr-lint --format {{page.md}}##Format a specific page to stdout
tldr-lint {{pages_directory}}##Lint all pages
tlmgr backup --all##Make a backup of all packages
tlmgr backup clean --all##Remove all backups
tlmgr backup clean {{package1 package2 ...}}##Remove a backup of one or more packages
tlmgr backup {{package1 package2 ...}}##Make a backup of one or more packages
tlmgr backup {{package}} --backupdir {{path/to/backup_directory}}##Make a backup to a specific directory
tlmgr candidates {{package}}##List all available repositories from which a package can be installed
tlmgr check all -v##Check the consistency of the whole TeX Live information in verbose mode
tlmgr check all##Check the consistency of the whole TeX Live installation
tlmgr check depends##Check for missing dependencies
tlmgr check executes##Check if all TeX Live executables are present
tlmgr check files##Check if all files listed in the local TLPDB are present
tlmgr check runfiles##Check for duplicate filenames in the runfiles sections
tlmgr conf##List all TeX Live configurations
tlmgr gui##Start a GUI version of tlmgr
tlmgr info --json##Print all available packages as JSON encoded array
tlmgr info --only-installed##List all installed packages
tlmgr info collections##List all available collections
tlmgr info scheme##List all available schemes
tlmgr info {{package_name}} --data "{{name}},{{category}},{{installed}},{{size}},{{depends}},..."##Show only specific information about a package
tlmgr info {{package_name}} --list##List all files contained in a specific package
tlmgr info {{package_name}}##Show information about a specific package
tlmgr info {{package}}##Display information about a package
tlmgr info##List all available TeX Live packages, prefexing installed ones with `i`
tlmgr install --dry-run {{package}}##Simulate installing a package without making any changes
tlmgr install {{package}}##Install a package and its dependencies
tlmgr option show##List all currently set Tex Live settings
tlmgr option showall --json##Print all TeX Live settings in JSON format
tlmgr option showall##List all TeX Live settings
tlmgr option {{repository}} {{https://mirror.ctan.org/systems/texlive/tlnet}}##Set TeX Live to get future updates from the internet after installing from DVD
tlmgr option {{setting}} {{value}}##Modify the value of a specific TeX Live setting
tlmgr option {{setting}}##Show the value of a specific TeX Live setting
tlmgr paper --json##Dump the default paper size used by all TeX Live programs in JSON format
tlmgr paper##Show the default paper size used by all TeX Live programs
tlmgr platform list##List all available platforms in the package repository
tlmgr remove --dry-run {{package}}##Simulate uninstalling a package without making any changes
tlmgr remove {{package}}##Remove a package and its dependencies
tlmgr shell##Start an interactive shell of `tlmgr`
tlmgr update --all##Update all packages
tlmgr update --list##Show possible updates without updating anything
tlmgr {{pdftex}} paper --list##List all available paper sizes for a specific TeX Live program
tlmgr {{pdftex}} paper##Show the default paper size used by a specific TeX Live program
tmpmail --browser {{browser}}##Open email with a specific browser (default is w3m)
tmpmail --generate##Create a temporary inbox
tmpmail --recent##Display the most recent received email
tmpmail --text##View email as raw text without HTML tags
tmpmail {{email_id}}##Open a specific message
tmpmail##List messages and their numeric ID
tmux attach##Attach to the most recently used session
tmux kill-session -t {{name}}##Kill a session by name
tmux ls##List existing sessions
tmux new -s {{name}}##Start a new named session
tmux##Start a new session
tmuxinator edit {{project}}##Edit a project
tmuxinator list##List projects
tmuxinator new {{project}}##Create a new project
tmuxinator start {{project}}##Start a tmux session based on project
tmuxinator stop {{project}}##Stop a project's tmux session
todo delete {{task_id}}##Delete a task
todo done {{task_id1 task_id2 ...}}##Mark tasks with the specified IDs as completed
todo edit --location {{location_name}} {{task_id}}##Add a location to a task with a given ID
todo flush##Delete done tasks and reset the IDs of the remaining tasks
todo list --startable##List startable tasks
todo new {{thing_to_do}} --list {{work}}##Add a new task to the work list
todo show {{task_id}}##Show details about a task
todoist --header --color list##List all tasks with a header and color
todoist add "{{task_name}}" --priority {{1}} --label-ids "{{label_id}}" --project-name "{{project_name}}" --date "{{tmr 9am}}"##Add a high priority task with a label, project, and due date
todoist add "{{task_name}}"##Add a task
todoist list --filter '(@{{label_name}} | {{today}}) & p{{1}}'##List today's tasks with high priority that have the specified label
todoist list --filter p{{1}}##List all high priority tasks
todoist quick '#{{project_name}} "{{tmr 9am}}" p{{1}} {{task_name}} @{{label_name}}'##Add a high priority task with a label, project, and due date in quick mode
tokei {{path/to/directory}} --files##Print out statistics for individual files in a directory
tokei {{path/to/directory}} -e {{*.min.js}}##Get a report for a directory excluding `.min.js` files
tokei {{path/to/directory}} -t={{Rust}},{{Markdown}}##Get a report for all files of type Rust and Markdown
tokei {{path/to/directory}}##Get a report on the code in a directory and all subdirectories
topgrade --disable {{operation}}##Disable a certain update operation
topgrade --edit-config##Edit the config file with default editor
topgrade --only {{operation}}##Only perform a certain update operation
topgrade -c##Cleanup temporary/old files
topgrade -y##Say yes to all updates
topgrade##Run updates
topydo add "(A) {{todo _message}} due:{{1d}}"##Add a to-do with a due date of tomorrow with a priority of `A`
topydo add "water flowers due:{{mon}} rec:{{1w}}"##Add a non-strict repeating to-do (next due = now + rec)
topydo add "{{todo_message}} +{{project_name}} @{{context_name}}"##Add a to-do to a specific project with a given context
topydo add "{{todo_message}} due:{{2020-01-01}} rec:{{+1m}}"##Add a strict repeating to-do (next due = current due + rec)
topydo add "{{todo_message}} due:{{fri}}"##Add a to-do with a due date of Friday
topydo revert##Revert the last `topydo` command executed
touch -d "{{-1 hour}}" {{path/to/file}}##Set the time on a file to one hour in the past
touch -r {{path/to/file1}} {{path/to/file2}}##Use the times from a file to set the times on a second file
touch -t {{YYYYMMDDHHMM.SS}} {{path/to/file}}##Set the times on a file to a specific date and time
touch {{path/to/file{1,2,3}.txt}}##Create multiple files
touch {{path/to/file}}##Create a new empty file(s) or change the times for existing file(s) to current time
tox --listenvs-all##List the available environments
tox --recreate -e {{py27}}##Force the virtual environment to be recreated
tox -e {{py36}}##Run tests on a specific environment (e.g. python 3.6)
tox##Run tests on all test environments
tox-quickstart##Create a `tox.ini` configuration
tpp -t {{type}} -o {{outputname}} {{filename}}##Output a presentation
tpp {{filename}}##View a presentation
tput bel##Ring the terminal bell
tput cup {{y_coordinate}} {{x_coordinate}}##Move the cursor to a screen location
tput sgr0##Reset all terminal attributes
tput {{cols|lines|colors}}##Show number of columns, lines, or colors
tput {{setaf|setab}} {{ansi_color_code}}##Set foreground (af) or background (ab) color
tput {{smam|rmam}}##Enable / Disable word wrap
tr "[:lower:]" "[:upper:]" < {{filename}}##Translate the contents of a file to upper-case
tr '{{abcd}}' '{{jkmn}}' < {{filename}}##Map each character of the first set to the corresponding character of the second set
tr -cd "[:print:]" < {{filename}}##Strip out non-printable characters from a file
tr -d '{{input_characters}}' < {{filename}}##Delete all occurrences of the specified set of characters from the input
tr -s '{{input_characters}}' < {{filename}}##Compress a series of identical characters to a single character
tr {{find_character}} {{replace_character}} < {{filename}}##Replace all occurrences of a character in a file, and print the result
traceroute -n {{host}}##Disable IP address and host name mapping
traceroute -q {{5}} {{host}}##Specify number of queries per hop
traceroute -w {{0.5}} {{host}}##Specify wait time for response
traceroute {{host}} {{42}}##Specify size in bytes of probing packet
traceroute {{host}}##Traceroute to a host
traefik --c {{config_file}}.toml##Start server with a custom config file
traefik --cluster##Start server with cluster mode enabled
traefik --web##Start server with web UI enabled
traefik##Start server with default config
trans "{{word_or_sentence_to_translate}}"##Translate a word (language is detected automatically)
trans --brief "{{word_or_sentence_to_translate}}"##Get a brief translation
trans -d {{word}}##Behave like a dictionary to get the meaning of a word
trans :{{fr}} {{word}}##Translate a word into french
trans {{de}}:{{en}} {{Schmetterling}}##Translate a word from German to English
transcode -J stabilize -i {{input_file}}##Create stabilisation file to be able to remove camera shakes
transcode -J transform -i {{input_file}} -y xvid -o {{output_file}}##Remove camera shakes after creating stabilisation file, transform video using XviD
transcode -Z 640x480 -i {{input_file}} -y xvid -o {{output_file}}##Resize the video to 640x480 pixels and convert to MPEG4 codec using XviD
transcrypt --cipher={{cipher}}##Initialize and decrypt a fresh clone of a configured repository
transcrypt --display##Display the credentials of a configured repository
transcrypt --rekey##Rekey to change the encryption cipher or password
transcrypt##Initialize an unconfigured repository
transfersh --name {{filename}} {{path/to/file}}##Upload a file using a different file name
transfersh --progress {{path/to/file}}##Upload a file showing a progress bar (requires Python package `requests_toolbelt`)
transfersh --recursive {{path/to/directory/}}##Upload all files from a directory recursively
transfersh --servername {{upload.server.name}} {{path/to/file}}##Upload a file to a custom transfer.sh server
transfersh -rt {{path/to/directory}}##Upload a specific directory as an uncompressed tar
transfersh {{path/to/file}}##Upload a file to transfer.sh
transmission-cli --blocklist {{blocklist_url|path/to/blocklist}} {{url|magnet|path/to/file}}##Use a Bluetack-formatted peer blocklist
transmission-cli --downlimit {{50}} {{url|magnet|path/to/file}}##Set the download speed limit to 50 KB/s
transmission-cli --download-dir {{path/to/download_directory}} {{url|magnet|path/to/file}}##Download a torrent to a specific directory
transmission-cli --encryption-required {{url|magnet|path/to/file}}##Force encryption for peer connections
transmission-cli --new {{path/to/source_file_or_directory}}##Create a torrent file from a specific file or directory
transmission-cli --port {{port_number}} {{url|magnet|path/to/file}}##Use a specific port for connections
transmission-cli --uplimit {{50}} {{url|magnet|path/to/file}}##Set the upload speed limit to 50 KB/s
transmission-cli {{url|magnet|path/to/file}}##Download a specific torrent
transmission-create --help##Show help page
transmission-create -o {{path/to/example.torrent}} --tracker {{tracker_announce_url}} --piecesize {{2048}} {{path/to/file_or_directory}}##Create a torrent with 2048 KB as the piece size
transmission-create -o {{path/to/example.torrent}} --tracker {{tracker_url1}} --tracker {{tracker_url2}} {{path/to/file_or_directory}}##Create a torrent with multiple trackers
transmission-create -o {{path/to/example.torrent}} --tracker {{tracker_url1}} -c {{comment}} {{path/to/file_or_directory}}##Create a torrent with a comment
transmission-create -p -o {{path/to/example.torrent}} --tracker {{tracker_announce_url}} --piecesize {{2048}} {{path/to/file_or_directory}}##Create a private torrent with a 2048 KB piece size
transmission-remote {{hostname}} --list##List all torrents
transmission-remote {{hostname}} -a {{torrent|url}} -w {{/path/to/download_directory}}##Add a torrent file or magnet link to Transmission and download to a specified directory
transmission-remote {{hostname}} -t "{{1,2}}" --start -t {{3}} --stop##Start torrent 1 and 2, stop torrent 3
transmission-remote {{hostname}} -t "{{1-10,15-20}}" --move {{/path/to/new_directory}}##Move torrents 1-10 and 15-20 to a new directory (which will be created if it does not exist)
transmission-remote {{hostname}} -t {{1}} --remove -t {{2}} --remove-and-delete##Remove torrent 1 and 2, and also delete local data for torrent 2
transmission-remote {{hostname}} -t {{all}} --stop##Stop all torrents
transmission-remote {{hostname}} -w {{/path/to/download_directory}}##Change the default download directory
trap 'echo "Caught signal {{SIGHUP}}"' {{SIGHUP}}##Set a trap to execute commands when one or more signals are detected
trap - {{SIGHUP}} {{SIGINT}}##Remove active traps
trap -l##List available signals to set traps for
trap -p##List active traps for the current shell
trash-empty##Empty the trashcan
trash-list##List trashed files
trash-put {{filename}}##Trash files and directories
trash-restore##Restore a trashed file by choosing a number from the list that results from this command
trash-rm {{filename}}##Remove individual files from the trashcan
travis encrypt {{token}}##Encrypt values in `.travis.yml`
travis init##Generate a `.travis.yml` file and enable the project
travis login##Authenticate the CLI client against the server, using an authentication token
travis repos##List repositories the user has permissions on
travis version##Display the client version
trawl -f wi##Filter interface names using a case-insensitive regular expression
trawl -i##Get a list of available interfaces
trawl -l##Include the loopback interface
trawl -n##Show column names
tred -?##Display help
tred {{path/to/input1.gv}} {{path/to/input2.gv ...}} > {{path/to/output.gv}}##Construct the transitive reduction graph of one or more directed graphs
tree -I '{{directory_name1|directory_name2}}'##Print the tree ignoring the given directories
tree -L {{num}}##Print files and directories up to 'num' levels of depth (where 1 means the current directory)
tree -P '{{*.txt}}' --prune##Print files within the tree hierarchy, using a wildcard (glob) pattern, and pruning out directories that don't contain matching files
tree -P {{directory_name}} --matchdirs --prune##Print directories within the tree hierarchy, using the wildcard (glob) pattern, and pruning out directories that aren't ancestors of the wanted one
tree -a -C##Print hidden files too with colorization on
tree -d##Print directories only
tree -i -f##Print the tree without indentation lines, showing the full path instead (use `-N` to not escape non-printable characters)
tree -s -h --du##Print the size of each file and the cumulative size of each directory, in human-readable format
trivy config {{path/to/iac_directory}}##Scan a directory for misconfigurations
trivy fs --security-checks {{vuln,config}} {{path/to/project_directory}}##Scan the filesystem for vulnerabilities and misconfigurations
trivy image --format {{template}} --template {{"@sarif.tpl"}} -o {{path/to/report.sarif}} {{image:tag}}##Generate output with a SARIF template
trivy image {{image:tag}}##Scan an image
troff -T {{ascii}} -{{man}} {{path/to/input.roff}} | grotty##Format output as [a]SCII text using the [man] macro package
troff -T {{pdf}} {{path/to/input.roff}} | gropdf > {{path/to/output.pdf}}##Format output as a [pdf] file, saving the output to a file
troff -{{me}} {{path/to/input.roff}} | grops > {{path/to/output.ps}}##Format output for a PostScript printer using the [me] macro package, saving the output to a file
troff {{path/to/input.roff}} | grops > {{path/to/output.ps}}##Format output for a PostScript printer, saving the output to a file
true##Return a successful exit code
truffle compile##Compile contract source files in the current directory
truffle help {{subcommand}}##Display help for a subcommand
truffle migrate##Run migrations to deploy contracts
truffle test##Run JavaScript and Solidity tests
truffle unbox {{box_name}}##Download a pre-built Truffle project (Truffle Box)
truncate --no-create --size 0 {{filename}}##Empty the file's content, but do not create the file if it does not exist
truncate --size +{{50M}} {{filename}}##Extend the file size by 50 MiB, fill with holes (which reads as zero bytes)
truncate --size -{{2G}} {{filename}}##Shrink the file by 2 GiB, by removing data from the end of file
truncate --size 0 {{filename}}##Empty the file's content
truncate --size {{10G}} {{filename}}##Set a size of 10 GB to an existing file, or create a new file with the specified size
ts-node --eval '{{console.log("Hello World")}}'##Evaluate TypeScript code passed as a literal on the command-line
ts-node --help##Display TS-Node help
ts-node --script-mode {{path/to/file.ts}}##Execute a TypeScript file in script mode
ts-node --skip-project {{path/to/file.ts}}##Execute a TypeScript file without loading `tsconfig.json`
ts-node --transpile-only {{path/to/file.ts}}##Transpile a TypeScript file to JavaScript without executing it
ts-node {{path/to/file.ts}}##Execute a TypeScript file without compiling (`node` + `tsc`)
tsc --allowJs --checkJs --noEmit {{src/**/*.js}}##Type-check multiple JavaScript files, and output only the errors
tsc --build {{tsconfig.json}}##Compile all `.ts` files of a TypeScript project defined in a `tsconfig.json` file
tsc --outFile {{output.js}} {{input.ts}}##Compile a TypeScript file into a JavaScript file with a custom name
tsc --target {{ES5|ES2015|ES2016|ES2017|ES2018|ESNEXT}} {{foobar.ts}}##Compile a TypeScript file into JavaScript using a specific target syntax (default is `ES3`)
tsc @{{args.txt}}##Run the compiler using command-line options and arguments fetched from a text file
tsc {{foobar.ts}}##Compile a TypeScript file `foobar.ts` into a JavaScript file `foobar.js`
tslint --fix##Fix lint issues
tslint --init##Create TSLint config
tslint --project {{path/to/project_root}}##Lint with the config file in the project root
tslint {{filename}}.js {{filename1}}.js##Lint on a given set of files
tsort {{file}}##Perform a topological sort consistent with a partial sort per line of input separated by blanks
tty##Print the file name of this terminal
tuir --enable-media##Open external links using programs defined in the mailcap config
tuir -s {{subreddit_name}}##Open a specific subreddit on launch
tuir##Launch tuir
tunnel download {{table_name}} {{file}};##Download table to local file
tunnel upload {{file}} {{table_name}} -fd {{field_delim}} -rd {{record_delim}};##Upload table specifying field and record delimiters
tunnel upload {{file}} {{table_name}} -threads {{num}};##Upload table using multiple threads
tunnel upload {{file}} {{table_name}}/{{partition_spec}};##Upload local file to a table partition
turbo link##Link the current directory to a Vercel organization and enable remote caching
turbo login##Log in using the default web browser with a Vercel account
turbo run build##Build the current project
turbo run {{task_name}} --concurrency={{1}}##Run a task without concurrency
turbo run {{task_name}} --force##Run a task ignoring cached artifacts and forcibly re-execute all tasks
turbo run {{task_name}} --graph={{path/to/file}}.{{html|jpg|json|pdf|png|svg}}##Generate a Dot graph of a specific task execution (the output file format can be controlled with the filename)
turbo run {{task_name}} --parallel --no-cache##Run a task in parallel across packages
turbo unlink##Unlink the current directory from your Vercel organization and disable Remote Caching
twm -display {{display}}##Connect to a specific X server
twm -f {{path/to/file}}##Use a specific startup file
twm -s##Only manage the default screen
twm -v##Enable verbose mode and print unexpected errors in X
twm##Connect to the default X server
twopi -?##Display help
twopi -T {{format}} -O {{path/to/input.gv}}##Render the output in `ps`, `pdf`, `svg`, `fig`, `png`, `gif`, `jpg`, `json`, or `dot` format
twopi -T {{png}} -O {{path/to/input.gv}}##Render a `png` image with a filename based on the input filename and output format (uppercase -O)
twopi -T {{svg}} -o {{path/to/image.svg}} {{path/to/input.gv}}##Render a `svg` image with the specified output filename (lowercase -o)
tye build##Build an application's containers
tye deploy##Deploy an application to Kubernetes
tye init##Scaffold a `tye.yaml` file representing the application
tye push##Push an application's containers
tye run##Run an application locally
tye undeploy##Remove a deployed application from Kubernetes
type -a {{command}}##Display all locations containing the specified executable
type -p {{command}}##Display the name of the disk file that would be executed
type {{command}}##Display the type of a command
typeorm entity:create --name {{entity}} --dir {{path/to/directory}}##Create a new entity file in a specific directory
typeorm init##Generate a new initial TypeORM project structure
typeorm migration:create --name {{migration_name}}##Create an empty migration file
typeorm migration:generate --name {{migration_name}}##Create a migration file with the SQL statements to update the schema
typeorm migration:run##Run all pending migrations
typeorm query {{sql_sentence}}##Execute a specific SQL statement on the default connection
typeorm schema:log##Display the SQL statements to be executed by `typeorm schemasync` on the default connection
typeorm {{subcommand}} --help##Display help for a subcommand
typeset -A {{variable}}=({{[key_a]=item_a [key_b]=item_b [key_c]=item_c}})##Declare an associative array variable with the specified value
typeset -g {{variable}}="{{value}}"##Declare a global variable within a function with the specified value
typeset -i {{variable}}="{{value}}"##Declare an integer variable with the specified value
typeset -r {{variable}}="{{value}}"##Declare a readonly variable with the specified value
typeset {{variable}}="{{value}}"##Declare a string variable with the specified value
typeset {{variable}}=({{item_a item_b item_c}})##Declare an array variable with the specified value
u##Log in
u##Undo the last operation
u##Undo the last operation
u3d available##List available versions of Unity that can be downloaded
u3d install latest_stable##Download and install latest stable Unity version
u3d install {{2021.2.0f1}} -p {{Unity,iOS,Android}}##Download and install Unity version and editor [p]ackages
u3d list##List installed versions of Unity
u3d##Open project from the current directory in correct Unity version
ufraw-batch --embedded-image {{input_file(s)}}##Extract the preview image from the raw file
ufraw-batch --out-type=jpg {{input_file(s)}}##Simply convert RAW files to JPG
ufraw-batch --out-type=png {{input_file(s)}}##Simply convert RAW files to PNG
ufraw-batch --size=MAX1,MAX2 {{input_file(s)}}##Save the file with size up to the given maximums MAX1 and MAX2
ulimit -H -n##Get hard limit for the number of simultaneously opened files
ulimit -S -n##Get soft limit for the number of simultaneously opened files
ulimit -a##Get the properties of all the user limits
ulimit -u 30##Set max per-user process limit
umask -S##Display the current mask in symbolic (human-readable) mode
umask {{077}}##Set the mask (using octal) to restrict no permissions for the file's owner, and restrict all permissions for everyone else
umask {{a+r}}##Change the mask symbolically to allow read permission for all users (the rest of the mask bits are unchanged)
umask##Display the current mask in octal notation
umount -a##Unmount all mounted filesystems (except the `proc` filesystem)
umount {{mountpoint}}##Unmount remote directory
umount {{path/to/device_file}}##Unmount a filesystem, by passing the path to the source it is mounted from
umount {{path/to/mounted_directory}}##Unmount a filesystem, by passing the path to the target where it is mounted
unalias -a##Remove all aliases
unalias {{alias_name}}##Remove an alias
unalias {{word}}##Remove an aliased command
uname --all##Print all available system information
uname --kernel-name --kernel-release --kernel-version##Print kernel name, kernel release and kernel version
uname --machine --processor##Print system architecture and processor information
uname --nodename##Print system hostname
uname##Print kernel name
unar -f {{archive}}##Force overwrite if files to be unpacked already exist
unar -o {{path/to/directory}} {{archive}}##Extract an archive to the specified directory
unar -r {{archive}}##Force rename if files to be unpacked already exist
unar -s {{archive}}##Force skip if files to be unpacked already exist
unar {{archive}}##Extract an archive to the current directory
unclutter -idle {{3}}##Hide mouse cursor after 3 seconds
uncrustify --set {{option}}={{value}}##Explicitly set a configuration variable's value
uncrustify --update-config -o {{path/to/new.cfg}}##Generate a new configuration file
uncrustify -c {{path/to/uncrustify.cfg}} -f {{path/to/file.cpp}}##Use a custom configuration file and write the result to stdout
uncrustify -f {{path/to/file.cpp}} -o {{path/to/output.cpp}}##Format a single file
undo<Enter>##Undo the last operation
unexpand --first-only {{file}}##Convert only leading sequences of blanks (overrides -a)
unexpand -a {{file}}##Convert all blanks, instead of just initial blanks
unexpand -t {{number}} {{file}}##Have tabs a certain number of characters apart, not 8 (enables -a)
unexpand {{file}}##Convert blanks in each file to tabs, writing to standard output
unexpand##Convert blanks to tabs, reading from standard output
unflatten -?##Display help for `unflatten`
unflatten {{path/to/input.gv}} | dot -T {{png}} {{path/to/output.png}}##Use `unflatten` as a preprocessor for `dot` layout to improve aspect ratio
unflatten {{path/to/input1.gv}} {{path/to/input2.gv ...}} > {{path/to/output.gv}}##Adjust one or more directed graphs to improve the layout aspect ratio
unison -doc {{topics}}##Show documentation
unison {{path/to/directory_1}} {{path/to/directory_2}} -auto##Automatically accept the (non-conflicting) defaults
unison {{path/to/directory_1}} {{path/to/directory_2}} -ignore {{pattern}}##Ignore some files using a pattern
unison {{path/to/directory_1}} {{path/to/directory_2}}##Sync two directories (creates log first time these two directories are synchronised)
units "{{15 megabytes}}" {{bytes}}##Show the conversion of byte multipliers
units "{{15 pounds}}" {{kilograms}}##Convert between units with quantities
units "{{acres}}" "{{ft^2}}"##Show the conversion between units with different dimensions
units "{{meters / second}}" "{{inches / hour}}"##Show the conversion between two compound units
units {{quarts}} {{tablespoons}}##Show the conversion between two simple units
units##Run in interactive mode
unlink {{path/to/file}}##Remove the specified file if it is the last link
unrar e {{compressed.rar}}##Extract files into current directory, losing directory structure in the archive
unrar l {{compressed.rar}}##List files inside the archive file without decompressing it
unrar t {{compressed.rar}}##Test integrity of each file inside the archive file
unrar x {{compressed.rar}} {{path/to/extract}}##Extract files to a specified path with the original directory structure
unrar x {{compressed.rar}}##Extract files with original directory structure
unzip -O {{gbk}} {{file.zip}}##Extract a zip file created on Windows, containing files with non-ASCII (e.g. Chinese or Japanese characters) filenames
unzip -c {{file.zip}}##Extract the contents of the file(s) to stdout alongside the extracted file names
unzip -l {{file.zip}}##List the contents of a zip file without extracting
unzip {{compressed_file(s)}} -d {{path/to/put/extracted_file(s)}}##Extract zip files(s) to given path
unzip {{file(s)}}##Extract zip file(s) (for multiple files, separate file paths by spaces)
updog --directory {{/path/to/directory}}##Start a HTTP server for a specified directory
updog --password {{password}}##Start a HTTP server with a password (To log in, leave the username blank and enter the password in the password field)
updog --port {{port}}##Start a HTTP server on a specified port
updog --ssl##Enable transport encryption via SSL
updog##Start a HTTP server for the current directory
uptime --pretty##Show only the amount of time the system has been booted for
uptime --since##Print the date and time the system booted up at
uptime --version##Show version information
uptime##Print current time, uptime, number of logged-in users and other information
upx --help##Detailed help
upx -d {{file}}##Decompress executable
upx {{file}}##Compress executable
use {{project_name}};##Switch current project
users {{/var/log/wmtp}}##Print logged in usernames according to a given file
users##Print logged in usernames
uudecode -o {{path/to/decoded_file}} {{path/to/encoded_file}}##Decode a file that was encoded with `uuencode` and write the result to a file
uudecode {{path/to/encoded_file}}##Decode a file that was encoded with `uuencode` and print the result to stdout
uuencode -m -o {{path/to/output_file}} {{path/to/input_file}} {{output_file_name_after_decoding}}##Encode a file using Base64 instead of the default uuencode encoding and write the result to a file
uuencode -o {{path/to/output_file}} {{path/to/input_file}} {{output_file_name_after_decoding}}##Encode a file and write the result to a file
uuencode {{path/to/input_file}} {{output_file_name_after_decoding}}##Encode a file and print the result to stdout
uvicorn --host {{localhost}} --port {{8080}} {{import.path:app_object}}##Listen on port 8080 on localhost
uvicorn --reload {{import.path:app_object}}##Turn on live reload
uvicorn --ssl-certfile {{cert.pem}} --ssl-keyfile {{key.pem}} {{import.path:app_object}}##Run app over HTTPS
uvicorn --workers {{4}} {{import.path:app_object}}##Use 4 worker processes for handling requests
uvicorn {{import.path:app_object}}##Run Python web app
v##Open the current file in an editor
vagrant box list##List all local boxes
vagrant halt##Halt the machine
vagrant init ubuntu/focal64##Create Vagrantfile with the Ubuntu 20.04 (Focal Fossa) box from HashiCorp Atlas
vagrant init##Create Vagrantfile in current directory with the base Vagrant box
vagrant ssh##Connect to machine via SSH
vagrant ssh-config##Output the SSH configuration file of the running Vagrant machine
vagrant suspend##Suspend the machine
vagrant up##Start and provision the vagrant environment
vala --help##Display helper message
vala --version##Display version info
vala {{path/to/file.vala}} --pkg {{gtk+-3.0}}##Run a vala file, with gtk+
valac --help##Display helper message
valac --version##Display version info
valac {{path/to/file.vala}} --pkg {{gtk+-3.0}}##Compile a vala file, with gtk+
valgrind --leak-check=full --show-leak-kinds=all {{program}}##Use Memcheck to report all possible memory leaks of `program` in full detail
valgrind --tool=cachegrind {{program}}##Use the Cachegrind tool to profile and log CPU cache operations of `program`
valgrind --tool=massif --stacks=yes {{program}}##Use the Massif tool to profile and log heap memory and stack usage of `program`
valgrind {{program}}##Use the (default) Memcheck tool to show a diagnostic of memory usage by `program`
var-dump-server --format=html > {{path/to/file.html}}##Dump the data in an HTML file
var-dump-server --host {{127.0.0.1:9912}}##Make the server listen on a specific address and port
var-dump-server##Start the server
vault auth {{authentication_token}}##Authenticate the CLI client against the Vault server, using an authentication token
vault init##Connect to a Vault server and initialize a new encrypted data store
vault read -field={{field_name}} secret/{{hello}}##Read a specific field from the value
vault read secret/{{hello}}##Read a value from the vault, using the generic back-end called "secret"
vault seal##Seal (lock) the Vault server, by removing the encryption key of the data store from memory
vault unseal {{key-share-x}}##Unseal (unlock) the vault, by providing one of the key shares needed to access the encrypted data store
vault write secret/{{hello}} value={{world}}##Store a new secret in the vault, using the generic back-end called "secret"
vcsh clone {{git_url}} {{repository_name}}##Clone a repository into a custom directory name
vcsh init {{repository_name}}##Initialize an (empty) repository
vcsh list##List all managed repositories
vcsh write-gitignore {{repository_name}}##Write a custom `.gitignore` file for a managed repository
vcsh {{push|pull}}##Push/pull all managed repositories to/from remotes
vcsh {{repository_name}} {{git_command}}##Execute a Git command on a managed repository
vdir --group-directories-first##List grouping directories first
vdir --recursive {{path/to/directory}}##Recursively list all files and directories in a specific directory
vdir -S##List files and directories sorting entries by size (largest first)
vdir -a##List including hidden files (starting with a dot)
vdir -h##List with sizes displayed in human-readable units (KB, MB, GB)
vdir -t##List files and directories sorting entries by modification time (newest first)
vdir##List files and directories in the current directory, one per line, with details
vectorize-pixelart {{path/to/input.png}} {{path/to/output.svg|.eps}}##Convert a PNG to a vector image format
vegeta attack -duration={{30s}} -targets={{requests.txt}} | vegeta report##Launch an attack against multiple URLs from a file
vela add deployment --org {{organization}} --repo {{repository_name}} --target {{environment}} --ref {{branch|commit|refs/tags/git_tag}} --description "{{deploy_description}}"##Trigger a pipeline to run from a Git branch, commit or tag
vela get deployment --org {{organization}} --repo {{repository_name}}##List deployments for a repository
vela view deployment --org {{organization}} --repo {{repository_name}} --deployment {{deployment_number}}##Inspect a specific deployment
velero backup create {{backup_name}}##Create a backup containing all resources
velero backup delete {{backup_name}}##Delete a backup
velero backup get##List all backups
velero restore create --from-schedule {{schedule_name}}##Create a restore from the latest successful backup triggered by specific schedule
velero schedule create {{schedule_name}} --schedules="{{@every 7d}}" --ttl {{2160h0m0s}}##Create a weekly backup, each living for 90 days (2160 hours)
vercel --build-env {{ENV}}={{var}}##Build with Environment Variables
vercel --env {{ENV}}={{var}}##Deploy with Environment Variables
vercel --prod##Deploy the current directory to production
vercel --regions {{region_id}}##Set default regions to enable the deployment on
vercel init##Initialize an example project
vercel remove {{project_name}}##Remove a deployment
vercel {{path/to/project}}##Deploy a directory
vercel##Deploy the current directory
view {{file}}##Open a file
vim +{{line_number}} {{path/to/file}}##Open a file at a specified line number
vim {{path/to/file}}##Open a file
vimdiff {{file1}} {{file2}}##Open two files and show the differences
vimtutor {{language}}##Launch the vim tutor using the given language (en, fr, de, ...)
virsh connect qemu+ssh://{{user_name@host_name}}/system##Connect as root to a remote hypervisor using ssh
virsh connect qemu:///session##Launch a new instance of the hypervisor and connect to it as the local user
virsh connect qemu:///system##Connect as root to the local QEMU/KVM hypervisor
virsh connect {{qemu:///system}}##Connect to a hypervisor session
virsh connect##Connect to the default hypervisor
virsh create {{path/to/config_file.xml}}##Create a guest from a configuration file
virsh destroy {{guest_id}} && virsh undefine {{guest_id}}##Delete a running guest
virsh domblklist --domain {{vm_name}} --details##List the disk type and device value as well as the target name and source path
virsh domblklist --domain {{vm_name}}##List the target name and source path of the block devices
virsh dumpxml {{guest_id}} > {{path/to/guest.xml}}##Dump guest configuration file
virsh edit {{guest_id}}##Edit a guest's configuration file (editor can be changed with $EDITOR)
virsh help {{category_keyword}}##List the commands in a category
virsh help {{command}}##Show help for a command
virsh help | grep "keyword"##List the command categories
virsh help##List the `virsh` commands grouped into related categories
virsh list --all --{{autostart|no-autostart}}##List information about virtual machines with autostart either enabled or disabled
virsh list --all --{{with-snapshot|without-snapshot}}##List information about virtual machines either with or without snapshots
virsh list --all##List all domains
virsh list --all##List information about virtual machines regardless of state
virsh list##List information about running virtual machines
virsh pool-autostart --pool {{name|uuid}} --disable##Disable autostart for the storage pool specified by name or UUID
virsh pool-autostart --pool {{name|uuid}}##Enable autostart for the storage pool specified by name or UUID (determine using `virsh pool-list`)
virsh pool-build --pool {{name|uuid}}##Build the storage pool specified by name or UUID (determine using `virsh pool-list`)
virsh pool-define-as --name {{pool_name}} --type {{dir}} --target {{/var/vms}}##Create the configuration file for a storage pool called pool_name using `/var/vms` as the underlying storage system
virsh pool-delete --pool {{name|uuid}}##Delete the underlying storage system for the storage pool specified by name or UUID (determine using `virsh pool-list`)
virsh pool-destroy --pool {{name|uuid}}##Stop a storage pool specified by name or UUID (determine using `virsh pool-list`)
virsh pool-info --pool {{name|uuid}}##List the name, UUID, state, persistence type, autostart status, capacity, space allocated, and space available for the storage pool specified by name or UUID (determine using `virsh pool-list`)
virsh pool-list --details##List extended information about persistence, capacity, allocation, and available space for active storage pools
virsh pool-list --name --uuid##List the name and UUID of active storage pools
virsh pool-list --{{all|inactive}}##List information for active and inactive or just inactive storage pools
virsh pool-list --{{autostart|no-autostart}}##List information for active storage pools with either autostart enabled or disabled
virsh pool-list --{{persistent|transient}}##List information for active storage pools that are either persistent or transient
virsh pool-list##List the name, state, and whether autostart is enabled or disabled for active storage pools
virsh pool-start --pool {{name|uuid}} --build##Start the storage pool specified by name or UUID (determine using `virsh pool-list`) and create the underlying storage system if it doesn't exist
virsh pool-undefine --pool {{name|uuid}}##Delete the configuration for the storage pool specified name or UUID (determine using `virsh pool-list`)
virsh save {{guest_id}} {{filename}}##Save the current state of a guest to a file
virsh undefine --domain {{vm_name}} --remove-all-storage##Delete the configuration file and all associated storage volumes
virsh undefine --domain {{vm_name}} --storage {{sda,path/to/source}}##Delete the configuration file and the specified storage volumes using the target name or the source name (as obtained from the `virsh domblklist` command)
virsh undefine --domain {{vm_name}}##Delete only the virtual machine configuration file
virsh {{command}} {{guest_id}}##Start/reboot/shutdown/suspend/resume a guest
virt-clone --original {{vm_name}} --auto-clone##Clone a virtual machine and automatically generate a new name, storage path, and MAC address
virt-clone --original {{vm_name}} --name {{new_vm_name}} --file {{path/to/new_storage}} --mac {{ff:ff:ff:ff:ff:ff|RANDOM}}##Clone a virtual machine and specify the new name, storage path, and MAC address
virt-install --name {{vm_name}} --arch {{x86_64}} --virt-type {{kvm}} --machine {{q35}} --boot {{uefi}} --memory {{4096}} --disk path={{path/to/image.raw}},size={{16}} --cdrom {{path/to/fedora.iso}}##Create a x86-64, KVM-accelerated, UEFI-based virtual machine with the Q35 chipset, 4 GiB RAM, 16 GiB RAW storage, and start a Fedora installation
virt-install --name {{vm_name}} --cpu {{host-model}},topology.sockets={{1}},topology.cores={{4}},topology.threads={{2}} --memory {{16384}} --disk path={{path/to/image.qcow2}},size={{250}} --cdrom {{path/to/debian.iso}}##Create a virtual machine with with 16 GiB RAM, 250 GiB storage, 8 cores with hyperthreading, a specific CPU topology, and a CPU model that shares most features with the host CPU
virt-install --name {{vm_name}} --memory {{1024}} --disk path={{path/to/image.qcow2}},size={{12}} --cdrom {{path/to/debian.iso}}##Create a virtual machine with 1 GB RAM and 12 GB storage and start a Debian installation
virt-install --name {{vm_name}} --memory {{2048}} --disk path={{path/to/image.qcow2}},size={{20}} --location={{https://download.fedoraproject.org/pub/fedora/linux/releases/35/Everything/x86_64/os/}} --extra-args={{"inst.ks=https://path/to/valid/kickstart.org"}}##Create a virtual machine and kickstart an automated deployment based on Fedora 35 using only remote resources (no ISO required)
virt-install --name {{vm_name}} --memory {{512}} --disk {{none}} --controller {{type=usb,model=none}} --sound {{none}} --autoconsole {{none}} --install {{no_install=yes}}  --cdrom {{path/to/tails.iso}}##Create a diskless live virtual machine without an emulated sound device or a USB controller. Don't start an installation and don't autoconnect to console but attach a cdrom to it (might be useful for when using a live CD like tails)
virt-sparsify --compress {{path/to/image.qcow2}} {{path/to/image_new.qcow2}}##Create a sparsified compressed image without snapshots from an unsparsified one
virt-sparsify --in-place {{path/to/image.img}}##Sparsify an image in-place
virt-sysprep --domain {{vm_name}} --dry-run##Run all enabled operations but don't actually apply the changes
virt-sysprep --domain {{vm_name}} --enable {{customizations}} --hostname {{host_name}} --operation {{machine-id}}##Generate a new `/etc/machine-id` file and enable customizations to be able to change the host name to avoid network conflicts
virt-sysprep --domain {{vm_name}} --operations {{operation1,operation2,...}}##Run only the specified operations
virt-sysprep --list-operations##List all supported operations (enabled operations are indicated with asterisks)
virtualenv --prompt={{prompt_prefix}} {{path/to/venv}}##Customize the prompt prefix
virtualenv --python={{path/to/pythonbin}} {{path/to/venv}}##Use a different version of Python with virtualenv
virtualenv {{path/to/venv}}##Create a new environment
virtualenvwrapper##Get summary of all virtualenvwrapper commands
visual<Enter>##Switch to Vim
visudo --version##Display version information
viu -n {{path/to/file}}##Render an image or GIF and display its file name
viu -t {{path/to/file}}##Render an image with a transparent background
viu -w {{width}} -h {{height}} {{path/to/file}}##Render an image with a specific width and height in pixels
viu {{path/to/file}}##Render an image or animated GIF
vladimyr##Start Dario's interactive CLI
vlc --fullscreen {{path/to/file}}##Play in fullscreen
vlc --loop {{path/to/file}}##Play repeatedly
vlc --no-audio {{path/to/file}}##Play muted
vlc {{https://www.youtube.com/watch?v=oHg5SJYRHA0}}##Play video from a URL
vlc {{path/to/file}}##Play a file
volta help {{fetch|install|uninstall|pin|list|completions|which|setup|run|help}}##Display help for a subcommand
volta help##Display help
volta install {{node|npm|yarn|package_name}}##Install the latest version of a tool
volta install {{node|npm|yarn}}@version##Install a specific version of a tool
volta list##List all installed tools
volta pin {{node|npm|yarn}}@version##Choose a tool version for a project (will store it in `package.json`)
vsce list {{publisher}}##List all the extensions created by a publisher
vsce package##Package the current working directory as a `.vsix` file
vsce publish {{major|minor|patch}}##Publish an extension as major, minor or patch version
vsce show {{extension_id}}##Show the metadata associated with an extension
vsce unpublish {{extension_id}}##Unpublish an extension
vue build {{filename}}##Build a `.js` or `.vue` file in production mode with zero config
vue create {{project_name}}##Create a new Vue project interactively
vue init {{path/to/template_directory}} {{project_name}}##Create a new project using a local template
vue init {{username}}/{{repo}} {{project_name}}##Create a new project using a template from GitHub
vue init {{webpack|webpack-simple|browserify|browserify-simple|simple}} {{project_name}}##Create a new project using one of the default templates
vue serve {{filename}}##Serve a `.js` or `.vue` file in development mode with zero config
vue ui##Create a new project with web UI
vzdump --all --mode {{suspend}} --mailto {{root}} --mailto {{admin}}##Back up all guest systems and send an notification email to the root and admin users
vzdump --mode {{suspend}} --exclude {{101, 102}}##Back up all guest virtual machines excluding the IDs 101 and 102
vzdump {{101 102 103}}##Back up the guest virtual machines with the IDs 101, 102, and 103
vzdump {{vm_id}} --dumpdir {{path/to/directory}} --mode {{snapshot}}##Use snapshot mode (no downtime required) and a non-default dump directory
vzdump {{vm_id}} --mode {{suspend|snapshot}}##Dump a guest virtual machine using a specific mode
vzdump {{vm_id}}##Dump a guest virtual machine into the default dump directory (usually `/var/lib/vz/dump/`), excluding snapshots
w -h##Show logged-in users info without a header
w {{filename}}##Write the current document to a new file (the filename can be omitted if `ed` was called with an existing file)
w##Show logged-in users info
w3m {{http://example.com}} --no-mouse##Open a URL without mouse support
w3m {{http://example.com}} -M##Open a URL in monochrome mode
w3m {{http://example.com}}##Open a URL
wait {{instance_id}};##Wait on the termination of an instance, printing log and progress information until then
wait {{pid}}##Wait for a process to finish given its process ID (PID) and return its exit status
wait##Wait for all processes known to the invoking shell to finish
waitress-serve --call {{import.path.wsgi_factory}}##Call a factory method that returns a WSGI object
waitress-serve --listen={{localhost}}:{{8080}} {{import.path:wsgi_func}}##Listen on port 8080 on localhost
waitress-serve --threads={{4}} {{import.path:wsgifunc}}##Use 4 threads to process requests
waitress-serve --unix-socket={{path/to/socket}} {{import.path:wsgi_func}}##Start waitress on a Unix socket
waitress-serve --url-scheme={{https}} {{import.path:wsgi_func}}##Set the URL scheme to HTTPS
waitress-serve {{import.path:wsgi_func}}##Run a Python web app
wal --preview {{image.png}}##Preview color scheme
wal -R##Restore the previously generated color scheme and wallpaper
wal -i {{image.png}}##Create color scheme
wal -il {{image.png}}##Create a light color scheme
wal -in {{image.png}}##Skip setting the desktop wallpaper
wal -is {{image.png}}##Skip setting the terminal colors
wapm init##Interactively create a new `wapm.toml` file
wapm install --global {{package_name}}##Download a package and install it globally
wapm install {{package_name}}@{{version}}##Download a specific version of a package and add it to the list of dependencies in wapm.toml
wapm install##Download all the packages listed as dependencies in `wapm.toml`
wapm list --global##List top-level globally installed packages
wapm list##Print a tree of locally installed dependencies
wapm run {{command_name}} {{arguments}}##Execute a package command using the Wasmer runtime
wapm uninstall {{package_name}}##Uninstall a package and remove it from the list of dependencies in `wapm.toml`
warp-cli connect##Connect to WARP
warp-cli disconnect##Disconnect from WARP
warp-cli help {{subcommand}}##Display help for a subcommand
warp-cli help##Display help
warp-cli register##Register the current device to WARP (must be run before first connection)
warp-cli status##Display the WARP connection status
warp-diag --add-ts##Generate a zip file with debug information including a timestamp to the output filename
warp-diag --output {{path/to/directory}}##Save the output file under a specific directory
warp-diag feedback##Submit a new feedback to Cloudflare's WARP interactively
warp-diag##Generate a zip file with information about the system configuration and the WARP connection
wasm-objdump --details {{file.wasm}}##Display the details of each section
wasm-objdump --section '{{import}}' --details {{file.wasm}}##Display the details of a given section
wasm-objdump -d {{file.wasm}}##Display the entire disassembled output of a given binary
wasm-objdump -h {{file.wasm}}##Display the section headers of a given binary
wasm-opt -O {{input.wasm}} -o {{output.wasm}}##Apply default optimizations and write to a given file
wasm-opt -O4 {{input.wasm}} -o {{output.wasm}}##Apply all optimizations and write to a given file (takes more time, but generates optimal code)
wasm-opt -Oz {{input.wasm}} -o {{output.wasm}}##Optimize a file for size
wasm-opt {{input.wasm}} --print##Print the textual representation of the binary to console
wasm2c {{file.wasm}} -o {{file.c}}##Write the output to a given file (`file.h` gets additionally generated)
wasm2c {{file.wasm}}##Convert a file to a C source file and header and display it to the console
wasm2wat {{file.wasm}} -o {{file.wat}}##Write the output to a given file
wasm2wat {{file.wasm}}##Convert a file to the text format and display it to the console
wat2wasm -v {{file.wat}}##Display simplified representation of every byte
wat2wasm {{file.wat}} -o {{file.wasm}}##Write the output binary to a given file
wat2wasm {{file.wat}}##Parse and check a file for errors
watch -d {{ls -l}}##Monitor the contents of a directory, highlighting differences as they appear
watch -n {{60}} {{command}}##Re-run a command every 60 seconds
watch {{command}}##Repeatedly run a command and show the result
watchexec -- {{ls -la}}##Call `ls -la` when any file in the current directory changes
watchexec --exts {{js,css,html}} make##Run `make` when any JavaScript, CSS and HTML files in the current directory change
watchexec --restart --signal {{SIGKILL}} {{my_server}}##Call/restart `my_server` when any file in the current directory change, sending `SIGKILL` to stop the child process
watchexec --watch {{lib}} --watch {{src}} {{make}}##Run `make` when any file in the `lib` or `src` subdirectories change
watson edit##Edit most recent frame
watson log##Display the latest working sessions
watson remove##Remove most recent frame
watson start {{project}} +{{tag}}##Start monitoring time in project with tags
watson start {{project}}##Start monitoring time in project
watson stop##Stop monitoring time for the current project
wc --bytes {{path/to/file}}##Count all bytes in a file
wc --chars {{path/to/file}}##Count all characters in a file (taking multi-byte characters into account)
wc --lines {{path/to/file}}##Count all lines in a file
wc --max-line-length {{path/to/file}}##Count the length of the longest line in number of characters
wc --words {{path/to/file}}##Count all words in a file
weasyprint {{path/to/input.html}} {{path/to/output}}.pdf --verbose##Output additional debugging information when rendering
weasyprint {{path/to/input.html}} {{path/to/output}}.pdf##Render an HTML file to PDF
weasyprint {{path/to/input.html}} {{path/to/output}}.png --base-url {{url_or_filename}}##Specify a base URL for relative URLs in the input HTML file
weasyprint {{path/to/input.html}} {{path/to/output}}.png --resolution {{300}}##Specify a custom resolution when outputting to PNG
weasyprint {{path/to/input.html}} {{path/to/output}}.png --stylesheet {{path/to/stylesheet.css}}##Render an HTML file to PNG, including an additional user stylesheet
web-ext build --verbose##Display verbose build output
web-ext build##Build and package the extension
web-ext lint##Lint the manifest and source files for errors
web-ext run --source-dir {{path/to/directory}}##Run a web extension from a specific directory in Firefox
web-ext run --target firefox-android##Run a web extension in Firefox Android
web-ext run --verbose##Display verbose execution output
web-ext run##Run the web extension in the current directory in Firefox
web-ext sign --api-key {{api_key}} --api-secret {{api_secret}}##Sign a package for self-hosting
webpack --config {{webpack.config.js}} --progress##Pass a config file (with e.g. the entry script and the output filename) and show compilation progress
webpack --watch {{app.js}} {{bundle.js}}##Automatically recompile on changes to project files
webpack {{app.js}} {{bundle.js}} --module-bind '{{css=css}}'##Load CSS files too from the JavaScript file (this uses the CSS loader for `.css` files)
webpack {{app.js}} {{bundle.js}}##Create a single output file from an entry point file
webstorm --line {{line_number}} {{path/to/file}}##Open a file with the cursor at the specific line
webstorm --wait -e {{path/to/file}}##Open and wait until done editing a specific file in the LightEdit mode
webstorm -e {{path/to/file1 path/to/file2 ...}}##Open specific files in the LightEdit mode﻿
webstorm diff {{path/to/file1}} {{path/to/file2}}##Open and compare files (supports up to 3 files)
webstorm merge {{path/to/left_file}} {{path/to/right_file}} {{path/to/target_file}}##Open and perform a three-way merge
webstorm {{path/to/directory}}##Open a specific directory in WebStorm
webstorm##Open the current directory in WebStorm
webtorrent create {{path/to/file}}##Create a new torrent file for the specified file path
webtorrent download "{{torrent_id}}" --dlna##Stream a torrent to a Digital Living Network Alliance (DLNA) device
webtorrent download "{{torrent_id}}" --select {{index}}##Specify a file index from the torrent to download
webtorrent download "{{torrent_id}}" --select##Display a list of files for a specific torrent
webtorrent download "{{torrent_id}}" --vlc##Stream a torrent to VLC media player
webtorrent download "{{torrent_id}}"##Download a torrent
webtorrent info {{path/to/file_or_magnet}}##Display information for a magnet URI or `.torrent` file
webtorrent seed {{path/to/file_or_directory}}##Seed a specific file or directory
wget --continue {{https://example.com}}##Continue an incomplete download
wget --directory-prefix {{path/to/directory}} --input-file {{URLs.txt}}##Download all URLs stored in a text file to a specific directory
wget --limit-rate={{300k}} --tries={{100}} {{https://example.com/somepath/}}##Limit the download speed and the number of connection retries
wget --mirror --no-parent {{https://example.com/somepath/}}##Download all listed files within a directory and its sub-directories (does not download embedded page elements)
wget --output-document {{bar}} {{https://example.com/foo}}##Download the contents of a URL to a file (named "bar" in this case)
wget --page-requisites --convert-links --wait=3 {{https://example.com/somepage.html}}##Download a single web page and all its resources with 3-second intervals between requests (scripts, stylesheets, images, etc.)
wget --user={{username}} --password={{password}} {{https://example.com}}##Download a file from an HTTP server using Basic Auth (also works for FTP)
wget {{https://example.com/foo}}##Download the contents of a URL to a file (named "foo" in this case)
where {{command}}##Find all instances of a command
whereis -b -B {{/usr/bin/}} -f {{gcc}}##Locate binaries for gcc in `/usr/bin/` only
whereis -bm {{ls}}##Locate binary and man pages for ls
whereis -s {{gcc}} -m {{git}}##Locate source of gcc and man pages for Git
whereis -u *##Locate unusual binaries (those that have more or less than one binary on the system)
whereis -u -m *##Locate binaries that have unusual manual entries (binaries that have more or less than one manual installed)
whereis {{ssh}}##Locate binary, source and man pages for ssh
which -a {{executable}}##If there are multiple executables which match, display all
which {{executable}}##Search the PATH environment variable and display the location of any matching executables
while :; do {{command}}; sleep 1; done##Execute a command forever once every second
while read line; do echo "$line"; done##Read stdin and perform an action on every line
while read line; do echo "$line"; done##Read stdin and perform an action on every line
who -a -H##Display all available information with table headers
who -a##Display all available information
who am i##Display information only for the current terminal session
who##Display the username, line, and time of all currently logged-in sessions
whoami##Display currently logged username
whois -b {{8.8.8.8}}##Get abuse contact for an IP address
whois @{{user}}##Show profile of a given user
whois {{8.8.8.8}}##Get information about an IP address
whois {{example.com}}##Get information about a domain name
wondershaper -a {{adapter_name}} -d {{1024}} -u {{512}}##Set a specific maximum [d]ownload rate and [u]pload rate (in Kpbs)
wondershaper -a {{adapter_name}} -d {{1024}}##Set a specific maximum [d]ownload rate (in Kbps)
wondershaper -a {{adapter_name}} -u {{512}}##Set a specific maximum [u]pload rate (in Kbps)
wondershaper -c -a {{adapter_name}}##Clear limits from a specific [a]dapter
wondershaper -h##Display [h]elp
wondershaper -s -a {{adapter_name}}##Show the current [s]tatus of a specific [a]dapter
wordgrinder {{filename}}##Open a given file
wordgrinder##Start wordgrinder (loads a blank document by default)
workon {{virtualenv_name}}##Activate or use a different `virtualenv`
wormhole receive {{wormhole_code}}##Receive a file
wormhole send {{path/to/file}}##Send a file
wormhole send##Send raw text
wp --info##Print information about the operating system, shell, PHP, and WP-CLI (`wp`) installation
wp cli update##Update WP-CLI
wp config create --dbname={{dbname}} --dbuser={{dbuser}} --dbpass={{dbpass}}##Create basic `wpconfig` file (assuming database on `localhost`)
wp core download --locale={{locale}}##Download a fresh WordPress installation to current directory, optionally specifying the locale
wp import {{path/to/file.xml}}##Import the contents of a WordPress Extended RSS (WXR) file
wp plugin install {{plugin}} --activate##Install and activate a WordPress plugin
wp search-replace {{old_string}} {{new_string}}##Replace all instances of a string in the database
wpa_supplicant -B -i {{interface}} -c {{path/to/wpa_supplicant_conf.conf}}##Join a protected wireless network and run it in a daemon
wpa_supplicant -i {{interface}} -c {{path/to/wpa_supplicant_conf.conf}}##Join a protected wireless network
wpm --load {{path/to/file.txt}}##Start wpm using a specific text file
wpm --monochrome##Start wpm with monochrome colors
wpm --short##Start wpm with short texts
wpm --stats##Show score statistics grouped by tags
wpm --tag {{tag_name}}##Tag your race scores
wpm##Start the program
wpscan --update##Update the vulnerability database
wpscan --url {{url}} --api-token {{token}}##Scan a WordPress website, collecting vulnerability data from the WPVulnDB (https//wpvulndb.com/)
wpscan --url {{url}} --enumerate {{u}}##Perform user identifiers enumeration on a WordPress website
wpscan --url {{url}} --enumerate {{vp}} --wp-content-dir {{remote/path/to/wp-content}}##Scan a WordPress website, checking for vulnerable plugins and specifying the path to the `wp-content` directory
wpscan --url {{url}} --proxy {{protocol://ip:port}} --proxy-auth {{username:password}}##Scan a WordPress website through a proxy
wpscan --url {{url}} --stealthy##Scan a WordPress website, using random user agents and passive detection
wpscan --url {{url}} --usernames {{username|path/to/usernames.txt}} --passwords {{path/to/passwords.txt}} threads {{20}}##Execute a password guessing attack on a WordPress website
wpscan --url {{url}}##Scan a WordPress website
wq<Enter>##Save and Quit
wrangler dev --host {{hostname}}##Start a local development server
wrangler init {{project_name}}##Initialize a project with a skeleton configuration
wrangler login##Authenticate with Cloudflare
wrangler publish##Publish the worker script
wrangler tail##Aggregate logs from the production worker
write {{johndoe}} {{pts/5}}##Send message to "johndoe" on pseudo terminal `/dev/pts/5`
write {{testuser}} {{tty/5}}##Send message to "testuser" on terminal `/dev/tty/5`
write {{username}} {{terminal_id}}##Send a message to a given user on a given terminal id
wrk -t{{12}} -c{{400}} -d{{30s}} "{{http://127.0.0.1:8080/index.html}}"##Run a benchmark for `30` seconds, using `12` threads, and keeping `400` HTTP connections open
wrk -t{{2}} -c{{5}} -d{{5s}} --timeout {{2s}} "{{http://example.com/index.html}}"##Run a benchmark with a request timeout of `2` seconds
wrk -t{{2}} -c{{5}} -d{{5s}} -H "{{Host: example.com}}" "{{http://example.com/index.html}}"##Run a benchmark with a custom header
wuzz##Start wuzz
x##Export the selected key
x11docker --desktop --gpu --init={{systemd}} {{x11docker/gnome}}##Launch GNOME in a window
x11docker --desktop --gpu --init={{systemd}} {{x11docker/kde-plasma}}##Launch KDE Plasma in a window
x11docker --desktop {{x11docker/xfce}}##Launch Xfce in a window
x11docker --help##Display help
x11docker --pulseaudio --share={{$HOME/Videos}} {{jess/vlc}}##Launch VLC in a container
x_x --delimiter={{';'}} --quotechar={{'|'}} {{file.csv}}##View a CSV file with unconventional delimiters
x_x -h {{0}} {{file.xlsx|file.csv}}##View an XLSX or CSV file, using the first row as table headers
x_x {{file.xlsx|file.csv}}##View an XLSX or CSV file
xar -cf {{archive.xar}} {{path/to/directory}}##Create a xar archive of all files in a given directory
xar -tf {{archive.xar}}##List the contents of a given xar archive
xar -xf {{archive.xar}}##Extract the contents of a given xar archive to the current directory
xcaddy build --output {{path/to/file}}##Build Caddy and output to a specific file
xcaddy build --with {{module_name}}##Build Caddy with a specific module
xcaddy build {{version}}##Build Caddy server with a specific version (defaults to latest)
xcaddy build##Build Caddy server from source
xcaddy run --config {{path/to/file}}##Build and run Caddy for a development plugin using a specific Caddy config
xcaddy run##Build and run Caddy for a development plugin in the current directory
xcv c {{input_file}}##Copy a file
xcv l##List files available for pasting
xcv v {{output_file}}##Paste a file
xcv x {{input_file}}##Cut a file
xdelta -d -s {{path/to/input_file}} {{path/to/delta_file.xdelta}} {{path/to/output_file}}##Apply a patch
xdelta -e -s {{path/to/old_file}} {{path/to/new_file}} {{path/to/output_file.xdelta}}##Create a patch
xetex -halt-on-error {{source.tex}}##Compile a PDF document, exiting if errors occur
xetex -output-directory={{path/to/directory}} {{source.tex}}##Compile a PDF document, specifying an output directory
xetex {{source.tex}}##Compile a PDF document
xev -event {{event_category}}##Monitor X events from a given category (can be specified multiple times)
xev -id {{window_id}}##Monitor all X events of a particular window
xev -root##Monitor all X events of the root window instead of creating a new one
xev##Monitor all occuring X events
xgettext --join-existing --output {{path/to/output_file}} {{path/to/input_file}}##Append new strings to an existing file
xgettext --omit-header {{path/to/input_file}}##Don't add a header containing metadata to the output file
xgettext --output {{path/to/output_file}} {{path/to/input_file}}##Use a different output filename
xgettext {{path/to/input_file}}##Scan file and output strings to `messages.po`
xh --download {{httpbin.org/json}} --output {{path/to/file}}##Make a GET request and save the response body to a file
xh get {{httpbin.org/get}} {{first_param==5}} {{second_param==true}}##Send a GET request with query parameters (e.g. `first_param=5&second_param=true`)
xh get {{httpbin.org/get}} {{header-name:header-value}}##Send a GET request with a custom header
xh post {{httpbin.org/post}} {{name=john}} {{age:=25}}##Send a POST request with a JSON body (key-value pairs are added to a top-level JSON object e.g. `{"name" "john", "age" 25}`)
xh {{httpbin.org/get}}##Send a GET request
xidel {{http://stackoverflow.com/feeds}} --extract "{{<entry><title>{title:=.}</title><link>{uri:=@href}</link></entry>+}}"##Print all newest Stack Overflow questions with title and URL using pattern matching on their RSS feed
xidel {{https://example.org}} --follow "{{<a>{.}</a>*}}" --extract "{{<title>{.}</title>}}"##Follow all links on a page and print the titles, with pattern matching
xidel {{https://example.org}} --follow "{{css('a')}}" --css {{title}}##Follow all links on a page and print the titles, with CSS selectors
xidel {{https://example.org}} --follow {{//a}} --extract {{//title}}##Follow all links on a page and print the titles, with XPath
xidel {{https://reddit.com}} --follow "{{form(css('form.login-form')[1], {'user': '$your_username', 'passwd': '$your_password'})}}" --extract "{{css('#mail')/@title}}"##Check for unread Reddit mail, Webscraping, combining CSS, XPath, JSONiq, and automatically form evaluation
xidel {{https://www.google.com/search?q=test}} --extract "//a/extract(@href, 'url[?]q=([^&]+)&', 1)[. != '']"##Print all URLs found by a Google search
xidel {{https://www.google.com/search?q=test}} --follow "{{//a/extract(@href, 'url[?]q=([^&]+)&', 1)[. != '']}}" --extract {{//title}} --download {{'{$host}/'}}##Print the title of all pages found by a Google search and download them
xidel {{path/to/example.xml}} --extract "{{<x><foo>ood</foo><bar>{.}</bar></x>}}"##Read the pattern from example.xml (which will also check if the element containing "ood" is there, and fail otherwise)
xkcdpass -a {{acrostic}}##Generate one passphrase whose first letters of each word match the provided argument
xkcdpass -i##Generate passwords interactively
xkcdpass##Generate one passphrase with the default options
xkill -button any##Display a cursor to select a window to kill by pressing any mouse button
xkill##Display a cursor to kill a window when pressing the left mouse button (press any other mouse button to cancel)
xml --help##Display general help, including the list of subcommands
xml --version##Display the version of the XMLStarlet Toolkit
xml canonic --exc-with-comments {{path/to/input.xml|URI}} {{path/to/c14n.xpath}}##Make XML exclusively canonical, using an XPATH from a file, preserving comments
xml canonic --help##Display help for the `canonic` subcommand
xml canonic --without-comments {{path/to/input.xml|URI}} > {{path/to/output.xml}}##Make an XML document canonical, removing comments
xml canonic {{path/to/input.xml|URI}} > {{path/to/output.xml}}##Make an XML document canonical, preserving comments
xml depyx --help##Display help for the `depyx` subcommand
xml depyx {{path/to/input.pyx|URI}} > {{path/to/output.xml}}##Convert a PYX (ESIS ISO 8879) document to XML format
xml edit --delete "{{XPATH1}}" {{path/to/input.xml|URI}}##Delete elements matching an XPATH from an XML document
xml edit --help##Display help for the `edit` subcommand
xml edit --move "{{XPATH1}}" "{{XPATH2}}" {{path/to/input.xml|URI}}##Move an element node of an XML document from XPATH1 to XPATH2
xml edit --rename "{{//*/@id}}" -v "{{ID}}" {{path/to/input.xml|URI}}##Rename all attributes named "id" to "ID"
xml edit --rename "{{/xml/table/rec}}" -v "{{record}}" {{path/to/input.xml|URI}}##Rename sub-elements of the element "table" that are named "rec" to "record"
xml edit --update "{{xml/table/rec[@id=3]/@id}}" -v {{5}} {{path/to/input.xml|URI}}##Update the XML table record with "id=3" to the value "id=5"
xml elements --help##Display help for the `elements` subcommand
xml elements -a {{path/to/input.xml|URI}} > {{path/to/elements.xpath}}##Extract elements and their attributes from an XML document
xml elements -d{{3}} {{path/to/input.xml|URI}}##Print sorted unique elements from an XML document up to a depth of 3
xml elements -u {{path/to/input.xml|URI}}##Print sorted unique elements from an XML document to see its structure
xml elements -v {{path/to/input.xml|URI}} > {{path/to/elements.xpath}}##Extract elements and their attributes and values from an XML document
xml elements {{path/to/input.xml|URI}} > {{path/to/elements.xpath}}##Extract elements from an XML document (producing XPATH expressions)
xml escape "{{<a1>}}"##Escape special XML characters in a string
xml escape --help##Display help for the `escape` subcommand
xml escape --help##Display help for the `unescape` subcommand
xml format --help##Display help for the `format` subcommand
xml format --html --indent-spaces {{4}} {{path/to/input.html|URI}} > {{path/to/output.html}}##Format an HTML document, indenting with 4 spaces
xml format --indent-tab {{path/to/input.xml|URI}} > {{path/to/output.xml}}##Format an XML document, indenting with tabs
xml format --omit-decl {{path\to\input.xml|URI}} > {{path/to/output.xml}}##Format an XML document, omitting the XML declaration
xml format --recover --noindent {{path/to/malformed.xml|URI}} > {{path/to/recovered.xml}}##Recover parsable parts of a malformed XML document, without indenting
xml list --help##Display help for the `list` subcommand
xml list > {{path/to/dir_list.xml}}##Write the current directory's listing to an XML document
xml list {{path/to/directory}} > {{path/to/dir_list.xml}}##Write the specified directory's listing to an XML document
xml pyx --help##Display help for the `pyx` subcommand
xml pyx {{path/to/input.xml|URI}} > {{path/to/output.pyx}}##Convert an XML document to PYX format
xml select --help##Display help for the `select` subcommand
xml select --template --match "{{XPATH1}}" --value-of "{{XPATH2}}" {{path/to/input.xml|URI}}##Select all elements matching "XPATH1" and print the value of their sub-element "XPATH2"
xml select --template --value-of "count({{XPATH1}})" {{path/to/input.xml|URI}}##Count the elements of "XPATH1"
xml select --text --template --inp-name --output " " --value-of "count(node())" --nl {{path/to/input1.xml|URI}} {{path/to/input2.xml|URI}}##Count all nodes in one or more XML documents
xml select --text --template --match "{{XPATH1}}" --value-of "{{XPATH2}}" --nl {{path/to/input.xml|URI}}##Match  "XPATH1" and print the value of "XPATH2" as text with new-lines
xml transform --help##Display help for the `transform` subcommand
xml transform {{path/to/stylesheet.xsl}} -p "{{Count='count(/xml/table/rec)'}}" -s {{Text="Count="}} {{path/to/input.xml|URI}}##Transform an XML document using an XSL stylesheet, passing one XPATH parameter and one literal string parameter
xml unescape "{{&lt;a1&gt;}}"##Unescape special XML characters from a string
xml validate --dtd {{path/to/schema.dtd}} {{path/to/input1.xml|URI}} {{input2.xml ...}}##Validate one or more XML documents against a Document Type Definition (DTD)
xml validate --help##Display help for the `validate` subcommand
xml validate --relaxng {{path/to/schema.rng}} {{path/to/input1.xml|URI}} {{input2.xml ...}}##Validate one or more XML documents against a Relax NG schema (RNG)
xml validate --xsd {{path/to/schema.xsd}} {{path/to/input1.xml|URI}} {{input2.xml ...}}##Validate one or more XML documents against an XML Schema Definition (XSD)
xml validate {{path/to/input1.xml|URI}} {{input2.xml ...}}##Validate one or more XML documents for well-formedness only
xml {{subcommand}} --help##Display help for a subcommand
xml {{subcommand}} {{options}} {{path/to/input.xml|URI}} > {{path/to/output}}##Execute a subcommand with input from a file or URI and output to a file
xml {{subcommand}} {{options}} {{path/to/input.xml|URI}}##Execute a subcommand with input from a file or URI, printing to stdout
xml {{subcommand}} {{options}}##Execute a subcommand using stdin and stdout
xmllint --dtdvalid {{URL}} {{source_file.xml}}##Validate XML against DTD schema hosted online
xmllint --format {{source_file.xml}}##Return human-readable (indented) XML from file
xmllint --html --xpath "string(//a[2]/@href)" webpage.xhtml##Return the href attribute of the second anchor element in an HTML file
xmllint --valid {{source_file.xml}}##Check that an XML file meets the requirements of its DOCTYPE declaration
xmllint --xpath "//{{foo}}" {{source_file.xml}}##Return all nodes (tags) named "foo"
xmllint --xpath "string(//{{foo}})" {{source_file.xml}}##Return the contents of the first node named "foo" as a string
xmlto -o {{path/to/html_files}} {{html}} {{document.xml}}##Convert a DocBook XML document to HTML format and store the resulting files in a separate directory
xmlto -x {{stylesheet.xsl}} {{output_format}} {{document.xml}}##Specify a stylesheet to use while converting a DocBook XML document
xmlto {{html-nochunks}} {{document.xml}}##Convert a DocBook XML document to a single HTML file
xmlto {{pdf}} {{document.xml}}##Convert a DocBook XML document to PDF format
xo --fix##Automatically fix any lint issues found
xo --prettier##Lint using the "prettier" code style
xo --space##Lint using spaces as indentation instead of tabs
xo {{file1}}.js {{file2}}.js##Lint a given set of files
xo##Lint files in the "src" directory
xonsh --no-rc##Skip loading the `.xonshrc` configuration file
xonsh --rc {{path/to/file1.xonsh}} {{path/to/file2.json}}##Load the specified `.xonsh` or `.json` configuration files
xonsh -D{{name1}}={{value1}} -D{{name2}}={{value2}}##Define environment variables for the shell process
xonsh -c "{{command}}"##Execute a single command and then exit
xonsh {{path/to/script_file.xonsh}}##Run commands from a script file and then exit
xonsh##Start an interactive shell session
xpdf -fullscreen {{path/to/file.pdf}}##Open a PDF file in fullscreen mode
xpdf -z {{75}}% {{path/to/file.pdf}}##Specify the initial zoom
xpdf -z {{page|width}} {{path/to/file.pdf}}##Specify the initial zoom at page width or full page
xpdf {{path/to/file.pdf.tar}}##Open a compressed PDF file
xpdf {{path/to/file.pdf}} :{{page_number}}##Open a specific page in a PDF file
xpdf {{path/to/file.pdf}}##Open a PDF file
xplr --force-focus {{path/to/directory}}##Focus on a directory
xplr {{path/to/directory}} {{path/to/selected_file_or_directory1}} {{path/to/selected_file_or_directory2}}##Open a directory with specific files or directories selected
xplr {{path/to/directory}}##Open a directory
xplr {{path/to/file}}##Focus on a file
xprop -font "{{font_name}}" POINT_SIZE##Display the point size of a font
xprop -id {{0x200007}}##Display all the properties of the window with the id 0x200007
xprop -name "{{window_name}}" WM_HINTS##Display the window manager hints for a window
xprop -root WM_NAME##Display the name of the root window
xsv count {{path/to/file.csv}}##Count the number of entries
xsv headers {{path/to/file.csv}}##Inspect the headers of a file
xsv join --no-case {{column_a}} {{path/to/file/a.csv}} {{column_b}} {{path/to/file/b.csv}} | xsv table##Join a column from one file to another
xsv sample {{10}} {{path/to/file.csv}}##Show 10 random entries
xsv select {{column_a,column_b}} {{path/to/file.csv}}##Select a few columns
xsv stats {{path/to/file.csv}} | xsv table##Get an overview of the shape of entries
xxd -a {{input_file}}##Display a more compact output, replacing consecutive zeros (if any) with a star
xxd -c {{10}} {{input_file}}##Display the output with 10 columns of one octet (byte) each
xxd -l {{32}} {{input_file}}##Display output only up to a length of 32 bytes
xxd -p {{input_file}}##Display the output in plain mode, without any gaps between the columns
xxd -r -p {{input_file}} {{output_file}}##Revert a plaintext hexdump back into binary, and save it as a binary file
xxd {{input_file}} {{output_file}}##Generate a hexdump from a binary file and save it as a text file
xxd {{input_file}}##Generate a hexdump from a binary file and display the output
xxh "{{host}}" ++env {{name}}={{value}}##Set an environment variable for the shell process on the target machine
xxh "{{host}}" ++host-xxh-home {{~/.xxh}}##Use a specific xxh configuration directory on the target machine
xxh "{{host}}" ++install##Install the current shell into the target machine without prompting
xxh "{{host}}" ++install-xxh-packages {{package}}##Install an xxh package on the target machine
xxh "{{host}}" ++password "{{password}}"##Specify a password to use for the SSH connection
xxh "{{host}}" ++shell {{xonsh|zsh|fish|bash|osquery}}##Run the specified shell on the target machine
xxh "{{host}}" ++xxh-config {{~/.config/xxh/config.xxhc}}##Use the specified configuration file on the host machine
xxh "{{host}}"##Connect to a host and run the current shell
xz --format={{lzma}} {{file}}##Compress a file to the LZMA file format
xz -0 {{file}}##Compress a file using the fastest compression
xz -9 {{file}}##Compress a file using the best compression
xz -d --format={{lzma}} {{file.lzma}}##Decompress an LZMA file
xz -d {{file.xz}}##Decompress a xz file
xz -dc {{file.xz}}##Decompress a file and write to stdout
xz -k {{file}}##Compress a file, but don't delete the original
xz {{file}}##Compress a file to the xz file format
yacas -p -c {{path/to/script1}} {{path/to/script2}}##Execute one or more `yacas` scripts (without terminal or prompts), then exit
yacas##Start an interactive `yacas` session
yapf --diff --in-place {{path/to/file}}##Format the file in-place and display a diff of the changes
yapf --diff {{path/to/file}}##Display a diff of the changes that would be made, without making them (dry-run)
yapf --recursive --in-place --style {{pep8}} --parallel {{path/to/directory}}##Recursively format all Python files in a directory, concurrently
yarn add {{module_name}}@{{version}}##Install a module and save it as a dependency to the `package.json` file (add `--dev` to save as a dev dependency)
yarn global add {{module_name}}##Install a module globally
yarn init##Interactively create a `package.json` file
yarn install##Install all dependencies referenced in the `package.json` file (the `install` is optional)
yarn remove {{module_name}}##Uninstall a module and remove it from the `package.json` file
yarn why {{module_name}}##Identify whether a module is a dependency and list other modules that depend upon it
yarn-why {{package_name}}##Show why a Yarn package is installed
ybacklight Sc/Sm##Print current brightness and maximal brightness, shortened and separated by a slash
ybacklight Si{{42}}##Increase the brightness by 42 big steps (4200 by default)
ybacklight d{{300}}##Decrease the brightness by 300
ybacklight s{{420}}##Set the brightness to 420
yes {{message}}##Repeatedly output "message"
yes | sudo apt-get install {{program}}##Accept everything prompted by the `apt-get` command
yes##Repeatedly output "y"
ykinfo -a##Display all information from YubiKey
ykinfo -c##Get capabilities from YubiKey
ykinfo -s -q##Get only serial in decimal from YubiKey
ykman config nfc --list##Get a list of enabled applications over NFC from YubiKey
ykman config usb --enable {{OTP|U2F|FIDO2|OATH|PIV|OPENPGP|HSMAUTH}}##Enable application over USB on YubiKey
ykman info##Get information from YubiKey
ykman {{fido|oath|openpgp|otp|piv}} info##Get information for a given application from YubiKey
you-get --http-proxy {{proxy_server}} {{https://example.com/watch?v=value}}##Download a media using a proxy
you-get --info {{https://example.com/video?id=value}}##Print media information about a specific media on the web
you-get --output-dir {{path/to/directory}} --output-filename {{filename}} {{https://example.com/watch?v=value}}##Download a media to a specific location
you-get {{https://example.com/video?id=value}}##Download a media from a specific URL
you-get {{keywords}}##Search on Google Videos and download
youtube-dl '{{https://www.youtube.com/watch?v=oHg5SJYRHA0}}'##Download a video or playlist
youtube-dl --format "{{best[height<=480]}}" '{{https://www.youtube.com/watch?v=oHg5SJYRHA0}}'##Download a video or playlist at a specific quality
youtube-dl --format {{mp4}} -o "{{%(playlist_index)s-%(title)s by %(uploader)s on %(upload_date)s in %(playlist)s.%(ext)s}}" '{{url}}'##Download video(s) as MP4 files with custom filenames
youtube-dl --list-formats '{{https://www.youtube.com/watch?v=Mwa0_nE9H7A}}'##List all formats that a video or playlist is available in
youtube-dl --sub-lang {{en}} --write-sub '{{https://www.youtube.com/watch?v=Mwa0_nE9H7A}}'##Download a particular language's subtitles along with the video
youtube-dl -f "bestaudio" --continue --no-overwrites --ignore-errors --extract-audio --audio-format mp3 -o "%(title)s.%(ext)s" {{url_to_playlist}}##Download a playlist and extract MP3s from it
youtube-dl -f bestvideo+bestaudio '{{url}}'##Download the best quality audio and video and merge them
youtube-dl -x --audio-format {{mp3}} '{{url}}'##Download the audio from a video and convert it to an MP3
youtube-viewer --login##Log in to your YouTube account
youtube-viewer --player={{vlc}} {{https://youtube.com/watch?v=dQw4w9WgXcQ}}##Watch a video with a specific URL in VLC
youtube-viewer -{{7}}##Display a search prompt and play the selected video in 720p
youtube-viewer {{search_term}}##Search for a video
yq eval '.[0]' {{path/to/file.yaml}}##Output the first element in a YAML file that contains only an array (v4+)
yq eval '.{{key}} = "{{value}}"' --inplace {{path/to/file.yaml}}##Set (or overwrite) a key to a value in a file (v4+)
yq eval {{path/to/file.yaml}}##Output a YAML file, in pretty-print format (v4+)
yq eval-all 'select(filename == "{{path/to/file1.yaml}}") * select(filename == "{{path/to/file2.yaml}}")' {{path/to/file1.yaml}} {{path/to/file2.yaml}}##Merge two files and print to stdout (v4+)
yq merge {{path/to/file1.yaml}} {{path/to/file2.yaml}} --colors##Merge two files and print to stdout (v3)
yq read {{path/to/file.yaml}} '[0]'##Output the first element in a YAML file that contains only an array (v3)
yq read {{path/to/file.yaml}} --colors##Output a YAML file, in pretty-print format (v3)
yq write --inplace {{path/to/file.yaml}} '{{key}}' '{{value}}'##Set (or overwrite) a key to a value in a file (v3)
yt-dlp "{{https://www.youtube.com/watch?v=oHg5SJYRHA0}}"##Download a video or playlist (with the default options from command below)
yt-dlp --extract-audio "{{https://www.youtube.com/watch?v=oHg5SJYRHA0}}"##Extract audio from videos (required ffmpeg or ffprobe)
yt-dlp --extract-audio --audio-format {{mp3}} "{{https://www.youtube.com/watch?v=oHg5SJYRHA0}}"##Specify audio format of extracted audio (best(default), aac, flac, mp3, m4a, opus, vorbis, wav, alac)
yt-dlp --extract-audio --audio-format {{mp3}} --audio-quality {{0}} "{{https://www.youtube.com/watch?v=oHg5SJYRHA0}}"##Specify audio quality of extracted audio (between 0 (best) and 10 (worst), default = 5)
yt-dlp --format "{{bv*+ba/b}}" "{{https://www.youtube.com/watch?v=oHg5SJYRHA0}}"##Download a video with a defined format. In this case merging the best video format with the best audio format (Default)
yt-dlp -P "{{C:/MyVideos}}" -o "{{%(series)s/%(season_number)s - %(season)s/%(episode_number)s - %(episode)s.%(ext)s}}" "{{https://videomore.ru/kino_v_detalayah/5_sezon/367617}}"##Download entire series season keeping each series and each season in separate directory under C/MyVideos
yt-dlp -o "{{%(uploader)s/%(playlist)s/%(playlist_index)s - %(title)s.%(ext)s}}" "{{https://www.youtube.com/user/TheLinuxFoundation/playlists}}"##Download all playlists of YouTube channel/user keeping each playlist in separate directory
yt-dlp -u {{user}} -p {{password}} -P "{{~/MyVideos}}" -o "{{%(playlist)s/%(chapter_number)s - %(chapter)s/%(title)s.%(ext)s}}" "{{https://www.udemy.com/java-tutorial}}"##Download Udemy course keeping each chapter in separate directory under MyVideos directory in your home
z -c {{foo}}##Restrict matches to subdirectories of the current directory
z -l {{foo}}##List all directories in `z`'s database matching "foo"
z -r {{foo}}##Go to the highest-ranked directory matching "foo"
z -t {{foo}}##Go to the most recently accessed directory matching "foo"
z -x .##Remove the current directory from `z`'s database
z {{foo}} {{bar}}##Go to a directory that contains "foo" and then "bar"
z {{foo}}##Go to a directory that contains "foo" in the name
za##Toggle the highlighted code fold
zbarimg {{image_file}}##Process an image file
zcat -l {{file.txt.gz}}##Print compression details of a gzipped file to the standard output
zcat {{file.txt.gz}}##Print the uncompressed contents of a gzipped file to the standard output
zdb -C {{poolname}}##Show detailed configuration for a specific ZFS pool
zdb -b {{poolname}}##Show statistics about number, size and deduplication of blocks
zdb##Show detailed configuration of all mounted ZFS zpools
zeek --readfile {{path/to/file.trace}}##Analyze traffic from a `pcap` file
zellij --session {{name}}##Start a new named session
zellij attach##Attach to the most recently used session
zellij list-sessions##List existing sessions
zfs create {{pool_name/filesystem_name}}##Create a new ZFS filesystem
zfs destroy {{pool_name/filesystem_name}}##Delete a ZFS filesystem
zfs list##List all available zfs filesystems
zfs set compression=on {{pool_name/filesystem_name}}##Enable compression on a filesystem
zfs set mountpoint={{/my/mount/path}} {{pool_name/filesystem_name}}##Change mountpoint for a filesystem
zfs snapshot {{pool_name/filesystem_name}}@{{snapshot_name}}##Create a Snapshot of a ZFS filesystem
zig build run##Compile and run the project in the current directory
zig build##Compile the project in the current directory
zig c++ {{path/to/file.cpp}}##Use Zig as a drop-in C++ compiler
zig cc {{path/to/file.c}}##Use Zig as a drop-in C compiler
zig fmt {{path/to/file.zig}}##Reformat Zig source into canonical form
zig init-exe##Initialize a `zig build` application
zig init-lib##Intitialize a `zig build` library
zig test {{path/to/file.zig}}##Create and run a test build
zip -d {{compressed.zip}} "{{foo/*.tmp}}"##Delete files from an existing zip file
zip -e -r {{compressed.zip}} {{path/to/directory}}##Create an encrypted archive (user will be prompted for a password)
zip -r -s {{3g}} {{compressed.zip}} {{path/to/directory}}##Archive a directory and its contents to a multi-part [s]plit zip file (e.g. 3 GB parts)
zip -r -{{9}} {{compressed.zip}} {{path/to/directory}}##Archive a directory and its contents with the highest level [9] of compression
zip -r {{compressed.zip}} {{path/to/directory}} -x {{path/to/exclude}}##E[x]clude unwanted files from being added to the compressed archive
zip -r {{compressed.zip}} {{path/to/file}} {{path/to/directory1}} {{path/to/directory2}}##Package and compress files and directories [r]ecursively
zip -sf {{compressed.zip}}##List files within a specified archive (without extracting them)
zip {{compressed.zip}} {{path/to/file}}##Add files to an existing zip file
zipalign -v -c {{4}} {{path/to/input.zip}}##Check that a ZIP file is correctly aligned on 4-byte boundaries and display the results in a verbose manner
zipalign {{4}} {{path/to/input.zip}} {{path/to/output.zip}}##Align the data of a ZIP file on 4-byte boundaries
zipgrep "{{search_pattern}}" {{path/to/file.zip}} -x {{file/to/exclude1}} {{file/to/exclude2}}##Exclude files inside a ZIP archive from search
zipgrep "{{search_pattern}}" {{path/to/file.zip}} {{file/to/search1}} {{file/to/search2}}##Specify files inside a ZIP archive from search
zipgrep "{{search_pattern}}" {{path/to/file.zip}}##Search for a pattern within a ZIP archive
zipgrep -H -n "{{search_pattern}}" {{path/to/file.zip}}##Print file name and line number for each match
zipgrep -v "{{search_pattern}}" {{path/to/file.zip}}##Search for lines that do not match a pattern
zipinfo -1 {{path/to/archive.zip}}##List all files in a `.zip` file
zipinfo {{path/to/archive.zip}}##List all files in a `.zip` file in long format (permissions, ownership, size, and modification date)
zless {{file.txt.gz}}##Page through a compressed archive with `less`
zlib-flate -compress < {{path/to/input_file}} > {{path/to/compressed.zlib}}##Compress a file
zlib-flate -compress={{compression_level}} < {{path/to/input_file}} > {{path/to/compressed.zlib}}##Compress a file with a specified compression level. 0=Fastest (Worst), 9=Slowest (Best)
zlib-flate -uncompress < {{path/to/compressed.zlib}} > {{path/to/output_file}}##Uncompress a file
zm edit##Edit a draft
zm new##Make a new draft
zm publish##Publish a draft and commit it with git
zmore {{path/to/file.txt.gz}}##Open a compressed file
zmv '{{(*).log}}' '{{$1.txt}}'##Move files using a regular expression-like pattern
zmv -i '{{(*).log}}' '{{$1.txt}}'##Interactively move files, with a prompt before every change
zmv -n '{{(*).log}}' '{{$1.txt}}'##Preview the result of a move, without making any actual changes
zmv -v '{{(*).log}}' '{{$1.txt}}'##Verbosely print each action as it's being executed
zola build --output-dir {{path/to/output_directory/}}##Build the whole site into a different directory
zola build##Build the whole site in the `public` directory after deleting it
zola check##Build all pages just like the build command would, but without writing any of the results to disk
zola init {{my_site}}##Create the directory structure used by Zola at the given directory
zola serve##Build and serve the site using a local server (default is `127.0.0.11111`)
zopflipng --prefix={{prefix}} {{image1.png}} {{image2.png}} {{image3.png}}##Optimize several PNGs and save with given prefix
zopflipng {{input.png}} {{output.png}}##Optimize a PNG
zoxide add {{path/to/directory}}##Add a directory or increment its rank
zoxide init {{bash|fish|zsh}}##Generate shell configuration for command aliases (`z`, `za`, `zi`, `zq`, `zr`)
zoxide query --interactive##Start an interactive directory search (requires `fzf`)
zoxide query {{foo}} {{bar}}##Go to the highest-ranked directory that contains "foo" and then "bar"
zoxide query {{foo}}##Go to the highest-ranked directory that contains "foo" in the name
zoxide remove {{path/to/directory}} --interactive##Remove a directory from `zoxide`'s database interactively
zpool add {{pool_name}} cache {{cache_disk}}##Add a cache (L2ARC) device to a zpool
zpool create {{pool_name}} mirror {{disk1}} {{disk2}} mirror {{disk3}} {{disk4}}##Create a mirrored pool
zpool export {{pool_name}}##Export a zpool (unmount all filesystems)
zpool history {{pool_name}}##Show the history of all pool operations
zpool import {{pool_name}}##Import a zpool
zpool import##List zpools available for import
zpool scrub {{pool_name}}##Check a ZFS pool for errors (verifies the checksum of EVERY block). Very CPU and disk intensive
zpool status##Show the configuration and status of all ZFS zpools
zsh --verbose##Start an interactive shell session in verbose mode, printing each command before executing it
zsh --xtrace {{path/to/script.zsh}}##Execute a script, printing each command before executing it
zsh -c "{{command}}"##Execute a command and then exit
zsh {{path/to/script.zsh}}##Execute a script
zsh##Start an interactive shell session
zstd --ultra -{{level}} {{file}}##Unlock higher compression levels (up to 22) using more memory (both for compression and decompression)
zstd -d {{file}}.zst##Decompress a file
zstd -dc {{file}}.zst##Decompress to stdout
zstd -{{level}} {{file}}##Compress a file specifying the compression level, where 1=fastest, 19=slowest and 3=default
zstd {{file}}##Compress a file into a new file with the `.zst` suffix
zsteg --all {{path/to/image.bmp}}##Detect embedded data in a BMP image, using all known methods
zsteg --bits {{1,2,3|1-3}} {{path/to/image.bmp}}##Detect embedded data in a BMP image, specifying the bits to consider
zsteg --min-str-len {{10}} --strings {{first|all|longest|none}} {{path/to/image.bmp}}##Detect embedded data in a BMP image, specifying the minimum length of the strings to be found and the find mode
zsteg --msb --order yx {{path/to/image.png}}##Detect embedded data in a PNG, iterating pixels vertically and using MSB first
zsteg --prime --invert {{path/to/image.png}}##Detect embedded data in a PNG, extracting only prime pixels and inverting bits
zsteg {{path/to/image.png}}##Detect embedded data in a PNG
{{!-n}}:p##Perform a history expansion, but print the command that would be run instead of actually running it
{{100}}j##Jump to the 100th line
{{Backspace|x}}##Delete a number
{{Example()}};##While in a `yacas` session, display an example
{{Integrate(x)Cos(x)}};##While in a `yacas` session, execute a statement
{{Left|Right}} arrow key##Navigate the piece horizontally
{{Q|W|E|A|S|D}}##Rotate the piece on its axis
{{Spacebar|Up arrow key}}##Rotate the piece clockwise or counterclockwise
{{Up|Down|Left|Right}} arrow key##Navigate the current piece on a 2D plane
{{ag -l}} | entr {{make}}##Rebuild with `make` if any file in any subdirectory changes
{{args}} | parallel -X {{command}}##Parallel xargs, cram as many args as possible onto one command
{{arguments_source}} | xargs -I _ {{command}} _ {{optional_extra_arguments}}##Execute the command once for each input line, replacing any occurrences of the placeholder (here marked as `_`) with the input line
{{arguments_source}} | xargs -P {{max-procs}} {{command}}##Parallel runs of up to `max-procs` processes at a time; the default is 1. If `max-procs` is 0, xargs will run as many processes as possible at a time
{{arguments_source}} | xargs sh -c "{{command1}} && {{command2}} | {{command3}}"##Run multiple chained commands on the input data
{{arguments_source}} | xargs {{command}}##Run a command using the input data as arguments
{{cat path/to/file.json}} | jq '.[]'##Print all array items/object keys
{{cat path/to/file.json}} | jq '{{.[index1], .[index2], ...}}'##Print the specifed array items
{{cat path/to/file.json}} | jq '{{.key1, .key2, ...}}'##Print the specifed keys
{{cat path/to/file.json}} | jq '{{.}} {{+|-}} {{{"key1": "value1", "key2": "value2", ...}}}'##Add/remove the specified keys
{{cat path/to/file.json}} | jq '{{.}}'##Execute the specified expression (print a colored and formatted json)
{{cat path/to/file.json}} | jq --from-file {{path/to/script.jq}}##Execute the specified script
{{cat path/to/file.json}} | jq --from-file {{path/to/script.jq}}'##Execute the specified script
{{cat path/to/file.json}} | jq {{--arg "name1" "value1" --arg "name2" "value2" ...}} '{{. + $ARGS.named}}'##Pass the specifed arguments
{{cat test.svg}} | svgo -i - -o {{test.min.svg}}##Optimize SVG content passed from another command, and save the result to a file
{{cmd}} -H {{filename.csv}}##Run a command on a CSV file with no header row
{{cmd}} -d {{delimiter}} {{filename.csv}}##Run a command on a CSV file with a custom delimiter
{{cmd}} -q {{quote_char}} {{filename.csv}}##Run a command on a CSV file with a custom quote character
{{cmd}} -t {{filename.csv}}##Run a command on a CSV file with a tab as a delimiter (overrides -d)
{{command_to_watch}}; noti##Display a notification even when you put it after the command to watch
{{command}} !$##Run a command with the last argument of the previous command
{{command}} !^##Run a command with the first argument of the previous command
{{command}} & progress --monitor --pid $!##Launch and monitor a single long-running command
{{command}} | clamdscan -##Scan data from stdin
{{command}} | clamscan -##Scan data from stdin
{{command}} | docker secret create {{secret_name}} -##Create a new secret from stdin
{{command}} | figlet##Pipe command output through FIGlet
{{command}} | nms -a -c##Clear the screen before decrypting
{{command}} | slackcat --channel {{channel_name}} --filename={{snippet_name}}##Pipe command output to Slack as a text snippet
{{command}} | slackcat --channel {{channel_name}} --stream##Stream command output to Slack continuously
{{command}} | tac##Print the contents of the standard input reversed to the standard output
{{echo "hello world"}} | gist##Read contents from stdin and create a gist from it
{{echo 'cargo +nightly watch'}} | sd '(\w+)\s+\+(\w+)\s+(\w+)' 'cmd: $1, channel: $2, subcmd: $3'##Replace words using capture groups
{{echo 'lorem ipsum 23   '}} | sd '\s+$' ''##Trim some whitespace using a regular expression
{{echo -n '{"name":"My Folder1"}' | base64}} | bw create folder##Create a folder in Bitwarden vault
{{echo data.txt}} | mosquitto_pub -t {{sensors/temperature}} -l##Read newline delimited data from stdin as a message and publish it to `sensors/temperature` topic
{{echo hello=world}} | yank -d {{=}}##Yank using a specific delimiter
{{editor}} ~/.config/fish/fishfile; fisher##Edit 'fishfile' manually with your favorite editor and install multiple plugins
{{find .}} | wc##Count all lines, words and bytes from `stdin`
{{fortune}} | lolcat##Print the result of a text-producing command in rainbow colors
{{git_subcommand}} {{command_arguments}}##Run a Git command while in the interactive Git shell
{{h|j|k|l}} OR {{Left|Down|Up|Right}} arrow key##Navigate the board
{{ifconfig}} | jc {{--ifconfig}} -p##Output pretty JSON via pipe
{{ifconfig}} | jc {{--ifconfig}}##Convert command output to JSON via pipe
{{input}} | carbon-now##Create an image from standard input using default settings
{{ls *.c}} | entr {{'make && make test'}}##Rebuild and test with `make` if any `.c` source files in the current directory change
{{ls *.rb}} | entr -r {{ruby main.rb}}##Send a `SIGTERM` to any previously spawned ruby subprocesses before executing `ruby main.rb`
{{ls *.sql}} | entr {{psql -f}} /_##Run a command with the changed file (`/_`) as an argument
{{ls -la}} | nms -a##Decrypt output immediately, without waiting for a keystroke
{{npm test}} | gnomon --high {{0.5}}##Set a high threshold of 0.5 seconds for the elapsed time; exceeding which the timestamp will be colored bright red
{{npm test}} | gnomon --medium {{0.2}}##Set a medium threshold of 0.2 seconds (Timestamp will be colored bright yellow)
{{npm test}} | gnomon --type=absolute##Show an absolute timestamp in UTC
{{npm test}} | gnomon --type=elapsed-total##Show number of seconds since the start of the process
{{npm test}} | gnomon##Use UNIX (or DOS) pipes to pipe the stdout of any command through gnomon
{{other_command}} | samtools view -h - chromosome:start-end##Take input from stdin (-) and print the SAM header and any reads overlapping a specific region to stdout
{{output}} | q "select * from -"##Read data from stdin; '-' in the query represents the data from stdin
{{ps ux}} | yank -g "{{[0-9]+}}"##Only yank fields matching a specific pattern
{{quit}}##Quit from a `yacas` session
{{some_command}} | b2sum##Calculate the BLAKE2 checksum from stdin
{{some_command}} | shasum##Calculate the SHA1 checksum from stdin
{{some_command}} | ts "{{%b %d %H:%M:%.S}}"##Add timestamps with microsecond precision
{{some_command}} | ts -i "{{%H:%M:%.S}}"##Add [i]ncremental timestamps with microsecond precision, starting from zero
{{some_command}} | ts##Add a timestamp to the beginning of each line
{{somecommand}} | base32 --decode##Decode from stdin
{{somecommand}} | base32##Encode from stdin
{{somecommand}} | base64 --decode##Decode from stdin
{{somecommand}} | base64##Encode from stdin
{{sub_command}} {{arguments}}##Run any `tlmgr` sub-command in the interactive shell
{{sudo dmesg}} | yank -l##Yank an entire line
{{sudo dmesg}} | yank##Yank using the default delimiters (\f, \n, \r, \s, \t)
|##Center align the current cell
